
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	482e      	ldr	r0, [pc, #184]	; (800027c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f240 0000 	movw	r0, #0
 80001de:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001e2:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001ea:	6008      	str	r0, [r1, #0]
 80001ec:	f04f 0000 	mov.w	r0, #0
 80001f0:	eee1 0a10 	vmsr	fpscr, r0
 80001f4:	f64e 713c 	movw	r1, #61244	; 0xef3c
 80001f8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001fc:	6008      	str	r0, [r1, #0]
 80001fe:	2006      	movs	r0, #6
 8000200:	f380 8814 	msr	CONTROL, r0
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	f002 fa8a 	bl	8002720 <__early_init>
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <endfiniloop+0xa>)
 800020e:	491d      	ldr	r1, [pc, #116]	; (8000284 <endfiniloop+0xe>)
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <endfiniloop+0x12>)

08000212 <msloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <msloop>
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <endfiniloop+0x16>)
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <endfiniloop+0x6>)

08000220 <psloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <psloop>
 800022a:	4919      	ldr	r1, [pc, #100]	; (8000290 <endfiniloop+0x1a>)
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <endfiniloop+0x1e>)
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <endfiniloop+0x22>)

08000230 <dloop>:
 8000230:	429a      	cmp	r2, r3
 8000232:	bf3e      	ittt	cc
 8000234:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000238:	f842 0b04 	strcc.w	r0, [r2], #4
 800023c:	e7f8      	bcc.n	8000230 <dloop>
 800023e:	2000      	movs	r0, #0
 8000240:	4916      	ldr	r1, [pc, #88]	; (800029c <endfiniloop+0x26>)
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <endfiniloop+0x2a>)

08000244 <bloop>:
 8000244:	4291      	cmp	r1, r2
 8000246:	bf3c      	itt	cc
 8000248:	f841 0b04 	strcc.w	r0, [r1], #4
 800024c:	e7fa      	bcc.n	8000244 <bloop>
 800024e:	f000 f84f 	bl	80002f0 <__late_init>
 8000252:	4c14      	ldr	r4, [pc, #80]	; (80002a4 <endfiniloop+0x2e>)
 8000254:	4d14      	ldr	r5, [pc, #80]	; (80002a8 <endfiniloop+0x32>)

08000256 <initloop>:
 8000256:	42ac      	cmp	r4, r5
 8000258:	da03      	bge.n	8000262 <endinitloop>
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
 800025e:	4788      	blx	r1
 8000260:	e7f9      	b.n	8000256 <initloop>

08000262 <endinitloop>:
 8000262:	f005 ff35 	bl	80060d0 <main>
 8000266:	4c11      	ldr	r4, [pc, #68]	; (80002ac <endfiniloop+0x36>)
 8000268:	4d11      	ldr	r5, [pc, #68]	; (80002b0 <endfiniloop+0x3a>)

0800026a <finiloop>:
 800026a:	42ac      	cmp	r4, r5
 800026c:	da03      	bge.n	8000276 <endfiniloop>
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000272:	4788      	blx	r1
 8000274:	e7f9      	b.n	800026a <finiloop>

08000276 <endfiniloop>:
 8000276:	f000 b843 	b.w	8000300 <__default_exit>
 800027a:	0000      	.short	0x0000
 800027c:	20000800 	.word	0x20000800
 8000280:	55555555 	.word	0x55555555
 8000284:	20000000 	.word	0x20000000
 8000288:	20000400 	.word	0x20000400
 800028c:	20000400 	.word	0x20000400
 8000290:	08006ec8 	.word	0x08006ec8
 8000294:	20000800 	.word	0x20000800
 8000298:	200008b8 	.word	0x200008b8
 800029c:	200008b8 	.word	0x200008b8
 80002a0:	20001728 	.word	0x20001728
 80002a4:	080001c0 	.word	0x080001c0
 80002a8:	080001c0 	.word	0x080001c0
 80002ac:	080001c0 	.word	0x080001c0
 80002b0:	080001c0 	.word	0x080001c0
	...

080002c0 <_port_switch>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	ed2d 8a10 	vpush	{s16-s31}
 80002c8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002cc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80002d0:	ecbd 8a10 	vpop	{s16-s31}
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d8 <_port_thread_start>:
 80002d8:	2300      	movs	r3, #0
 80002da:	f383 8811 	msr	BASEPRI, r3
 80002de:	4628      	mov	r0, r5
 80002e0:	47a0      	blx	r4
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fc14 	bl	8000b10 <chThdExit>

080002e8 <_port_switch_from_isr>:
 80002e8:	f000 fafa 	bl	80008e0 <chSchDoReschedule>

080002ec <_port_exit_from_isr>:
 80002ec:	df00      	svc	0
 80002ee:	e7fe      	b.n	80002ee <_port_exit_from_isr+0x2>

080002f0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	f3af 8000 	nop.w
 80002f8:	f3af 8000 	nop.w
 80002fc:	f3af 8000 	nop.w

08000300 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000300:	e7fe      	b.n	8000300 <__default_exit>
 8000302:	bf00      	nop
 8000304:	f3af 8000 	nop.w
 8000308:	f3af 8000 	nop.w
 800030c:	f3af 8000 	nop.w

08000310 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000310:	e7fe      	b.n	8000310 <_unhandled_exception>
 8000312:	bf00      	nop
 8000314:	f3af 8000 	nop.w
 8000318:	f3af 8000 	nop.w
 800031c:	f3af 8000 	nop.w

08000320 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000320:	e7fe      	b.n	8000320 <_idle_thread>
 8000322:	bf00      	nop
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w

08000330 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000336:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000338:	2400      	movs	r4, #0
 800033a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800033e:	4e20      	ldr	r6, [pc, #128]	; (80003c0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000340:	4d20      	ldr	r5, [pc, #128]	; (80003c4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000342:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000346:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000348:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	68f2      	ldr	r2, [r6, #12]
 800034e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000352:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000354:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000356:	2120      	movs	r1, #32
 8000358:	f042 0201 	orr.w	r2, r2, #1
 800035c:	2610      	movs	r6, #16
 800035e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000360:	b083      	sub	sp, #12
 8000362:	77de      	strb	r6, [r3, #31]
 8000364:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000368:	f000 f9c2 	bl	80006f0 <_scheduler_init>
  _vt_init();
 800036c:	f000 f8f8 	bl	8000560 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000370:	f000 fc66 	bl	8000c40 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000374:	f001 fc7c 	bl	8001c70 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000378:	f001 fcc2 	bl	8001d00 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800037c:	4628      	mov	r0, r5
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	f000 fab6 	bl	80008f0 <_thread_init>
 8000384:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000388:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800038a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800038c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800038e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000392:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	490c      	ldr	r1, [pc, #48]	; (80003c8 <chSysInit+0x98>)
 8000398:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800039a:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800039e:	9400      	str	r4, [sp, #0]
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <chSysInit+0x9c>)
 80003a2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80003a6:	f000 faeb 	bl	8000980 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <chSysInit+0xa0>)
 80003ac:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 80003ae:	b003      	add	sp, #12
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00
 80003b8:	05fa0300 	.word	0x05fa0300
 80003bc:	e0001000 	.word	0xe0001000
 80003c0:	e000edf0 	.word	0xe000edf0
 80003c4:	200008e8 	.word	0x200008e8
 80003c8:	08006160 	.word	0x08006160
 80003cc:	08000321 	.word	0x08000321
 80003d0:	08006150 	.word	0x08006150
 80003d4:	f3af 8000 	nop.w
 80003d8:	f3af 8000 	nop.w
 80003dc:	f3af 8000 	nop.w

080003e0 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80003e0:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 80003e2:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80003e4:	d512      	bpl.n	800040c <chSysIntegrityCheckI+0x2c>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 80003e6:	4a2d      	ldr	r2, [pc, #180]	; (800049c <chSysIntegrityCheckI+0xbc>)
 80003e8:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003ea:	4291      	cmp	r1, r2
 80003ec:	d044      	beq.n	8000478 <chSysIntegrityCheckI+0x98>
 80003ee:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 80003f0:	6809      	ldr	r1, [r1, #0]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003f2:	4291      	cmp	r1, r2
      n++;
 80003f4:	f103 0301 	add.w	r3, r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003f8:	d1fa      	bne.n	80003f0 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80003fa:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003fc:	428c      	cmp	r4, r1
 80003fe:	d037      	beq.n	8000470 <chSysIntegrityCheckI+0x90>
      n--;
      tp = tp->p_prev;
 8000400:	6864      	ldr	r4, [r4, #4]
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000402:	4294      	cmp	r4, r2
      n--;
 8000404:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000408:	d1fa      	bne.n	8000400 <chSysIntegrityCheckI+0x20>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800040a:	bb8b      	cbnz	r3, 8000470 <chSysIntegrityCheckI+0x90>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800040c:	0783      	lsls	r3, r0, #30
 800040e:	d514      	bpl.n	800043a <chSysIntegrityCheckI+0x5a>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 8000410:	4a22      	ldr	r2, [pc, #136]	; (800049c <chSysIntegrityCheckI+0xbc>)
 8000412:	4614      	mov	r4, r2
 8000414:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000418:	42a1      	cmp	r1, r4
 800041a:	d033      	beq.n	8000484 <chSysIntegrityCheckI+0xa4>
 800041c:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 800041e:	6809      	ldr	r1, [r1, #0]
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000420:	42a1      	cmp	r1, r4
      n++;
 8000422:	f103 0301 	add.w	r3, r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000426:	d1fa      	bne.n	800041e <chSysIntegrityCheckI+0x3e>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8000428:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800042a:	428a      	cmp	r2, r1
 800042c:	d020      	beq.n	8000470 <chSysIntegrityCheckI+0x90>
      n--;
      vtp = vtp->vt_prev;
 800042e:	6852      	ldr	r2, [r2, #4]
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000430:	42a2      	cmp	r2, r4
      n--;
 8000432:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000436:	d1fa      	bne.n	800042e <chSysIntegrityCheckI+0x4e>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000438:	b9d3      	cbnz	r3, 8000470 <chSysIntegrityCheckI+0x90>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800043a:	f010 0004 	ands.w	r0, r0, #4
 800043e:	d014      	beq.n	800046a <chSysIntegrityCheckI+0x8a>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8000440:	4a16      	ldr	r2, [pc, #88]	; (800049c <chSysIntegrityCheckI+0xbc>)
 8000442:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000444:	4293      	cmp	r3, r2
 8000446:	d023      	beq.n	8000490 <chSysIntegrityCheckI+0xb0>
 8000448:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 800044a:	691b      	ldr	r3, [r3, #16]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 800044c:	4293      	cmp	r3, r2
      n++;
 800044e:	f100 0001 	add.w	r0, r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8000452:	d1fa      	bne.n	800044a <chSysIntegrityCheckI+0x6a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8000454:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000456:	4299      	cmp	r1, r3
 8000458:	d00a      	beq.n	8000470 <chSysIntegrityCheckI+0x90>
      n--;
      tp = tp->p_older;
 800045a:	6949      	ldr	r1, [r1, #20]
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 800045c:	4291      	cmp	r1, r2
      n--;
 800045e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000462:	d1fa      	bne.n	800045a <chSysIntegrityCheckI+0x7a>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000464:	3000      	adds	r0, #0
 8000466:	bf18      	it	ne
 8000468:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 800046a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800046e:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8000470:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8000472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000476:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8000478:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800047a:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 800047c:	bf18      	it	ne
 800047e:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000480:	d1be      	bne.n	8000400 <chSysIntegrityCheckI+0x20>
 8000482:	e7c3      	b.n	800040c <chSysIntegrityCheckI+0x2c>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8000484:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000486:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8000488:	bf18      	it	ne
 800048a:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800048c:	d1cf      	bne.n	800042e <chSysIntegrityCheckI+0x4e>
 800048e:	e7d4      	b.n	800043a <chSysIntegrityCheckI+0x5a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8000490:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000492:	4299      	cmp	r1, r3
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8000494:	f04f 0000 	mov.w	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000498:	d0e7      	beq.n	800046a <chSysIntegrityCheckI+0x8a>
 800049a:	e7de      	b.n	800045a <chSysIntegrityCheckI+0x7a>
 800049c:	200008b8 	.word	0x200008b8

080004a0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80004a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80004a4:	4d1b      	ldr	r5, [pc, #108]	; (8000514 <chSysTimerHandlerI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80004a6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80004aa:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80004ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004b0:	68a3      	ldr	r3, [r4, #8]
 80004b2:	1a42      	subs	r2, r0, r1
 80004b4:	429a      	cmp	r2, r3
 80004b6:	f105 091c 	add.w	r9, r5, #28
 80004ba:	d31a      	bcc.n	80004f2 <chSysTimerHandlerI+0x52>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004bc:	2600      	movs	r6, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004be:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004c2:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80004c4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80004c8:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004ca:	454a      	cmp	r2, r9
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80004cc:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004ce:	f8c2 9004 	str.w	r9, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80004d2:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004d4:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004d6:	d018      	beq.n	800050a <chSysTimerHandlerI+0x6a>
 80004d8:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80004dc:	6920      	ldr	r0, [r4, #16]
 80004de:	47d0      	blx	sl
 80004e0:	f388 8811 	msr	BASEPRI, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80004e4:	69ec      	ldr	r4, [r5, #28]
 80004e6:	6a78      	ldr	r0, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004e8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80004ea:	68a3      	ldr	r3, [r4, #8]
 80004ec:	1a42      	subs	r2, r0, r1
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d9e7      	bls.n	80004c2 <chSysTimerHandlerI+0x22>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004f2:	454c      	cmp	r4, r9
 80004f4:	d00c      	beq.n	8000510 <chSysTimerHandlerI+0x70>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80004f6:	440b      	add	r3, r1
 80004f8:	1a1b      	subs	r3, r3, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	bf98      	it	ls
 80004fe:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000500:	4418      	add	r0, r3
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 8000502:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000506:	f001 bd8b 	b.w	8002020 <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800050a:	f001 fd81 	bl	8002010 <stStopAlarm>
 800050e:	e7e3      	b.n	80004d8 <chSysTimerHandlerI+0x38>
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	200008b8 	.word	0x200008b8
 8000518:	f3af 8000 	nop.w
 800051c:	f3af 8000 	nop.w

08000520 <chSysGetStatusAndLockX>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8000520:	f3ef 8012 	mrs	r0, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8000524:	b920      	cbnz	r0, 8000530 <chSysGetStatusAndLockX+0x10>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000526:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800052a:	2320      	movs	r3, #32
 800052c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	f3af 8000 	nop.w
 8000538:	f3af 8000 	nop.w
 800053c:	f3af 8000 	nop.w

08000540 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 8000540:	b968      	cbnz	r0, 800055e <chSysRestoreStatusX+0x1e>
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8000542:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000544:	f3ef 8405 	mrs	r4, IPSR

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8000548:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800054c:	b114      	cbz	r4, 8000554 <chSysRestoreStatusX+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800054e:	f380 8811 	msr	BASEPRI, r0
 8000552:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8000554:	f000 f9b4 	bl	80008c0 <chSchRescheduleS>
 8000558:	f384 8811 	msr	BASEPRI, r4
 800055c:	bd10      	pop	{r4, pc}
 800055e:	4770      	bx	lr

08000560 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000566:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800056a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800056c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800056e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000570:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000572:	621a      	str	r2, [r3, #32]
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	200008b8 	.word	0x200008b8
 800057c:	f3af 8000 	nop.w

08000580 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000582:	4e1c      	ldr	r6, [pc, #112]	; (80005f4 <chVTDoSetI+0x74>)
 8000584:	4634      	mov	r4, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000586:	2901      	cmp	r1, #1
 8000588:	bf98      	it	ls
 800058a:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800058c:	f854 7f1c 	ldr.w	r7, [r4, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000590:	6103      	str	r3, [r0, #16]
 8000592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000596:	42a7      	cmp	r7, r4
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000598:	4605      	mov	r5, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800059a:	60c2      	str	r2, [r0, #12]
 800059c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800059e:	d01e      	beq.n	80005de <chVTDoSetI+0x5e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005a0:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005a2:	68bb      	ldr	r3, [r7, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005a4:	4408      	add	r0, r1
 80005a6:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005a8:	429c      	cmp	r4, r3
 80005aa:	d315      	bcc.n	80005d8 <chVTDoSetI+0x58>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 80005ac:	69f3      	ldr	r3, [r6, #28]
  while (p->vt_delta < delta) {
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	4294      	cmp	r4, r2
 80005b2:	d904      	bls.n	80005be <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 80005b4:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80005b6:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	42a2      	cmp	r2, r4
 80005bc:	d3fa      	bcc.n	80005b4 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80005c2:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80005c4:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 80005c6:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 80005c8:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80005ca:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80005d0:	1b14      	subs	r4, r2, r4
 80005d2:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80005d4:	6271      	str	r1, [r6, #36]	; 0x24
 80005d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80005d8:	f001 fd22 	bl	8002020 <stSetAlarm>
 80005dc:	e7e6      	b.n	80005ac <chVTDoSetI+0x2c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80005de:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80005e0:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 80005e2:	6235      	str	r5, [r6, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 80005e4:	4408      	add	r0, r1
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80005e6:	602f      	str	r7, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80005e8:	606f      	str	r7, [r5, #4]
      vtp->vt_delta = delay;
 80005ea:	60a9      	str	r1, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 80005ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80005f0:	f001 bd06 	b.w	8002000 <stStartAlarm>
 80005f4:	200008b8 	.word	0x200008b8
 80005f8:	f3af 8000 	nop.w
 80005fc:	f3af 8000 	nop.w

08000600 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <chVTDoResetI+0x70>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000606:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000608:	d010      	beq.n	800062c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800060a:	6841      	ldr	r1, [r0, #4]
 800060c:	6802      	ldr	r2, [r0, #0]
 800060e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000610:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000612:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000614:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000616:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000618:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800061a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800061c:	d003      	beq.n	8000626 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800061e:	6883      	ldr	r3, [r0, #8]
 8000620:	6891      	ldr	r1, [r2, #8]
 8000622:	440b      	add	r3, r1
 8000624:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800062a:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800062c:	4618      	mov	r0, r3
 800062e:	6811      	ldr	r1, [r2, #0]
 8000630:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000634:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000636:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000638:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 800063a:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800063c:	d013      	beq.n	8000666 <chVTDoResetI+0x66>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800063e:	6892      	ldr	r2, [r2, #8]
 8000640:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000642:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000644:	1883      	adds	r3, r0, r2
 8000646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064a:	608b      	str	r3, [r1, #8]
 800064c:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800064e:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000650:	4293      	cmp	r3, r2
 8000652:	d9e8      	bls.n	8000626 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000654:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000656:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000658:	bf98      	it	ls
 800065a:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800065c:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800065e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000662:	f001 bcdd 	b.w	8002020 <stSetAlarm>
 8000666:	f85d 4b04 	ldr.w	r4, [sp], #4
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800066a:	f001 bcd1 	b.w	8002010 <stStopAlarm>
 800066e:	bf00      	nop
 8000670:	200008b8 	.word	0x200008b8
 8000674:	f3af 8000 	nop.w
 8000678:	f3af 8000 	nop.w
 800067c:	f3af 8000 	nop.w

08000680 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000680:	b410      	push	{r4}
 8000682:	2320      	movs	r3, #32
 8000684:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000688:	7f03      	ldrb	r3, [r0, #28]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d80e      	bhi.n	80006ac <wakeup+0x2c>
 800068e:	e8df f003 	tbb	[pc, r3]
 8000692:	0d27      	.short	0x0d27
 8000694:	0408230d 	.word	0x0408230d
 8000698:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800069a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800069c:	6893      	ldr	r3, [r2, #8]
 800069e:	3301      	adds	r3, #1
 80006a0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80006a2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80006a6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80006a8:	6802      	ldr	r2, [r0, #0]
 80006aa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80006ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006b0:	2200      	movs	r2, #0
 80006b2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80006b6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006b8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80006ba:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	428a      	cmp	r2, r1
 80006c0:	d2fb      	bcs.n	80006ba <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80006c6:	6003      	str	r3, [r0, #0]
 80006c8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80006ca:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80006cc:	6058      	str	r0, [r3, #4]
 80006ce:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80006d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80006d8:	6a03      	ldr	r3, [r0, #32]
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
    break;
 80006de:	e7e5      	b.n	80006ac <wakeup+0x2c>
 80006e0:	2300      	movs	r3, #0
 80006e2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80006e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	200008b8 	.word	0x200008b8

080006f0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80006f2:	2200      	movs	r2, #0
 80006f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80006f6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80006f8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80006fa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	4770      	bx	lr
 8000700:	200008b8 	.word	0x200008b8
 8000704:	f3af 8000 	nop.w
 8000708:	f3af 8000 	nop.w
 800070c:	f3af 8000 	nop.w

08000710 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000710:	2200      	movs	r2, #0
 8000712:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000716:	b410      	push	{r4}
 8000718:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800071a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800071c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	428a      	cmp	r2, r1
 8000722:	d2fb      	bcs.n	800071c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000728:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800072a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800072c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800072e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200008b8 	.word	0x200008b8
 800073c:	f3af 8000 	nop.w

08000740 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <chSchGoSleepS+0x20>)
 8000742:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000744:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000746:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000748:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 800074a:	6810      	ldr	r0, [r2, #0]
 800074c:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800074e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000750:	6043      	str	r3, [r0, #4]
 8000752:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000754:	4610      	mov	r0, r2
}
 8000756:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800075a:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800075c:	f7ff bdb0 	b.w	80002c0 <_port_switch>
 8000760:	200008b8 	.word	0x200008b8
 8000764:	f3af 8000 	nop.w
 8000768:	f3af 8000 	nop.w
 800076c:	f3af 8000 	nop.w

08000770 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000770:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000772:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000774:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000776:	d012      	beq.n	800079e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000778:	4c0c      	ldr	r4, [pc, #48]	; (80007ac <chSchGoSleepTimeoutS+0x3c>)
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <chSchGoSleepTimeoutS+0x40>)
 800077c:	69a3      	ldr	r3, [r4, #24]
 800077e:	4605      	mov	r5, r0
 8000780:	a801      	add	r0, sp, #4
 8000782:	f7ff fefd 	bl	8000580 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000786:	4628      	mov	r0, r5
 8000788:	f7ff ffda 	bl	8000740 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800078c:	9b04      	ldr	r3, [sp, #16]
 800078e:	b113      	cbz	r3, 8000796 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8000790:	a801      	add	r0, sp, #4
 8000792:	f7ff ff35 	bl	8000600 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000796:	69a3      	ldr	r3, [r4, #24]
}
 8000798:	6a18      	ldr	r0, [r3, #32]
 800079a:	b007      	add	sp, #28
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	4c03      	ldr	r4, [pc, #12]	; (80007ac <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80007a0:	f7ff ffce 	bl	8000740 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80007a4:	69a3      	ldr	r3, [r4, #24]
}
 80007a6:	6a18      	ldr	r0, [r3, #32]
 80007a8:	b007      	add	sp, #28
 80007aa:	bd30      	pop	{r4, r5, pc}
 80007ac:	200008b8 	.word	0x200008b8
 80007b0:	08000681 	.word	0x08000681
 80007b4:	f3af 8000 	nop.w
 80007b8:	f3af 8000 	nop.w
 80007bc:	f3af 8000 	nop.w

080007c0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80007c2:	b470      	push	{r4, r5, r6}
 80007c4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007c6:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80007c8:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007ca:	68a8      	ldr	r0, [r5, #8]
 80007cc:	68a1      	ldr	r1, [r4, #8]
 80007ce:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007d0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007d4:	d80b      	bhi.n	80007ee <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007d6:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80007d8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	4291      	cmp	r1, r2
 80007de:	d9fb      	bls.n	80007d8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80007e4:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80007e6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80007e8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80007ea:	bc70      	pop	{r4, r5, r6}
 80007ec:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007ee:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80007f0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 80007f2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007f4:	6891      	ldr	r1, [r2, #8]
 80007f6:	4288      	cmp	r0, r1
 80007f8:	d9fb      	bls.n	80007f2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007fa:	6850      	ldr	r0, [r2, #4]
 80007fc:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80007fe:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000800:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000802:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8000804:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000806:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8000808:	4629      	mov	r1, r5
 800080a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800080c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800080e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000810:	f7ff bd56 	b.w	80002c0 <_port_switch>
 8000814:	200008b8 	.word	0x200008b8
 8000818:	f3af 8000 	nop.w
 800081c:	f3af 8000 	nop.w

08000820 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <chSchIsPreemptionRequired+0x14>)
 8000822:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 8000824:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8000826:	6890      	ldr	r0, [r2, #8]
 8000828:	689b      	ldr	r3, [r3, #8]
#endif
}
 800082a:	4298      	cmp	r0, r3
 800082c:	bf94      	ite	ls
 800082e:	2000      	movls	r0, #0
 8000830:	2001      	movhi	r0, #1
 8000832:	4770      	bx	lr
 8000834:	200008b8 	.word	0x200008b8
 8000838:	f3af 8000 	nop.w
 800083c:	f3af 8000 	nop.w

08000840 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <chSchDoRescheduleBehind+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000842:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000844:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8000846:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000848:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800084a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800084c:	605a      	str	r2, [r3, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800084e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000850:	7701      	strb	r1, [r0, #28]
 8000852:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000854:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000856:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000858:	7725      	strb	r5, [r4, #28]
 800085a:	e000      	b.n	800085e <chSchDoRescheduleBehind+0x1e>
 800085c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	428a      	cmp	r2, r1
 8000862:	d2fb      	bcs.n	800085c <chSchDoRescheduleBehind+0x1c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000864:	685a      	ldr	r2, [r3, #4]
 8000866:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000868:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800086a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800086c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800086e:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 8000870:	bc30      	pop	{r4, r5}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000872:	f7ff bd25 	b.w	80002c0 <_port_switch>
 8000876:	bf00      	nop
 8000878:	200008b8 	.word	0x200008b8
 800087c:	f3af 8000 	nop.w

08000880 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000882:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000884:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000886:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000888:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800088a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800088c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800088e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000890:	7701      	strb	r1, [r0, #28]
 8000892:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000894:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000896:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000898:	7725      	strb	r5, [r4, #28]
 800089a:	e000      	b.n	800089e <chSchDoRescheduleAhead+0x1e>
 800089c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	428a      	cmp	r2, r1
 80008a2:	d8fb      	bhi.n	800089c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80008a8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80008aa:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80008ac:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80008ae:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80008b0:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80008b2:	f7ff bd05 	b.w	80002c0 <_port_switch>
 80008b6:	bf00      	nop
 80008b8:	200008b8 	.word	0x200008b8
 80008bc:	f3af 8000 	nop.w

080008c0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <chSchRescheduleS+0x14>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80008c6:	6892      	ldr	r2, [r2, #8]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d800      	bhi.n	80008d0 <chSchRescheduleS+0x10>
 80008ce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80008d0:	f7ff bfd6 	b.w	8000880 <chSchDoRescheduleAhead>
 80008d4:	200008b8 	.word	0x200008b8
 80008d8:	f3af 8000 	nop.w
 80008dc:	f3af 8000 	nop.w

080008e0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80008e0:	f7ff bfce 	b.w	8000880 <chSchDoRescheduleAhead>
 80008e4:	f3af 8000 	nop.w
 80008e8:	f3af 8000 	nop.w
 80008ec:	f3af 8000 	nop.w

080008f0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80008f2:	4c0d      	ldr	r4, [pc, #52]	; (8000928 <_thread_init+0x38>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80008f4:	63c1      	str	r1, [r0, #60]	; 0x3c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80008f6:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80008f8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80008fa:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80008fc:	f100 0128 	add.w	r1, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000900:	f04f 0e02 	mov.w	lr, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000904:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000906:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800090a:	6145      	str	r5, [r0, #20]
 800090c:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800090e:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000912:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000914:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000916:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000918:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800091a:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800091c:	6128      	str	r0, [r5, #16]
 800091e:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000920:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000922:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000924:	62c1      	str	r1, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	200008b8 	.word	0x200008b8
 800092c:	f3af 8000 	nop.w

08000930 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000932:	3964      	subs	r1, #100	; 0x64
 8000934:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000936:	4e10      	ldr	r6, [pc, #64]	; (8000978 <chThdCreateI+0x48>)
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000938:	9d05      	ldr	r5, [sp, #20]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800093a:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800093c:	60c1      	str	r1, [r0, #12]
 800093e:	640b      	str	r3, [r1, #64]	; 0x40
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <chThdCreateI+0x4c>)
 8000942:	644d      	str	r5, [r1, #68]	; 0x44
 8000944:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000946:	f04f 0e02 	mov.w	lr, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800094a:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800094c:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800094e:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000950:	2501      	movs	r5, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000952:	f100 0228 	add.w	r2, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000956:	f100 0124 	add.w	r1, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800095a:	6106      	str	r6, [r0, #16]
 800095c:	6147      	str	r7, [r0, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800095e:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000962:	7785      	strb	r5, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000964:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000966:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000968:	6343      	str	r3, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800096a:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 800096c:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800096e:	6241      	str	r1, [r0, #36]	; 0x24
 8000970:	6170      	str	r0, [r6, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000972:	6282      	str	r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000974:	62c2      	str	r2, [r0, #44]	; 0x2c
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	200008b8 	.word	0x200008b8
 800097c:	080002d9 	.word	0x080002d9

08000980 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	4604      	mov	r4, r0
 8000984:	2620      	movs	r6, #32
 8000986:	f386 8811 	msr	BASEPRI, r6

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800098a:	3964      	subs	r1, #100	; 0x64
 800098c:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800098e:	4e13      	ldr	r6, [pc, #76]	; (80009dc <chThdCreateStatic+0x5c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000990:	4d13      	ldr	r5, [pc, #76]	; (80009e0 <chThdCreateStatic+0x60>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000992:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000994:	60c1      	str	r1, [r0, #12]
 8000996:	640b      	str	r3, [r1, #64]	; 0x40
 8000998:	9b06      	ldr	r3, [sp, #24]
 800099a:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800099c:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800099e:	660d      	str	r5, [r1, #96]	; 0x60
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80009a0:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80009a4:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80009a6:	7703      	strb	r3, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80009a8:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80009aa:	f100 0328 	add.w	r3, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80009ae:	6082      	str	r2, [r0, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80009b0:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80009b2:	6106      	str	r6, [r0, #16]
 80009b4:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80009b6:	63c2      	str	r2, [r0, #60]	; 0x3c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80009b8:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80009ba:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80009bc:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80009be:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80009c0:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80009c2:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80009c4:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80009c8:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80009ca:	62c3      	str	r3, [r0, #44]	; 0x2c
 80009cc:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80009ce:	f7ff fef7 	bl	80007c0 <chSchWakeupS>
 80009d2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80009d6:	4620      	mov	r0, r4
 80009d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009da:	bf00      	nop
 80009dc:	200008b8 	.word	0x200008b8
 80009e0:	080002d9 	.word	0x080002d9
 80009e4:	f3af 8000 	nop.w
 80009e8:	f3af 8000 	nop.w
 80009ec:	f3af 8000 	nop.w

080009f0 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 80009f0:	b508      	push	{r3, lr}
 80009f2:	2320      	movs	r3, #32
 80009f4:	f383 8811 	msr	BASEPRI, r3
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 80009f8:	f7ff fe8a 	bl	8000710 <chSchReadyI>
 80009fc:	2300      	movs	r3, #0
 80009fe:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  tp = chThdStartI(tp);
  chSysUnlock();

  return tp;
}
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	f3af 8000 	nop.w
 8000a08:	f3af 8000 	nop.w
 8000a0c:	f3af 8000 	nop.w

08000a10 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8000a10:	b510      	push	{r4, lr}
 8000a12:	2320      	movs	r3, #32
 8000a14:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <chThdSetPriority+0x2c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 8000a1e:	6899      	ldr	r1, [r3, #8]
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d001      	beq.n	8000a28 <chThdSetPriority+0x18>
 8000a24:	4281      	cmp	r1, r0
 8000a26:	d200      	bcs.n	8000a2a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8000a28:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 8000a2a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8000a2c:	f7ff ff48 	bl	80008c0 <chSchRescheduleS>
 8000a30:	2300      	movs	r3, #0
 8000a32:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000a36:	4620      	mov	r0, r4
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200008b8 	.word	0x200008b8

08000a40 <chThdTerminate>:
 8000a40:	2320      	movs	r3, #32
 8000a42:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8000a46:	7f43      	ldrb	r3, [r0, #29]
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	7743      	strb	r3, [r0, #29]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	f3af 8000 	nop.w
 8000a5c:	f3af 8000 	nop.w

08000a60 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4601      	mov	r1, r0
 8000a64:	2320      	movs	r3, #32
 8000a66:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f7ff fe80 	bl	8000770 <chSchGoSleepTimeoutS>
 8000a70:	2300      	movs	r3, #0
 8000a72:	f383 8811 	msr	BASEPRI, r3
 8000a76:	bd08      	pop	{r3, pc}
 8000a78:	f3af 8000 	nop.w
 8000a7c:	f3af 8000 	nop.w

08000a80 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8000a80:	b508      	push	{r3, lr}
 8000a82:	2320      	movs	r3, #32
 8000a84:	f383 8811 	msr	BASEPRI, r3
 8000a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 8000a8e:	1a41      	subs	r1, r0, r1
 8000a90:	d002      	beq.n	8000a98 <chThdSleepUntil+0x18>
 8000a92:	2008      	movs	r0, #8
 8000a94:	f7ff fe6c 	bl	8000770 <chSchGoSleepTimeoutS>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f383 8811 	msr	BASEPRI, r3
 8000a9e:	bd08      	pop	{r3, pc}

08000aa0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000aa0:	b508      	push	{r3, lr}
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <chThdYield+0x24>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	699b      	ldr	r3, [r3, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000aae:	6892      	ldr	r2, [r2, #8]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d301      	bcc.n	8000aba <chThdYield+0x1a>
    chSchDoRescheduleBehind();
 8000ab6:	f7ff fec3 	bl	8000840 <chSchDoRescheduleBehind>
 8000aba:	2300      	movs	r3, #0
 8000abc:	f383 8811 	msr	BASEPRI, r3
 8000ac0:	bd08      	pop	{r3, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200008b8 	.word	0x200008b8
 8000ac8:	f3af 8000 	nop.w
 8000acc:	f3af 8000 	nop.w

08000ad0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000ad0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <chThdExitS+0x3c>)
 8000ad4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8000ad8:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000ada:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8000ade:	429d      	cmp	r5, r3
 8000ae0:	d007      	beq.n	8000af2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe12 	bl	8000710 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000aee:	42ab      	cmp	r3, r5
 8000af0:	d1f7      	bne.n	8000ae2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000af2:	7f63      	ldrb	r3, [r4, #29]
 8000af4:	079b      	lsls	r3, r3, #30
 8000af6:	d104      	bne.n	8000b02 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8000af8:	6963      	ldr	r3, [r4, #20]
 8000afa:	6922      	ldr	r2, [r4, #16]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	6922      	ldr	r2, [r4, #16]
 8000b00:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000b02:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8000b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000b08:	f7ff be1a 	b.w	8000740 <chSchGoSleepS>
 8000b0c:	200008b8 	.word	0x200008b8

08000b10 <chThdExit>:
 8000b10:	2320      	movs	r3, #32
 8000b12:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8000b16:	f7ff bfdb 	b.w	8000ad0 <chThdExitS>
 8000b1a:	bf00      	nop
 8000b1c:	f3af 8000 	nop.w

08000b20 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8000b20:	b538      	push	{r3, r4, r5, lr}
 8000b22:	4604      	mov	r4, r0
 8000b24:	2320      	movs	r3, #32
 8000b26:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8000b2a:	7f03      	ldrb	r3, [r0, #28]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d007      	beq.n	8000b40 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8000b32:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000b34:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8000b36:	2009      	movs	r0, #9
 8000b38:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8000b3a:	6263      	str	r3, [r4, #36]	; 0x24
 8000b3c:	f7ff fe00 	bl	8000740 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8000b40:	6a25      	ldr	r5, [r4, #32]
 8000b42:	2300      	movs	r3, #0
 8000b44:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f000 f8a9 	bl	8000ca0 <chThdRelease>
#endif

  return msg;
}
 8000b4e:	4628      	mov	r0, r5
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	bf00      	nop
 8000b54:	200008b8 	.word	0x200008b8
 8000b58:	f3af 8000 	nop.w
 8000b5c:	f3af 8000 	nop.w

08000b60 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000b60:	b169      	cbz	r1, 8000b7e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000b64:	b410      	push	{r4}
 8000b66:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000b68:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b6a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b6c:	2004      	movs	r0, #4
 8000b6e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000b72:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000b74:	6053      	str	r3, [r2, #4]
}
 8000b76:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b7a:	f7ff bdf9 	b.w	8000770 <chSchGoSleepTimeoutS>
}
 8000b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b82:	4770      	bx	lr
 8000b84:	200008b8 	.word	0x200008b8
 8000b88:	f3af 8000 	nop.w
 8000b8c:	f3af 8000 	nop.w

08000b90 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000b90:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d00a      	beq.n	8000bac <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000b96:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000b98:	6814      	ldr	r4, [r2, #0]
 8000b9a:	6004      	str	r4, [r0, #0]
 8000b9c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000b9e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000ba0:	6211      	str	r1, [r2, #32]
  (void) chSchReadyI(tp);
 8000ba2:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba8:	f7ff bdb2 	b.w	8000710 <chSchReadyI>
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000bb0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000bb2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d00b      	beq.n	8000bd0 <chThdDequeueAllI+0x20>
 8000bb8:	4604      	mov	r4, r0
 8000bba:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	6022      	str	r2, [r4, #0]
 8000bc0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000bc2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000bc4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8000bc6:	f7ff fda3 	bl	8000710 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d1f5      	bne.n	8000bbc <chThdDequeueAllI+0xc>
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	f3af 8000 	nop.w
 8000bdc:	f3af 8000 	nop.w

08000be0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <chTMStartMeasurementX+0x8>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000be4:	6083      	str	r3, [r0, #8]
 8000be6:	4770      	bx	lr
 8000be8:	e0001000 	.word	0xe0001000
 8000bec:	f3af 8000 	nop.w

08000bf0 <chTMStopMeasurementX>:
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000bf2:	4910      	ldr	r1, [pc, #64]	; (8000c34 <chTMStopMeasurementX+0x44>)
 8000bf4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000bf6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000bf8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000bfa:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000bfc:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000bfe:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000c00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000c08:	18e4      	adds	r4, r4, r3
 8000c0a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c0e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000c10:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c12:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000c14:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c16:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000c1a:	d805      	bhi.n	8000c28 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000c1c:	6802      	ldr	r2, [r0, #0]
 8000c1e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000c20:	bf38      	it	cc
 8000c22:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000c24:	bcf0      	pop	{r4, r5, r6, r7}
 8000c26:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000c28:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e0001000 	.word	0xe0001000
 8000c34:	200008b8 	.word	0x200008b8
 8000c38:	f3af 8000 	nop.w
 8000c3c:	f3af 8000 	nop.w

08000c40 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c42:	4c0c      	ldr	r4, [pc, #48]	; (8000c74 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000c44:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c46:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000c4c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c4e:	2600      	movs	r6, #0
 8000c50:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c52:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000c54:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000c56:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000c58:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c5a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000c60:	f7ff ffbe 	bl	8000be0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000c64:	4668      	mov	r0, sp
 8000c66:	f7ff ffc3 	bl	8000bf0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000c6a:	9b02      	ldr	r3, [sp, #8]
 8000c6c:	6763      	str	r3, [r4, #116]	; 0x74
}
 8000c6e:	b006      	add	sp, #24
 8000c70:	bdd0      	pop	{r4, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200008b8 	.word	0x200008b8
 8000c78:	f3af 8000 	nop.w
 8000c7c:	f3af 8000 	nop.w

08000c80 <chThdAddRef>:
 8000c80:	2320      	movs	r3, #32
 8000c82:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 8000c86:	7f83      	ldrb	r3, [r0, #30]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	7783      	strb	r3, [r0, #30]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000c92:	4770      	bx	lr
 8000c94:	f3af 8000 	nop.w
 8000c98:	f3af 8000 	nop.w
 8000c9c:	f3af 8000 	nop.w

08000ca0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	f383 8811 	msr	BASEPRI, r3
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8000ca8:	7f83      	ldrb	r3, [r0, #30]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	7783      	strb	r3, [r0, #30]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8000cb6:	b913      	cbnz	r3, 8000cbe <chThdRelease+0x1e>
 8000cb8:	7f03      	ldrb	r3, [r0, #28]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d000      	beq.n	8000cc0 <chThdRelease+0x20>
 8000cbe:	4770      	bx	lr
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8000cc0:	7f43      	ldrb	r3, [r0, #29]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d002      	beq.n	8000cd0 <chThdRelease+0x30>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d007      	beq.n	8000cde <chThdRelease+0x3e>
 8000cce:	4770      	bx	lr
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000cd0:	6943      	ldr	r3, [r0, #20]
 8000cd2:	6902      	ldr	r2, [r0, #16]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	6902      	ldr	r2, [r0, #16]
 8000cd8:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 8000cda:	f001 b879 	b.w	8001dd0 <chHeapFree>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000cde:	6943      	ldr	r3, [r0, #20]
 8000ce0:	6902      	ldr	r2, [r0, #16]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	6902      	ldr	r2, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 8000ce6:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000ce8:	6153      	str	r3, [r2, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8000cea:	f001 b921 	b.w	8001f30 <chPoolFree>
 8000cee:	bf00      	nop

08000cf0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	4616      	mov	r6, r2
 8000cf6:	461f      	mov	r7, r3
 8000cf8:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8000cfa:	f001 f821 	bl	8001d40 <chHeapAlloc>
  if (wsp == NULL) {
 8000cfe:	b198      	cbz	r0, 8000d28 <chThdCreateFromHeap+0x38>
 8000d00:	2320      	movs	r3, #32
 8000d02:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000d06:	9b08      	ldr	r3, [sp, #32]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4632      	mov	r2, r6
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fe0e 	bl	8000930 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	7743      	strb	r3, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8000d18:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000d1a:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8000d1c:	f7ff fd50 	bl	80007c0 <chSchWakeupS>
 8000d20:	2300      	movs	r3, #0
 8000d22:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 8000d26:	4620      	mov	r0, r4
}
 8000d28:	b003      	add	sp, #12
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	f3af 8000 	nop.w

08000d30 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
                                    tfunc_t pf, void *arg) {
 8000d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	460e      	mov	r6, r1
 8000d38:	4617      	mov	r7, r2
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	4605      	mov	r5, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8000d3e:	f001 f8df 	bl	8001f00 <chPoolAlloc>
  if (wsp == NULL) {
 8000d42:	b1a0      	cbz	r0, 8000d6e <chThdCreateFromMemoryPool+0x3e>
 8000d44:	2320      	movs	r3, #32
 8000d46:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000d4a:	6869      	ldr	r1, [r5, #4]
 8000d4c:	f8cd 8000 	str.w	r8, [sp]
 8000d50:	463b      	mov	r3, r7
 8000d52:	4632      	mov	r2, r6
 8000d54:	f7ff fdec 	bl	8000930 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	7743      	strb	r3, [r0, #29]
  tp->p_mpool = mp;
 8000d5c:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8000d5e:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000d60:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8000d62:	f7ff fd2d 	bl	80007c0 <chSchWakeupS>
 8000d66:	2300      	movs	r3, #0
 8000d68:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 8000d6c:	4620      	mov	r0, r4
}
 8000d6e:	b002      	add	sp, #8
 8000d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d74:	f3af 8000 	nop.w
 8000d78:	f3af 8000 	nop.w
 8000d7c:	f3af 8000 	nop.w

08000d80 <chRegFirstThread>:
 8000d80:	2320      	movs	r3, #32
 8000d82:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <chRegFirstThread+0x18>)
 8000d88:	6918      	ldr	r0, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8000d8a:	7f83      	ldrb	r3, [r0, #30]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	7783      	strb	r3, [r0, #30]
 8000d90:	2300      	movs	r3, #0
 8000d92:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 8000d96:	4770      	bx	lr
 8000d98:	200008b8 	.word	0x200008b8
 8000d9c:	f3af 8000 	nop.w

08000da0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8000da0:	b510      	push	{r4, lr}
 8000da2:	2320      	movs	r3, #32
 8000da4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8000daa:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000dac:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8000dae:	bf1d      	ittte	ne
 8000db0:	7fa3      	ldrbne	r3, [r4, #30]
 8000db2:	3301      	addne	r3, #1
 8000db4:	77a3      	strbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8000db6:	2400      	moveq	r4, #0
 8000db8:	2300      	movs	r3, #0
 8000dba:	f383 8811 	msr	BASEPRI, r3
    ntp->p_refs++;
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8000dbe:	f7ff ff6f 	bl	8000ca0 <chThdRelease>
#endif

  return ntp;
}
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	bd10      	pop	{r4, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200008b8 	.word	0x200008b8
 8000dcc:	f3af 8000 	nop.w

08000dd0 <chSemObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000dd0:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000dd2:	6040      	str	r0, [r0, #4]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000dd4:	6081      	str	r1, [r0, #8]
 8000dd6:	4770      	bx	lr
 8000dd8:	f3af 8000 	nop.w
 8000ddc:	f3af 8000 	nop.w

08000de0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8000de0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8000de2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8000de4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8000de6:	3501      	adds	r5, #1
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	dc0c      	bgt.n	8000e06 <chSemResetI+0x26>
 8000dec:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000dee:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8000df2:	6860      	ldr	r0, [r4, #4]

  tqp->p_prev = tp->p_prev;
 8000df4:	6843      	ldr	r3, [r0, #4]
 8000df6:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8000df8:	601c      	str	r4, [r3, #0]
 8000dfa:	f7ff fc89 	bl	8000710 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000dfe:	3501      	adds	r5, #1
 8000e00:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000e02:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000e04:	d1f5      	bne.n	8000df2 <chSemResetI+0x12>
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w

08000e10 <chSemReset>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {
 8000e10:	b508      	push	{r3, lr}
 8000e12:	2320      	movs	r3, #32
 8000e14:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSemResetI(sp, n);
 8000e18:	f7ff ffe2 	bl	8000de0 <chSemResetI>
  chSchRescheduleS();
 8000e1c:	f7ff fd50 	bl	80008c0 <chSchRescheduleS>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	bd08      	pop	{r3, pc}
 8000e28:	f3af 8000 	nop.w
 8000e2c:	f3af 8000 	nop.w

08000e30 <chSemWait>:
 8000e30:	2320      	movs	r3, #32
 8000e32:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000e36:	6883      	ldr	r3, [r0, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	6083      	str	r3, [r0, #8]
 8000e3e:	db04      	blt.n	8000e4a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8000e40:	2000      	movs	r0, #0
 8000e42:	2300      	movs	r3, #0
 8000e44:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000e48:	4770      	bx	lr
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8000e4a:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 8000e4c:	4c08      	ldr	r4, [pc, #32]	; (8000e70 <chSemWait+0x40>)
 8000e4e:	69a2      	ldr	r2, [r4, #24]
 8000e50:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000e52:	6841      	ldr	r1, [r0, #4]
 8000e54:	6051      	str	r1, [r2, #4]
 8000e56:	4603      	mov	r3, r0
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8000e58:	6010      	str	r0, [r2, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 8000e5a:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000e5c:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	f7ff fc6e 	bl	8000740 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8000e64:	69a3      	ldr	r3, [r4, #24]
 8000e66:	6a18      	ldr	r0, [r3, #32]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000e6e:	bd10      	pop	{r4, pc}
 8000e70:	200008b8 	.word	0x200008b8
 8000e74:	f3af 8000 	nop.w
 8000e78:	f3af 8000 	nop.w
 8000e7c:	f3af 8000 	nop.w

08000e80 <chSemWaitTimeout>:
 8000e80:	2320      	movs	r3, #32
 8000e82:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000e86:	6882      	ldr	r2, [r0, #8]
 8000e88:	1e53      	subs	r3, r2, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	6083      	str	r3, [r0, #8]
 8000e8e:	db04      	blt.n	8000e9a <chSemWaitTimeout+0x1a>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8000e90:	2000      	movs	r0, #0
 8000e92:	2300      	movs	r3, #0
 8000e94:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8000e98:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8000e9a:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8000e9c:	b179      	cbz	r1, 8000ebe <chSemWaitTimeout+0x3e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <chSemWaitTimeout+0x48>)
 8000ea0:	6992      	ldr	r2, [r2, #24]
 8000ea2:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000ea4:	6844      	ldr	r4, [r0, #4]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e882 0018 	stmia.w	r2, {r3, r4}
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000eac:	2005      	movs	r0, #5
  tp->p_prev->p_next = tp;
 8000eae:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	f7ff fc5d 	bl	8000770 <chSchGoSleepTimeoutS>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8000ebc:	bd10      	pop	{r4, pc}
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8000ebe:	6082      	str	r2, [r0, #8]

      return MSG_TIMEOUT;
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	e7f7      	b.n	8000eb6 <chSemWaitTimeout+0x36>
 8000ec6:	bf00      	nop
 8000ec8:	200008b8 	.word	0x200008b8
 8000ecc:	f3af 8000 	nop.w

08000ed0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000ed0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000ed2:	6880      	ldr	r0, [r0, #8]
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	db01      	blt.n	8000ee0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8000edc:	2000      	movs	r0, #0
 8000ede:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000ee0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8000ee2:	b161      	cbz	r1, 8000efe <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <chSemWaitTimeoutS+0x3c>)
 8000ee6:	6992      	ldr	r2, [r2, #24]
 8000ee8:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000eea:	685c      	ldr	r4, [r3, #4]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000eec:	2005      	movs	r0, #5
 8000eee:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8000ef2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8000ef4:	605a      	str	r2, [r3, #4]
  }

  return MSG_OK;
}
 8000ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000efa:	f7ff bc39 	b.w	8000770 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8000efe:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f00:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200008b8 	.word	0x200008b8

08000f10 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000f10:	b508      	push	{r3, lr}
 8000f12:	2320      	movs	r3, #32
 8000f14:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8000f18:	6883      	ldr	r3, [r0, #8]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	6083      	str	r3, [r0, #8]
 8000f20:	dd03      	ble.n	8000f2a <chSemSignal+0x1a>
 8000f22:	2300      	movs	r3, #0
 8000f24:	f383 8811 	msr	BASEPRI, r3
 8000f28:	bd08      	pop	{r3, pc}
 8000f2a:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f2c:	6800      	ldr	r0, [r0, #0]

  tqp->p_next = tp->p_next;
 8000f2e:	6802      	ldr	r2, [r0, #0]
 8000f30:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8000f32:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f34:	6053      	str	r3, [r2, #4]
 8000f36:	f7ff fc43 	bl	80007c0 <chSchWakeupS>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	bd08      	pop	{r3, pc}
 8000f42:	bf00      	nop
 8000f44:	f3af 8000 	nop.w
 8000f48:	f3af 8000 	nop.w
 8000f4c:	f3af 8000 	nop.w

08000f50 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000f50:	6883      	ldr	r3, [r0, #8]
 8000f52:	3301      	adds	r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	6083      	str	r3, [r0, #8]
 8000f58:	dd00      	ble.n	8000f5c <chSemSignalI+0xc>
 8000f5a:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f5c:	6803      	ldr	r3, [r0, #0]

  tqp->p_next = tp->p_next;
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000f62:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f64:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8000f66:	4618      	mov	r0, r3

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000f68:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 8000f6a:	f7ff bbd1 	b.w	8000710 <chSchReadyI>
 8000f6e:	bf00      	nop

08000f70 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8000f70:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000f72:	1e0c      	subs	r4, r1, #0
 8000f74:	dd12      	ble.n	8000f9c <chSemAddCounterI+0x2c>
 8000f76:	4605      	mov	r5, r0
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e001      	b.n	8000f80 <chSemAddCounterI+0x10>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000f7c:	3c01      	subs	r4, #1
 8000f7e:	d00d      	beq.n	8000f9c <chSemAddCounterI+0x2c>
    if (++sp->s_cnt <= (cnt_t)0) {
 8000f80:	68ab      	ldr	r3, [r5, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	60ab      	str	r3, [r5, #8]
 8000f88:	dcf8      	bgt.n	8000f7c <chSemAddCounterI+0xc>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f8a:	6828      	ldr	r0, [r5, #0]

  tqp->p_next = tp->p_next;
 8000f8c:	6803      	ldr	r3, [r0, #0]
 8000f8e:	602b      	str	r3, [r5, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f90:	605d      	str	r5, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000f92:	f7ff fbbd 	bl	8000710 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000f96:	3c01      	subs	r4, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000f98:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000f9a:	d1f1      	bne.n	8000f80 <chSemAddCounterI+0x10>
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
 8000f9e:	bf00      	nop

08000fa0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8000faa:	6883      	ldr	r3, [r0, #8]
 8000fac:	3301      	adds	r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	6083      	str	r3, [r0, #8]
 8000fb2:	dd1d      	ble.n	8000ff0 <chSemSignalWait+0x50>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8000fb4:	688b      	ldr	r3, [r1, #8]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	608b      	str	r3, [r1, #8]
 8000fbc:	db07      	blt.n	8000fce <chSemSignalWait+0x2e>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8000fbe:	f7ff fc7f 	bl	80008c0 <chSchRescheduleS>
    msg = MSG_OK;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <chSemSignalWait+0x68>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000fd0:	684b      	ldr	r3, [r1, #4]
 8000fd2:	6994      	ldr	r4, [r2, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8000fd4:	2005      	movs	r0, #5
 8000fd6:	e884 000a 	stmia.w	r4, {r1, r3}
  tp->p_prev->p_next = tp;
 8000fda:	601c      	str	r4, [r3, #0]
  tqp->p_prev = tp;
 8000fdc:	604c      	str	r4, [r1, #4]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 8000fde:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000fe0:	f7ff fbae 	bl	8000740 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8000fe4:	6a20      	ldr	r0, [r4, #32]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8000fec:	b002      	add	sp, #8
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	4602      	mov	r2, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000ff2:	6800      	ldr	r0, [r0, #0]
 8000ff4:	9101      	str	r1, [sp, #4]

  tqp->p_next = tp->p_next;
 8000ff6:	6803      	ldr	r3, [r0, #0]
 8000ff8:	6013      	str	r3, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000ffa:	605a      	str	r2, [r3, #4]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8000ffc:	f7ff fb88 	bl	8000710 <chSchReadyI>
 8001000:	2300      	movs	r3, #0
 8001002:	6203      	str	r3, [r0, #32]
 8001004:	9901      	ldr	r1, [sp, #4]
 8001006:	e7d5      	b.n	8000fb4 <chSemSignalWait+0x14>
 8001008:	200008b8 	.word	0x200008b8
 800100c:	f3af 8000 	nop.w

08001010 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001010:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001012:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001014:	6040      	str	r0, [r0, #4]
 8001016:	6083      	str	r3, [r0, #8]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w

08001020 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001022:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001024:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001026:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001028:	2a00      	cmp	r2, #0
 800102a:	d055      	beq.n	80010d8 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800102c:	68a1      	ldr	r1, [r4, #8]
 800102e:	6893      	ldr	r3, [r2, #8]
 8001030:	428b      	cmp	r3, r1
 8001032:	4605      	mov	r5, r0
 8001034:	d206      	bcs.n	8001044 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001036:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001038:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800103a:	2b06      	cmp	r3, #6
 800103c:	d033      	beq.n	80010a6 <chMtxLockS+0x86>
 800103e:	2b07      	cmp	r3, #7
 8001040:	d01d      	beq.n	800107e <chMtxLockS+0x5e>
 8001042:	b19b      	cbz	r3, 800106c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001044:	462b      	mov	r3, r5
 8001046:	e003      	b.n	8001050 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001048:	6899      	ldr	r1, [r3, #8]
 800104a:	68a2      	ldr	r2, [r4, #8]
 800104c:	4291      	cmp	r1, r2
 800104e:	d302      	bcc.n	8001056 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001050:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001052:	429d      	cmp	r5, r3
 8001054:	d1f8      	bne.n	8001048 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800105a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800105c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800105e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001060:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8001062:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8001064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001068:	f7ff bb6a 	b.w	8000740 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800106c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8001070:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001072:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8001074:	4610      	mov	r0, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	f7ff fb4a 	bl	8000710 <chSchReadyI>
          break;
 800107c:	e7e2      	b.n	8001044 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800107e:	e892 0009 	ldmia.w	r2, {r0, r3}
 8001082:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001088:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800108a:	4633      	mov	r3, r6
 800108c:	e002      	b.n	8001094 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	4288      	cmp	r0, r1
 8001092:	d302      	bcc.n	800109a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001094:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001096:	429e      	cmp	r6, r3
 8001098:	d1f9      	bne.n	800108e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800109e:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010a0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	e7ce      	b.n	8001044 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010a6:	e892 0009 	ldmia.w	r2, {r0, r3}
 80010aa:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010ac:	6810      	ldr	r0, [r2, #0]
 80010ae:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010b0:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010b2:	4633      	mov	r3, r6
 80010b4:	e002      	b.n	80010bc <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	4288      	cmp	r0, r1
 80010ba:	d302      	bcc.n	80010c2 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80010bc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010be:	429e      	cmp	r6, r3
 80010c0:	d1f9      	bne.n	80010b6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010c6:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010c8:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80010ca:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80010cc:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80010ce:	68a1      	ldr	r1, [r4, #8]
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	428b      	cmp	r3, r1
 80010d4:	d3af      	bcc.n	8001036 <chMtxLockS+0x16>
 80010d6:	e7b5      	b.n	8001044 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80010d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010da:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80010dc:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 80010de:	63a0      	str	r0, [r4, #56]	; 0x38
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	bf00      	nop
 80010e4:	200008b8 	.word	0x200008b8
 80010e8:	f3af 8000 	nop.w
 80010ec:	f3af 8000 	nop.w

080010f0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80010f0:	b508      	push	{r3, lr}
 80010f2:	2320      	movs	r3, #32
 80010f4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 80010f8:	f7ff ff92 	bl	8001020 <chMtxLockS>
 80010fc:	2300      	movs	r3, #0
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	bd08      	pop	{r3, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	f3af 8000 	nop.w
 800110c:	f3af 8000 	nop.w

08001110 <chMtxTryLock>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @api
 */
bool chMtxTryLock(mutex_t *mp) {
 8001110:	4603      	mov	r3, r0
 8001112:	2220      	movs	r2, #32
 8001114:	f382 8811 	msr	BASEPRI, r2
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8001118:	6882      	ldr	r2, [r0, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 800111a:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 800111c:	b11a      	cbz	r2, 8001126 <chMtxTryLock+0x16>
 800111e:	2300      	movs	r3, #0
 8001120:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8001124:	4770      	bx	lr

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <chMtxTryLock+0x2c>)
 8001128:	6992      	ldr	r2, [r2, #24]
 800112a:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 800112c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800112e:	60d9      	str	r1, [r3, #12]
  currp->p_mtxlist = mp;
 8001130:	2001      	movs	r0, #1
 8001132:	6393      	str	r3, [r2, #56]	; 0x38
 8001134:	2300      	movs	r3, #0
 8001136:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 800113a:	4770      	bx	lr
 800113c:	200008b8 	.word	0x200008b8

08001140 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001142:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001144:	699d      	ldr	r5, [r3, #24]
 8001146:	2320      	movs	r3, #32
 8001148:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800114c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800114e:	68c3      	ldr	r3, [r0, #12]
 8001150:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001152:	4284      	cmp	r4, r0
 8001154:	d01c      	beq.n	8001190 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001156:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001158:	b14b      	cbz	r3, 800116e <chMtxUnlock+0x2e>
 800115a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800115c:	4293      	cmp	r3, r2
 800115e:	d003      	beq.n	8001168 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001160:	6892      	ldr	r2, [r2, #8]
 8001162:	4291      	cmp	r1, r2
 8001164:	bf38      	it	cc
 8001166:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001168:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f5      	bne.n	800115a <chMtxUnlock+0x1a>
 800116e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001170:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001172:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001174:	60a9      	str	r1, [r5, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001176:	4620      	mov	r0, r4
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800117c:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800117e:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8001180:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001182:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001184:	f7ff fb1c 	bl	80007c0 <chSchWakeupS>
 8001188:	2300      	movs	r3, #0
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60a3      	str	r3, [r4, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	f383 8811 	msr	BASEPRI, r3
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	200008b8 	.word	0x200008b8

080011a0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80011a2:	b430      	push	{r4, r5}
 80011a4:	4604      	mov	r4, r0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80011a6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 80011a8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80011aa:	68e3      	ldr	r3, [r4, #12]
 80011ac:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80011ae:	42a5      	cmp	r5, r4
 80011b0:	d017      	beq.n	80011e2 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80011b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011b4:	b14b      	cbz	r3, 80011ca <chMtxUnlockS+0x2a>
 80011b6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d003      	beq.n	80011c4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80011bc:	6892      	ldr	r2, [r2, #8]
 80011be:	4291      	cmp	r1, r2
 80011c0:	bf38      	it	cc
 80011c2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80011c4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f5      	bne.n	80011b6 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80011ca:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80011cc:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80011ce:	6081      	str	r1, [r0, #8]
 80011d0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80011d2:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 80011d4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80011d6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 80011d8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 80011da:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80011dc:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 80011de:	f7ff ba97 	b.w	8000710 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60ab      	str	r3, [r5, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80011e6:	bc30      	pop	{r4, r5}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200008b8 	.word	0x200008b8

080011f0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80011f2:	b570      	push	{r4, r5, r6, lr}
 80011f4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80011f6:	6994      	ldr	r4, [r2, #24]
 80011f8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 80011fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011fe:	b1d3      	cbz	r3, 8001236 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001200:	2600      	movs	r6, #0
 8001202:	e00a      	b.n	800121a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001204:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001206:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8001208:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800120a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800120c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800120e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001210:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001212:	f7ff fa7d 	bl	8000710 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001218:	b14b      	cbz	r3, 800122e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800121a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001220:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8001222:	4610      	mov	r0, r2
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 8001224:	d1ee      	bne.n	8001204 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001226:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f5      	bne.n	800121a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 800122e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001230:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8001232:	f7ff fb45 	bl	80008c0 <chSchRescheduleS>
 8001236:	2300      	movs	r3, #0
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	bf00      	nop
 8001240:	200008b8 	.word	0x200008b8
 8001244:	f3af 8000 	nop.w
 8001248:	f3af 8000 	nop.w
 800124c:	f3af 8000 	nop.w

08001250 <chCondObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001250:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001252:	6040      	str	r0, [r0, #4]
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	f3af 8000 	nop.w
 800125c:	f3af 8000 	nop.w

08001260 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8001260:	b508      	push	{r3, lr}
 8001262:	2320      	movs	r3, #32
 8001264:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001268:	6802      	ldr	r2, [r0, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 800126a:	4290      	cmp	r0, r2
 800126c:	d007      	beq.n	800127e <chCondSignal+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800126e:	6811      	ldr	r1, [r2, #0]
 8001270:	6001      	str	r1, [r0, #0]
 8001272:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001274:	604b      	str	r3, [r1, #4]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8001276:	4610      	mov	r0, r2
 8001278:	2100      	movs	r1, #0
 800127a:	f7ff faa1 	bl	80007c0 <chSchWakeupS>
 800127e:	2300      	movs	r3, #0
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	bd08      	pop	{r3, pc}
 8001286:	bf00      	nop
 8001288:	f3af 8000 	nop.w
 800128c:	f3af 8000 	nop.w

08001290 <chCondSignalI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001290:	6803      	ldr	r3, [r0, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8001292:	4298      	cmp	r0, r3
 8001294:	d007      	beq.n	80012a6 <chCondSignalI+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	6002      	str	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 800129a:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800129c:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 800129e:	4618      	mov	r0, r3
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80012a0:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 80012a2:	f7ff ba35 	b.w	8000710 <chSchReadyI>
 80012a6:	4770      	bx	lr
 80012a8:	f3af 8000 	nop.w
 80012ac:	f3af 8000 	nop.w

080012b0 <chCondBroadcast>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondBroadcast(condition_variable_t *cp) {
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	2320      	movs	r3, #32
 80012b6:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012ba:	6800      	ldr	r0, [r0, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80012bc:	4284      	cmp	r4, r0
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80012be:	bf18      	it	ne
 80012c0:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80012c4:	d008      	beq.n	80012d8 <chCondBroadcast+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012c6:	6803      	ldr	r3, [r0, #0]
 80012c8:	6023      	str	r3, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012ca:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80012cc:	f7ff fa20 	bl	8000710 <chSchReadyI>
 80012d0:	6205      	str	r5, [r0, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012d2:	6820      	ldr	r0, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80012d4:	42a0      	cmp	r0, r4
 80012d6:	d1f6      	bne.n	80012c6 <chCondBroadcast+0x16>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 80012d8:	f7ff faf2 	bl	80008c0 <chSchRescheduleS>
 80012dc:	2300      	movs	r3, #0
 80012de:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	f3af 8000 	nop.w
 80012e8:	f3af 8000 	nop.w
 80012ec:	f3af 8000 	nop.w

080012f0 <chCondWaitS>:
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <chCondWaitS+0x40>)
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 80012f2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80012f4:	699c      	ldr	r4, [r3, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 80012f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 80012f8:	4605      	mov	r5, r0
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80012fa:	4630      	mov	r0, r6
 80012fc:	f7ff ff50 	bl	80011a0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 8001300:	6225      	str	r5, [r4, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001302:	462b      	mov	r3, r5
 8001304:	e003      	b.n	800130e <chCondWaitS+0x1e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	68a2      	ldr	r2, [r4, #8]
 800130a:	4291      	cmp	r1, r2
 800130c:	d302      	bcc.n	8001314 <chCondWaitS+0x24>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800130e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001310:	429d      	cmp	r5, r3
 8001312:	d1f8      	bne.n	8001306 <chCondWaitS+0x16>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001318:	6023      	str	r3, [r4, #0]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 800131a:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800131c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800131e:	605c      	str	r4, [r3, #4]
 8001320:	f7ff fa0e 	bl	8000740 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8001324:	6a24      	ldr	r4, [r4, #32]
  chMtxLockS(mp);
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff fe7a 	bl	8001020 <chMtxLockS>

  return msg;
}
 800132c:	4620      	mov	r0, r4
 800132e:	bd70      	pop	{r4, r5, r6, pc}
 8001330:	200008b8 	.word	0x200008b8
 8001334:	f3af 8000 	nop.w
 8001338:	f3af 8000 	nop.w
 800133c:	f3af 8000 	nop.w

08001340 <chCondWait>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @api
 */
msg_t chCondWait(condition_variable_t *cp) {
 8001340:	b508      	push	{r3, lr}
 8001342:	2320      	movs	r3, #32
 8001344:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitS(cp);
 8001348:	f7ff ffd2 	bl	80012f0 <chCondWaitS>
 800134c:	2300      	movs	r3, #0
 800134e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8001352:	bd08      	pop	{r3, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	f3af 8000 	nop.w
 800135c:	f3af 8000 	nop.w

08001360 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001362:	4c12      	ldr	r4, [pc, #72]	; (80013ac <chCondWaitTimeoutS+0x4c>)
 8001364:	69a3      	ldr	r3, [r4, #24]
 8001366:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8001368:	4605      	mov	r5, r0
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800136a:	4630      	mov	r0, r6
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 800136c:	460f      	mov	r7, r1
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800136e:	f7ff ff17 	bl	80011a0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8001372:	69a4      	ldr	r4, [r4, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001374:	462b      	mov	r3, r5
 8001376:	6225      	str	r5, [r4, #32]
 8001378:	e003      	b.n	8001382 <chCondWaitTimeoutS+0x22>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800137a:	6898      	ldr	r0, [r3, #8]
 800137c:	68a2      	ldr	r2, [r4, #8]
 800137e:	4290      	cmp	r0, r2
 8001380:	d302      	bcc.n	8001388 <chCondWaitTimeoutS+0x28>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001382:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001384:	429d      	cmp	r5, r3
 8001386:	d1f8      	bne.n	800137a <chCondWaitTimeoutS+0x1a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800138c:	6023      	str	r3, [r4, #0]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 800138e:	4639      	mov	r1, r7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001390:	6014      	str	r4, [r2, #0]
 8001392:	2007      	movs	r0, #7
  cp->p_prev = tp;
 8001394:	605c      	str	r4, [r3, #4]
 8001396:	f7ff f9eb 	bl	8000770 <chSchGoSleepTimeoutS>
  if (msg != MSG_TIMEOUT) {
 800139a:	1c43      	adds	r3, r0, #1

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 800139c:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 800139e:	d002      	beq.n	80013a6 <chCondWaitTimeoutS+0x46>
    chMtxLockS(mp);
 80013a0:	4630      	mov	r0, r6
 80013a2:	f7ff fe3d 	bl	8001020 <chMtxLockS>
  }

  return msg;
}
 80013a6:	4620      	mov	r0, r4
 80013a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200008b8 	.word	0x200008b8

080013b0 <chCondWaitTimeout>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chCondWaitTimeout(condition_variable_t *cp, systime_t time) {
 80013b0:	b508      	push	{r3, lr}
 80013b2:	2320      	movs	r3, #32
 80013b4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitTimeoutS(cp, time);
 80013b8:	f7ff ffd2 	bl	8001360 <chCondWaitTimeoutS>
 80013bc:	2300      	movs	r3, #0
 80013be:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80013c2:	bd08      	pop	{r3, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	f3af 8000 	nop.w
 80013cc:	f3af 8000 	nop.w

080013d0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 80013d0:	b430      	push	{r4, r5}
 80013d2:	2420      	movs	r4, #32
 80013d4:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80013d8:	4d06      	ldr	r5, [pc, #24]	; (80013f4 <chEvtRegisterMaskWithFlags+0x24>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80013da:	6804      	ldr	r4, [r0, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 80013dc:	69ad      	ldr	r5, [r5, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80013de:	600c      	str	r4, [r1, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80013e0:	2400      	movs	r4, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80013e2:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 80013e4:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 80013e6:	608a      	str	r2, [r1, #8]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 80013e8:	610b      	str	r3, [r1, #16]
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80013ea:	60cc      	str	r4, [r1, #12]
 80013ec:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 80013f0:	bc30      	pop	{r4, r5}
 80013f2:	4770      	bx	lr
 80013f4:	200008b8 	.word	0x200008b8
 80013f8:	f3af 8000 	nop.w
 80013fc:	f3af 8000 	nop.w

08001400 <chEvtUnregister>:
 8001400:	2320      	movs	r3, #32
 8001402:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8001406:	4602      	mov	r2, r0
 8001408:	e002      	b.n	8001410 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800140a:	428b      	cmp	r3, r1
 800140c:	d007      	beq.n	800141e <chEvtUnregister+0x1e>
 800140e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	4298      	cmp	r0, r3
 8001414:	d1f9      	bne.n	800140a <chEvtUnregister+0xa>
 8001416:	2300      	movs	r3, #0
 8001418:	f383 8811 	msr	BASEPRI, r3
 800141c:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 800141e:	680b      	ldr	r3, [r1, #0]
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w

08001430 <chEvtGetAndClearEvents>:
 8001430:	2320      	movs	r3, #32
 8001432:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <chEvtGetAndClearEvents+0x1c>)
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800143c:	ea23 0100 	bic.w	r1, r3, r0
 8001440:	6351      	str	r1, [r2, #52]	; 0x34
 8001442:	2200      	movs	r2, #0
 8001444:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8001448:	4018      	ands	r0, r3
 800144a:	4770      	bx	lr
 800144c:	200008b8 	.word	0x200008b8

08001450 <chEvtAddEvents>:
 8001450:	2320      	movs	r3, #32
 8001452:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <chEvtAddEvents+0x18>)
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800145c:	4318      	orrs	r0, r3
 800145e:	6350      	str	r0, [r2, #52]	; 0x34
 8001460:	2300      	movs	r3, #0
 8001462:	f383 8811 	msr	BASEPRI, r3
  events = currp->p_epending;
  chSysUnlock();

  return events;
}
 8001466:	4770      	bx	lr
 8001468:	200008b8 	.word	0x200008b8
 800146c:	f3af 8000 	nop.w

08001470 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001470:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001472:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001474:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001476:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001478:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800147a:	d009      	beq.n	8001490 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800147c:	2a0b      	cmp	r2, #11
 800147e:	d000      	beq.n	8001482 <chEvtSignalI+0x12>
 8001480:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001482:	6a03      	ldr	r3, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001484:	438b      	bics	r3, r1
 8001486:	d1fb      	bne.n	8001480 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 800148c:	f7ff b940 	b.w	8000710 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001490:	6a03      	ldr	r3, [r0, #32]
 8001492:	4219      	tst	r1, r3
 8001494:	d1f8      	bne.n	8001488 <chEvtSignalI+0x18>
 8001496:	4770      	bx	lr
 8001498:	f3af 8000 	nop.w
 800149c:	f3af 8000 	nop.w

080014a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80014a0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80014a2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014a4:	42a0      	cmp	r0, r4
 80014a6:	d00f      	beq.n	80014c8 <chEvtBroadcastFlagsI+0x28>
 80014a8:	4606      	mov	r6, r0
 80014aa:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 80014ac:	68e3      	ldr	r3, [r4, #12]
 80014ae:	432b      	orrs	r3, r5
 80014b0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80014b2:	b115      	cbz	r5, 80014ba <chEvtBroadcastFlagsI+0x1a>
 80014b4:	6922      	ldr	r2, [r4, #16]
 80014b6:	4213      	tst	r3, r2
 80014b8:	d003      	beq.n	80014c2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 80014ba:	68a1      	ldr	r1, [r4, #8]
 80014bc:	6860      	ldr	r0, [r4, #4]
 80014be:	f7ff ffd7 	bl	8001470 <chEvtSignalI>
    }
    elp = elp->el_next;
 80014c2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014c4:	42a6      	cmp	r6, r4
 80014c6:	d1f1      	bne.n	80014ac <chEvtBroadcastFlagsI+0xc>
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	bf00      	nop
 80014cc:	f3af 8000 	nop.w

080014d0 <chEvtSignal>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @api
 */
void chEvtSignal(thread_t *tp, eventmask_t events) {
 80014d0:	b508      	push	{r3, lr}
 80014d2:	2320      	movs	r3, #32
 80014d4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 80014d8:	f7ff ffca 	bl	8001470 <chEvtSignalI>
  chSchRescheduleS();
 80014dc:	f7ff f9f0 	bl	80008c0 <chSchRescheduleS>
 80014e0:	2300      	movs	r3, #0
 80014e2:	f383 8811 	msr	BASEPRI, r3
 80014e6:	bd08      	pop	{r3, pc}
 80014e8:	f3af 8000 	nop.w
 80014ec:	f3af 8000 	nop.w

080014f0 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 80014f0:	b508      	push	{r3, lr}
 80014f2:	2320      	movs	r3, #32
 80014f4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80014f8:	f7ff ffd2 	bl	80014a0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80014fc:	f7ff f9e0 	bl	80008c0 <chSchRescheduleS>
 8001500:	2300      	movs	r3, #0
 8001502:	f383 8811 	msr	BASEPRI, r3
 8001506:	bd08      	pop	{r3, pc}
 8001508:	f3af 8000 	nop.w
 800150c:	f3af 8000 	nop.w

08001510 <chEvtDispatch>:
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001510:	b1c9      	cbz	r1, 8001546 <chEvtDispatch+0x36>
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8001512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001514:	4606      	mov	r6, r0
 8001516:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001518:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800151a:	2701      	movs	r7, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800151c:	fa25 f304 	lsr.w	r3, r5, r4
 8001520:	07db      	lsls	r3, r3, #31
 8001522:	d404      	bmi.n	800152e <chEvtDispatch+0x1e>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001524:	3401      	adds	r4, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001526:	fa25 f304 	lsr.w	r3, r5, r4
 800152a:	07db      	lsls	r3, r3, #31
 800152c:	d5fa      	bpl.n	8001524 <chEvtDispatch+0x14>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800152e:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8001532:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001534:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001538:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800153c:	4798      	blx	r3
    }
    eid++;
 800153e:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001540:	2d00      	cmp	r5, #0
 8001542:	d1eb      	bne.n	800151c <chEvtDispatch+0xc>
 8001544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001546:	4770      	bx	lr
 8001548:	f3af 8000 	nop.w
 800154c:	f3af 8000 	nop.w

08001550 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8001550:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <chEvtWaitOne+0x38>)
 8001554:	699d      	ldr	r5, [r3, #24]
 8001556:	2320      	movs	r3, #32
 8001558:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800155c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800155e:	ea13 0400 	ands.w	r4, r3, r0
 8001562:	d106      	bne.n	8001572 <chEvtWaitOne+0x22>
 8001564:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 8001566:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001568:	200a      	movs	r0, #10
 800156a:	f7ff f8e9 	bl	8000740 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800156e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001570:	401c      	ands	r4, r3
  }
  m ^= m & (m - (eventmask_t)1);
 8001572:	4262      	negs	r2, r4
 8001574:	ea04 0002 	and.w	r0, r4, r2
  ctp->p_epending &= ~m;
 8001578:	ea23 0300 	bic.w	r3, r3, r0
 800157c:	636b      	str	r3, [r5, #52]	; 0x34
 800157e:	2300      	movs	r3, #0
 8001580:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001584:	bd38      	pop	{r3, r4, r5, pc}
 8001586:	bf00      	nop
 8001588:	200008b8 	.word	0x200008b8
 800158c:	f3af 8000 	nop.w

08001590 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001590:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <chEvtWaitAny+0x34>)
 8001594:	699d      	ldr	r5, [r3, #24]
 8001596:	2320      	movs	r3, #32
 8001598:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800159c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800159e:	ea13 0400 	ands.w	r4, r3, r0
 80015a2:	d106      	bne.n	80015b2 <chEvtWaitAny+0x22>
 80015a4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 80015a6:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80015a8:	200a      	movs	r0, #10
 80015aa:	f7ff f8c9 	bl	8000740 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80015ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015b0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 80015b2:	ea23 0304 	bic.w	r3, r3, r4
 80015b6:	636b      	str	r3, [r5, #52]	; 0x34
 80015b8:	2300      	movs	r3, #0
 80015ba:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80015be:	4620      	mov	r0, r4
 80015c0:	bd38      	pop	{r3, r4, r5, pc}
 80015c2:	bf00      	nop
 80015c4:	200008b8 	.word	0x200008b8
 80015c8:	f3af 8000 	nop.w
 80015cc:	f3af 8000 	nop.w

080015d0 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 80015d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <chEvtWaitAll+0x30>)
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 80015d4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80015d6:	699d      	ldr	r5, [r3, #24]
 80015d8:	2320      	movs	r3, #32
 80015da:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80015de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015e0:	ea30 0203 	bics.w	r2, r0, r3
 80015e4:	d004      	beq.n	80015f0 <chEvtWaitAll+0x20>
    ctp->p_u.ewmask = events;
 80015e6:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80015e8:	200b      	movs	r0, #11
 80015ea:	f7ff f8a9 	bl	8000740 <chSchGoSleepS>
 80015ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 80015f0:	ea23 0304 	bic.w	r3, r3, r4
 80015f4:	636b      	str	r3, [r5, #52]	; 0x34
 80015f6:	2300      	movs	r3, #0
 80015f8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 80015fc:	4620      	mov	r0, r4
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	200008b8 	.word	0x200008b8
 8001604:	f3af 8000 	nop.w
 8001608:	f3af 8000 	nop.w
 800160c:	f3af 8000 	nop.w

08001610 <chEvtWaitOneTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <chEvtWaitOneTimeout+0x4c>)
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
 8001612:	b570      	push	{r4, r5, r6, lr}
 8001614:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8001616:	699d      	ldr	r5, [r3, #24]
 8001618:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800161c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800161e:	ea12 0600 	ands.w	r6, r2, r0
 8001622:	d10e      	bne.n	8001642 <chEvtWaitOneTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 8001624:	b919      	cbnz	r1, 800162e <chEvtWaitOneTimeout+0x1e>
 8001626:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800162a:	4608      	mov	r0, r1
 800162c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800162e:	6228      	str	r0, [r5, #32]
 8001630:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001632:	200a      	movs	r0, #10
 8001634:	f7ff f89c 	bl	8000770 <chSchGoSleepTimeoutS>
 8001638:	2800      	cmp	r0, #0
 800163a:	db0b      	blt.n	8001654 <chEvtWaitOneTimeout+0x44>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800163c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800163e:	ea04 0602 	and.w	r6, r4, r2
  }
  m ^= m & (m - (eventmask_t)1);
 8001642:	4270      	negs	r0, r6
 8001644:	4030      	ands	r0, r6
  ctp->p_epending &= ~m;
 8001646:	ea22 0200 	bic.w	r2, r2, r0
 800164a:	636a      	str	r2, [r5, #52]	; 0x34
 800164c:	2300      	movs	r3, #0
 800164e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	f386 8811 	msr	BASEPRI, r6
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 8001658:	4630      	mov	r0, r6
 800165a:	bd70      	pop	{r4, r5, r6, pc}
 800165c:	200008b8 	.word	0x200008b8

08001660 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <chEvtWaitAnyTimeout+0x4c>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 8001662:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001664:	699e      	ldr	r6, [r3, #24]
 8001666:	2320      	movs	r3, #32
 8001668:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800166c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800166e:	ea13 0400 	ands.w	r4, r3, r0
 8001672:	d10e      	bne.n	8001692 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 8001674:	b919      	cbnz	r1, 800167e <chEvtWaitAnyTimeout+0x1e>
 8001676:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800167a:	4608      	mov	r0, r1
 800167c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800167e:	6230      	str	r0, [r6, #32]
 8001680:	4605      	mov	r5, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001682:	200a      	movs	r0, #10
 8001684:	f7ff f874 	bl	8000770 <chSchGoSleepTimeoutS>
 8001688:	2800      	cmp	r0, #0
 800168a:	db0a      	blt.n	80016a2 <chEvtWaitAnyTimeout+0x42>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800168c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800168e:	ea05 0403 	and.w	r4, r5, r3
  }
  ctp->p_epending &= ~m;
 8001692:	ea23 0304 	bic.w	r3, r3, r4
 8001696:	6373      	str	r3, [r6, #52]	; 0x34
 8001698:	2300      	movs	r3, #0
 800169a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
 800169e:	4620      	mov	r0, r4
}
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80016a6:	4620      	mov	r0, r4
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
 80016aa:	bf00      	nop
 80016ac:	200008b8 	.word	0x200008b8

080016b0 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80016b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <chEvtWaitAllTimeout+0x44>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80016b4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80016b6:	699d      	ldr	r5, [r3, #24]
 80016b8:	2320      	movs	r3, #32
 80016ba:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80016be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016c0:	ea30 0203 	bics.w	r2, r0, r3
 80016c4:	d00b      	beq.n	80016de <chEvtWaitAllTimeout+0x2e>
 80016c6:	4608      	mov	r0, r1
    if (TIME_IMMEDIATE == time) {
 80016c8:	b911      	cbnz	r1, 80016d0 <chEvtWaitAllTimeout+0x20>
 80016ca:	f380 8811 	msr	BASEPRI, r0
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80016d0:	622c      	str	r4, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 80016d2:	200b      	movs	r0, #11
 80016d4:	f7ff f84c 	bl	8000770 <chSchGoSleepTimeoutS>
 80016d8:	2800      	cmp	r0, #0
 80016da:	db08      	blt.n	80016ee <chEvtWaitAllTimeout+0x3e>
 80016dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 80016de:	ea23 0304 	bic.w	r3, r3, r4
 80016e2:	636b      	str	r3, [r5, #52]	; 0x34
 80016e4:	2300      	movs	r3, #0
 80016e6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 80016ea:	4620      	mov	r0, r4
}
 80016ec:	bd38      	pop	{r3, r4, r5, pc}
 80016ee:	2000      	movs	r0, #0
 80016f0:	e7eb      	b.n	80016ca <chEvtWaitAllTimeout+0x1a>
 80016f2:	bf00      	nop
 80016f4:	200008b8 	.word	0x200008b8
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001700:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <chMsgSend+0x3c>)
 8001704:	2220      	movs	r2, #32
 8001706:	699c      	ldr	r4, [r3, #24]
 8001708:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800170c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8001710:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001714:	6062      	str	r2, [r4, #4]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8001716:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001718:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 800171a:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 800171c:	7f02      	ldrb	r2, [r0, #28]
  tqp->p_prev = tp;
 800171e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001720:	2a0e      	cmp	r2, #14
 8001722:	d007      	beq.n	8001734 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8001724:	200c      	movs	r0, #12
 8001726:	f7ff f80b 	bl	8000740 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800172a:	6a20      	ldr	r0, [r4, #32]
 800172c:	2300      	movs	r3, #0
 800172e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8001732:	bd38      	pop	{r3, r4, r5, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8001734:	f7fe ffec 	bl	8000710 <chSchReadyI>
 8001738:	e7f4      	b.n	8001724 <chMsgSend+0x24>
 800173a:	bf00      	nop
 800173c:	200008b8 	.word	0x200008b8

08001740 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001740:	b510      	push	{r4, lr}
 8001742:	2320      	movs	r3, #32
 8001744:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <chMsgWait+0x38>)
 800174a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800174c:	4613      	mov	r3, r2
 800174e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001752:	4298      	cmp	r0, r3
 8001754:	d008      	beq.n	8001768 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001756:	6801      	ldr	r1, [r0, #0]
 8001758:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 800175a:	220d      	movs	r2, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	2300      	movs	r3, #0
 8001760:	7702      	strb	r2, [r0, #28]
 8001762:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8001766:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8001768:	200e      	movs	r0, #14
 800176a:	f7fe ffe9 	bl	8000740 <chSchGoSleepS>
 800176e:	69a2      	ldr	r2, [r4, #24]
 8001770:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001772:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8001776:	e7ee      	b.n	8001756 <chMsgWait+0x16>
 8001778:	200008b8 	.word	0x200008b8
 800177c:	f3af 8000 	nop.w

08001780 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8001780:	b508      	push	{r3, lr}
 8001782:	2320      	movs	r3, #32
 8001784:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001788:	f7ff f81a 	bl	80007c0 <chSchWakeupS>
 800178c:	2300      	movs	r3, #0
 800178e:	f383 8811 	msr	BASEPRI, r3
 8001792:	bd08      	pop	{r3, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	f3af 8000 	nop.w
 800179c:	f3af 8000 	nop.w

080017a0 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80017a0:	b510      	push	{r4, lr}
 80017a2:	460b      	mov	r3, r1
  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 80017a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80017a8:	6041      	str	r1, [r0, #4]
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80017aa:	4604      	mov	r4, r0

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80017ac:	6003      	str	r3, [r0, #0]
  mbp->mb_rdptr = buf;
 80017ae:	60c3      	str	r3, [r0, #12]
  mbp->mb_wrptr = buf;
 80017b0:	6083      	str	r3, [r0, #8]
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
 80017b2:	4611      	mov	r1, r2
 80017b4:	301c      	adds	r0, #28
 80017b6:	f7ff fb0b 	bl	8000dd0 <chSemObjectInit>
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80017ba:	f104 0010 	add.w	r0, r4, #16
 80017be:	2100      	movs	r1, #0
}
 80017c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80017c4:	f7ff bb04 	b.w	8000dd0 <chSemObjectInit>
 80017c8:	f3af 8000 	nop.w
 80017cc:	f3af 8000 	nop.w

080017d0 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80017d4:	301c      	adds	r0, #28
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 80017d6:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80017d8:	6861      	ldr	r1, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 80017da:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80017dc:	1ac9      	subs	r1, r1, r3

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
 80017de:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80017e0:	1089      	asrs	r1, r1, #2
 80017e2:	f7ff fafd 	bl	8000de0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 80017e6:	f104 0010 	add.w	r0, r4, #16
 80017ea:	2100      	movs	r1, #0
}
 80017ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 80017f0:	f7ff baf6 	b.w	8000de0 <chSemResetI>
 80017f4:	f3af 8000 	nop.w
 80017f8:	f3af 8000 	nop.w
 80017fc:	f3af 8000 	nop.w

08001800 <chMBReset>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8001800:	b508      	push	{r3, lr}
 8001802:	2320      	movs	r3, #32
 8001804:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMBResetI(mbp);
 8001808:	f7ff ffe2 	bl	80017d0 <chMBResetI>
  chSchRescheduleS();
 800180c:	f7ff f858 	bl	80008c0 <chSchRescheduleS>
 8001810:	2300      	movs	r3, #0
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	bd08      	pop	{r3, pc}
 8001818:	f3af 8000 	nop.w
 800181c:	f3af 8000 	nop.w

08001820 <chMBPost>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	2320      	movs	r3, #32
 8001824:	4604      	mov	r4, r0
 8001826:	460e      	mov	r6, r1
 8001828:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800182c:	4611      	mov	r1, r2
 800182e:	301c      	adds	r0, #28
 8001830:	f7ff fb4e 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001834:	4605      	mov	r5, r0
 8001836:	b978      	cbnz	r0, 8001858 <chMBPost+0x38>
    *mbp->mb_wrptr++ = msg;
 8001838:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800183a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800183c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800183e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001840:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8001842:	bf28      	it	cs
 8001844:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001846:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8001848:	f104 0010 	add.w	r0, r4, #16

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 800184c:	bf28      	it	cs
 800184e:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8001850:	f7ff fb7e 	bl	8000f50 <chSemSignalI>
    chSchRescheduleS();
 8001854:	f7ff f834 	bl	80008c0 <chSchRescheduleS>
 8001858:	2300      	movs	r3, #0
 800185a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 800185e:	4628      	mov	r0, r5
 8001860:	bd70      	pop	{r4, r5, r6, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	f3af 8000 	nop.w
 800186c:	f3af 8000 	nop.w

08001870 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	6a43      	ldr	r3, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001874:	2b00      	cmp	r3, #0
 8001876:	dd12      	ble.n	800189e <chMBPostI+0x2e>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8001878:	6884      	ldr	r4, [r0, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 800187a:	6845      	ldr	r5, [r0, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800187c:	1d22      	adds	r2, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800187e:	3b01      	subs	r3, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8001880:	42aa      	cmp	r2, r5
 8001882:	6243      	str	r3, [r0, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8001884:	bf28      	it	cs
 8001886:	6803      	ldrcs	r3, [r0, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8001888:	6082      	str	r2, [r0, #8]
 800188a:	6021      	str	r1, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 800188c:	f100 0010 	add.w	r0, r0, #16
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8001890:	bf28      	it	cs
 8001892:	f840 3c08 	strcs.w	r3, [r0, #-8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8001896:	f7ff fb5b 	bl	8000f50 <chSemSignalI>

  return MSG_OK;
 800189a:	2000      	movs	r0, #0
 800189c:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800189e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 80018a2:	bd38      	pop	{r3, r4, r5, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	f3af 8000 	nop.w
 80018ac:	f3af 8000 	nop.w

080018b0 <chMBPostAhead>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	2320      	movs	r3, #32
 80018b4:	4604      	mov	r4, r0
 80018b6:	460e      	mov	r6, r1
 80018b8:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80018bc:	4611      	mov	r1, r2
 80018be:	301c      	adds	r0, #28
 80018c0:	f7ff fb06 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80018c4:	4605      	mov	r5, r0
 80018c6:	b120      	cbz	r0, 80018d2 <chMBPostAhead+0x22>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80018ce:	4628      	mov	r0, r5
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 80018d2:	68e3      	ldr	r3, [r4, #12]
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	3b04      	subs	r3, #4
 80018d8:	4293      	cmp	r3, r2
 80018da:	60e3      	str	r3, [r4, #12]
 80018dc:	d202      	bcs.n	80018e4 <chMBPostAhead+0x34>
      mbp->mb_rdptr = mbp->mb_top - 1;
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	3b04      	subs	r3, #4
 80018e2:	60e3      	str	r3, [r4, #12]
    }
    *mbp->mb_rdptr = msg;
 80018e4:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80018e6:	f104 0010 	add.w	r0, r4, #16
 80018ea:	f7ff fb31 	bl	8000f50 <chSemSignalI>
    chSchRescheduleS();
 80018ee:	f7fe ffe7 	bl	80008c0 <chSchRescheduleS>
 80018f2:	2300      	movs	r3, #0
 80018f4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80018f8:	4628      	mov	r0, r5
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	f3af 8000 	nop.w

08001900 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001900:	6a42      	ldr	r2, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001902:	2a00      	cmp	r2, #0
 8001904:	dd11      	ble.n	800192a <chMBPostAheadI+0x2a>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8001906:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001908:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800190a:	6804      	ldr	r4, [r0, #0]
 800190c:	3b04      	subs	r3, #4
 800190e:	3a01      	subs	r2, #1
 8001910:	42a3      	cmp	r3, r4
 8001912:	6242      	str	r2, [r0, #36]	; 0x24
 8001914:	60c3      	str	r3, [r0, #12]
 8001916:	d202      	bcs.n	800191e <chMBPostAheadI+0x1e>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8001918:	6843      	ldr	r3, [r0, #4]
 800191a:	3b04      	subs	r3, #4
 800191c:	60c3      	str	r3, [r0, #12]
  }
  *mbp->mb_rdptr = msg;
 800191e:	6019      	str	r1, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8001920:	3010      	adds	r0, #16
 8001922:	f7ff fb15 	bl	8000f50 <chSemSignalI>

  return MSG_OK;
 8001926:	2000      	movs	r0, #0
 8001928:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800192a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192e:	4770      	bx	lr

08001930 <chMBFetch>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	2320      	movs	r3, #32
 8001934:	4604      	mov	r4, r0
 8001936:	460e      	mov	r6, r1
 8001938:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 800193c:	4611      	mov	r1, r2
 800193e:	3010      	adds	r0, #16
 8001940:	f7ff fac6 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001944:	4605      	mov	r5, r0
 8001946:	b980      	cbnz	r0, 800196a <chMBFetch+0x3a>
    *msgp = *mbp->mb_rdptr++;
 8001948:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 800194a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8001950:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001952:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8001954:	bf28      	it	cs
 8001956:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001958:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 800195a:	f104 001c 	add.w	r0, r4, #28

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 800195e:	bf28      	it	cs
 8001960:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8001962:	f7ff faf5 	bl	8000f50 <chSemSignalI>
    chSchRescheduleS();
 8001966:	f7fe ffab 	bl	80008c0 <chSchRescheduleS>
 800196a:	2300      	movs	r3, #0
 800196c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8001970:	4628      	mov	r0, r5
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	f3af 8000 	nop.w
 800197c:	f3af 8000 	nop.w

08001980 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001980:	6983      	ldr	r3, [r0, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8001982:	2b00      	cmp	r3, #0
 8001984:	dd14      	ble.n	80019b0 <chMBFetchI+0x30>
 8001986:	1e5a      	subs	r2, r3, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8001988:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800198a:	b510      	push	{r4, lr}
 800198c:	6182      	str	r2, [r0, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 800198e:	6842      	ldr	r2, [r0, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	3304      	adds	r3, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8001994:	4293      	cmp	r3, r2

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8001996:	60c3      	str	r3, [r0, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8001998:	bf28      	it	cs
 800199a:	6803      	ldrcs	r3, [r0, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800199c:	600c      	str	r4, [r1, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 800199e:	f100 001c 	add.w	r0, r0, #28
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80019a2:	bf28      	it	cs
 80019a4:	f840 3c10 	strcs.w	r3, [r0, #-16]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80019a8:	f7ff fad2 	bl	8000f50 <chSemSignalI>

  return MSG_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	f3af 8000 	nop.w
 80019bc:	f3af 8000 	nop.w

080019c0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 80019c0:	b430      	push	{r4, r5}
 80019c2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80019c4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80019c6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80019c8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80019ca:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80019cc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80019ce:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80019d0:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80019d2:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 80019d4:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 80019d6:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80019d8:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 80019da:	bc30      	pop	{r4, r5}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80019e0:	2100      	movs	r1, #0
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80019e2:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80019e4:	6081      	str	r1, [r0, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80019e6:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 80019e8:	6142      	str	r2, [r0, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80019ea:	f06f 0101 	mvn.w	r1, #1
 80019ee:	f7ff b8df 	b.w	8000bb0 <chThdDequeueAllI>
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	f3af 8000 	nop.w
 80019fc:	f3af 8000 	nop.w

08001a00 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001a00:	6983      	ldr	r3, [r0, #24]
 8001a02:	6942      	ldr	r2, [r0, #20]
 8001a04:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001a06:	b510      	push	{r4, lr}
 8001a08:	6883      	ldr	r3, [r0, #8]
 8001a0a:	d00f      	beq.n	8001a2c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001a0c:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 8001a0e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001a10:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 8001a12:	6144      	str	r4, [r0, #20]
 8001a14:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001a16:	6942      	ldr	r2, [r0, #20]
 8001a18:	6903      	ldr	r3, [r0, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d301      	bcc.n	8001a22 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 8001a1e:	68c3      	ldr	r3, [r0, #12]
 8001a20:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8001a22:	2100      	movs	r1, #0
 8001a24:	f7ff f8b4 	bl	8000b90 <chThdDequeueNextI>

  return Q_OK;
 8001a28:	2000      	movs	r0, #0
 8001a2a:	bd10      	pop	{r4, pc}
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ed      	beq.n	8001a0c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8001a30:	f06f 0003 	mvn.w	r0, #3
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	f3af 8000 	nop.w
 8001a3c:	f3af 8000 	nop.w

08001a40 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	2320      	movs	r3, #32
 8001a44:	460e      	mov	r6, r1
 8001a46:	4604      	mov	r4, r0
 8001a48:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8001a4c:	69c3      	ldr	r3, [r0, #28]
 8001a4e:	b12b      	cbz	r3, 8001a5c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001a50:	4798      	blx	r3
 8001a52:	e003      	b.n	8001a5c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a54:	f7ff f884 	bl	8000b60 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	db15      	blt.n	8001a88 <chIQGetTimeout+0x48>
 8001a5c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a5e:	4631      	mov	r1, r6
 8001a60:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001a62:	2d00      	cmp	r5, #0
 8001a64:	d0f6      	beq.n	8001a54 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001a66:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a68:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001a6a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a6c:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001a6e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
 8001a72:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001a74:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001a76:	bf28      	it	cs
 8001a78:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001a7a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001a7c:	bf28      	it	cs
 8001a7e:	61a3      	strcs	r3, [r4, #24]
 8001a80:	2300      	movs	r3, #0
 8001a82:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	bf00      	nop

08001a90 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a94:	4604      	mov	r4, r0
 8001a96:	b083      	sub	sp, #12
 8001a98:	4689      	mov	r9, r1
 8001a9a:	4693      	mov	fp, r2
 8001a9c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001a9e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001aa2:	2720      	movs	r7, #32
 8001aa4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	9701      	str	r7, [sp, #4]
 8001aac:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8001aae:	f1b8 0f00 	cmp.w	r8, #0
 8001ab2:	d005      	beq.n	8001ac0 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	47c0      	blx	r8
 8001ab8:	e002      	b.n	8001ac0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001aba:	f7ff f851 	bl	8000b60 <chThdEnqueueTimeoutS>
 8001abe:	b9d8      	cbnz	r0, 8001af8 <chIQReadTimeout+0x68>
 8001ac0:	68a7      	ldr	r7, [r4, #8]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001ac6:	2f00      	cmp	r7, #0
 8001ac8:	d0f7      	beq.n	8001aba <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001aca:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001acc:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 8001ace:	1c51      	adds	r1, r2, #1
 8001ad0:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001ad2:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001ad4:	7813      	ldrb	r3, [r2, #0]
 8001ad6:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001ada:	6923      	ldr	r3, [r4, #16]
 8001adc:	69a2      	ldr	r2, [r4, #24]
 8001ade:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001ae0:	bf24      	itt	cs
 8001ae2:	68e3      	ldrcs	r3, [r4, #12]
 8001ae4:	61a3      	strcs	r3, [r4, #24]
 8001ae6:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8001aea:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001aec:	45b3      	cmp	fp, r6
 8001aee:	d005      	beq.n	8001afc <chIQReadTimeout+0x6c>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	e7da      	b.n	8001aae <chIQReadTimeout+0x1e>
 8001af8:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8001afc:	4630      	mov	r0, r6
 8001afe:	b003      	add	sp, #12
 8001b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	f3af 8000 	nop.w
 8001b0c:	f3af 8000 	nop.w

08001b10 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8001b10:	b430      	push	{r4, r5}
 8001b12:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001b14:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001b16:	188d      	adds	r5, r1, r2
 8001b18:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001b1a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001b1c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001b1e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8001b20:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8001b22:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8001b24:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001b26:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 8001b28:	bc30      	pop	{r4, r5}
 8001b2a:	4770      	bx	lr
 8001b2c:	f3af 8000 	nop.w

08001b30 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 8001b30:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b32:	6902      	ldr	r2, [r0, #16]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001b34:	68c4      	ldr	r4, [r0, #12]
 8001b36:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b38:	1b12      	subs	r2, r2, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8001b3a:	6144      	str	r4, [r0, #20]
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8001b3c:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b40:	6082      	str	r2, [r0, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
}
 8001b42:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8001b46:	f7ff b833 	b.w	8000bb0 <chThdDequeueAllI>
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w

08001b50 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	4604      	mov	r4, r0
 8001b54:	460f      	mov	r7, r1
 8001b56:	4616      	mov	r6, r2
 8001b58:	2320      	movs	r3, #32
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	e003      	b.n	8001b68 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001b60:	f7fe fffe 	bl	8000b60 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001b64:	2800      	cmp	r0, #0
 8001b66:	db18      	blt.n	8001b9a <chOQPutTimeout+0x4a>
 8001b68:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	d0f6      	beq.n	8001b60 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001b72:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001b74:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001b7a:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001b7c:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001b7e:	6923      	ldr	r3, [r4, #16]
 8001b80:	6962      	ldr	r2, [r4, #20]
 8001b82:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001b84:	bf24      	itt	cs
 8001b86:	68e3      	ldrcs	r3, [r4, #12]
 8001b88:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8001b8a:	69e3      	ldr	r3, [r4, #28]
 8001b8c:	b10b      	cbz	r3, 8001b92 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4798      	blx	r3
 8001b92:	2000      	movs	r0, #0
 8001b94:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b9a:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ba0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001ba2:	6982      	ldr	r2, [r0, #24]
 8001ba4:	6943      	ldr	r3, [r0, #20]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	6883      	ldr	r3, [r0, #8]
 8001baa:	d00e      	beq.n	8001bca <chOQGetI+0x2a>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8001bac:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001bae:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 8001bb4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001bb6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001bb8:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001bba:	d301      	bcc.n	8001bc0 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 8001bbc:	68c3      	ldr	r3, [r0, #12]
 8001bbe:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f7fe ffe5 	bl	8000b90 <chThdDequeueNextI>

  return (msg_t)b;
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	bd38      	pop	{r3, r4, r5, pc}
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8001bce:	f06f 0002 	mvn.w	r0, #2
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	f3af 8000 	nop.w
 8001bdc:	f3af 8000 	nop.w

08001be0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	b083      	sub	sp, #12
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	4616      	mov	r6, r2
 8001bec:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001bee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001bf2:	f04f 0920 	mov.w	r9, #32
 8001bf6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8001bfa:	2700      	movs	r7, #0
 8001bfc:	46ba      	mov	sl, r7
 8001bfe:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c00:	f105 0b01 	add.w	fp, r5, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c04:	1e59      	subs	r1, r3, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001c06:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001c08:	b1fb      	cbz	r3, 8001c4a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c0a:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c0c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	6161      	str	r1, [r4, #20]
 8001c12:	7829      	ldrb	r1, [r5, #0]
 8001c14:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	6961      	ldr	r1, [r4, #20]
 8001c1a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001c1c:	bf24      	itt	cs
 8001c1e:	68e3      	ldrcs	r3, [r4, #12]
 8001c20:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001c22:	f1b8 0f00 	cmp.w	r8, #0
 8001c26:	d000      	beq.n	8001c2a <chOQWriteTimeout+0x4a>
      nfy(oqp);
 8001c28:	47c0      	blx	r8
 8001c2a:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001c2e:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8001c30:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001c34:	d013      	beq.n	8001c5e <chOQWriteTimeout+0x7e>
 8001c36:	f389 8811 	msr	BASEPRI, r9
 8001c3a:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c3c:	465d      	mov	r5, fp
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c3e:	1e59      	subs	r1, r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001c40:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001c44:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1df      	bne.n	8001c0a <chOQWriteTimeout+0x2a>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001c4a:	9901      	ldr	r1, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7fe ff86 	bl	8000b60 <chThdEnqueueTimeoutS>
 8001c54:	9b00      	ldr	r3, [sp, #0]
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d0d1      	beq.n	8001bfe <chOQWriteTimeout+0x1e>
 8001c5a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001c5e:	4638      	mov	r0, r7
 8001c60:	b003      	add	sp, #12
 8001c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c66:	bf00      	nop
 8001c68:	f3af 8000 	nop.w
 8001c6c:	f3af 8000 	nop.w

08001c70 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001c70:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001c76:	4907      	ldr	r1, [pc, #28]	; (8001c94 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001c78:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001c7c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001c80:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2000172f 	.word	0x2000172f
 8001c8c:	20010000 	.word	0x20010000
 8001c90:	20000a94 	.word	0x20000a94
 8001c94:	20000a90 	.word	0x20000a90
 8001c98:	f3af 8000 	nop.w
 8001c9c:	f3af 8000 	nop.w

08001ca0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001ca0:	b410      	push	{r4}
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001ca8:	4c09      	ldr	r4, [pc, #36]	; (8001cd0 <chCoreAlloc+0x30>)
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <chCoreAlloc+0x34>)
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001cb0:	1dc3      	adds	r3, r0, #7
 8001cb2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001cb6:	1a89      	subs	r1, r1, r2
 8001cb8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8001cba:	bf9d      	ittte	ls
 8001cbc:	189b      	addls	r3, r3, r2
 8001cbe:	6023      	strls	r3, [r4, #0]

  return p;
 8001cc0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001cc2:	2000      	movhi	r0, #0
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8001cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	20000a94 	.word	0x20000a94
 8001cd4:	20000a90 	.word	0x20000a90
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	f3af 8000 	nop.w

08001ce0 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 8001ce0:	4a02      	ldr	r2, [pc, #8]	; (8001cec <chCoreGetStatusX+0xc>)
 8001ce2:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <chCoreGetStatusX+0x10>)
 8001ce4:	6810      	ldr	r0, [r2, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 8001ce8:	1ac0      	subs	r0, r0, r3
 8001cea:	4770      	bx	lr
 8001cec:	20000a90 	.word	0x20000a90
 8001cf0:	20000a94 	.word	0x20000a94
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	f3af 8000 	nop.w

08001d00 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <_heap_init+0x14>)
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_heap_init+0x18>)
 8001d04:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001d06:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8001d0e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001d10:	f7ff b97e 	b.w	8001010 <chMtxObjectInit>
 8001d14:	20000a98 	.word	0x20000a98
 8001d18:	08001ca1 	.word	0x08001ca1
 8001d1c:	f3af 8000 	nop.w

08001d20 <chHeapObjectInit>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001d20:	2300      	movs	r3, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001d22:	3a08      	subs	r2, #8
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8001d24:	6081      	str	r1, [r0, #8]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001d26:	6003      	str	r3, [r0, #0]
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8001d28:	60c3      	str	r3, [r0, #12]
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 8001d2a:	3010      	adds	r0, #16

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001d2c:	604a      	str	r2, [r1, #4]
  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
 8001d2e:	600b      	str	r3, [r1, #0]
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 8001d30:	f7ff b96e 	b.w	8001010 <chMtxObjectInit>
 8001d34:	f3af 8000 	nop.w
 8001d38:	f3af 8000 	nop.w
 8001d3c:	f3af 8000 	nop.w

08001d40 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001d42:	4e21      	ldr	r6, [pc, #132]	; (8001dc8 <chHeapAlloc+0x88>)
 8001d44:	2800      	cmp	r0, #0
 8001d46:	bf18      	it	ne
 8001d48:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001d4a:	f106 0710 	add.w	r7, r6, #16

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8001d4e:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001d50:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8001d52:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8001d56:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 8001d5a:	f7ff f9c9 	bl	80010f0 <chMtxLock>
  while (qp->h.u.next != NULL) {
 8001d5e:	e003      	b.n	8001d68 <chHeapAlloc+0x28>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8001d60:	6843      	ldr	r3, [r0, #4]
 8001d62:	429d      	cmp	r5, r3
 8001d64:	d912      	bls.n	8001d8c <chHeapAlloc+0x4c>
 8001d66:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d1f8      	bne.n	8001d60 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8001d6e:	4638      	mov	r0, r7
 8001d70:	f7ff f9e6 	bl	8001140 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8001d74:	6833      	ldr	r3, [r6, #0]
 8001d76:	b32b      	cbz	r3, 8001dc4 <chHeapAlloc+0x84>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8001d78:	f105 0008 	add.w	r0, r5, #8
 8001d7c:	4798      	blx	r3
    if (hp != NULL) {
 8001d7e:	b308      	cbz	r0, 8001dc4 <chHeapAlloc+0x84>
      hp->h.u.heap = heapp;
 8001d80:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8001d82:	6045      	str	r5, [r0, #4]
      hp++;
 8001d84:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8001d88:	4620      	mov	r0, r4
 8001d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8001d8c:	f105 0208 	add.w	r2, r5, #8
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d209      	bcs.n	8001da8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001d98:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8001d9a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001d9c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8001da0:	f7ff f9ce 	bl	8001140 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8001da4:	4620      	mov	r0, r4
 8001da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001da8:	f06f 0107 	mvn.w	r1, #7
 8001dac:	1b49      	subs	r1, r1, r5
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8001dae:	eb00 0e02 	add.w	lr, r0, r2
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001db2:	440b      	add	r3, r1
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8001db4:	6801      	ldr	r1, [r0, #0]
 8001db6:	5081      	str	r1, [r0, r2]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001db8:	f8ce 3004 	str.w	r3, [lr, #4]
        qp->h.u.next = fp;
 8001dbc:	f8c4 e000 	str.w	lr, [r4]
        hp->h.size = size;
 8001dc0:	6045      	str	r5, [r0, #4]
 8001dc2:	e7e9      	b.n	8001d98 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8001dc4:	2400      	movs	r4, #0
 8001dc6:	e7df      	b.n	8001d88 <chHeapAlloc+0x48>
 8001dc8:	20000a98 	.word	0x20000a98
 8001dcc:	f3af 8000 	nop.w

08001dd0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8001dd2:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001dd6:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001dda:	4606      	mov	r6, r0
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8001ddc:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001de0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8001de2:	4638      	mov	r0, r7
 8001de4:	f7ff f984 	bl	80010f0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001de8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001dea:	42ab      	cmp	r3, r5
 8001dec:	d004      	beq.n	8001df8 <chHeapFree+0x28>
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	d302      	bcc.n	8001df8 <chHeapFree+0x28>
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	42ab      	cmp	r3, r5
 8001df6:	d1fa      	bne.n	8001dee <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001df8:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001dfa:	b11a      	cbz	r2, 8001e04 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001dfc:	4294      	cmp	r4, r2
 8001dfe:	d301      	bcc.n	8001e04 <chHeapFree+0x34>
 8001e00:	4613      	mov	r3, r2
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
  }
 8001e02:	e7f2      	b.n	8001dea <chHeapFree+0x1a>
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8001e04:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8001e08:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001e0a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8001e0e:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8001e12:	f101 0208 	add.w	r2, r1, #8
 8001e16:	18a0      	adds	r0, r4, r2
 8001e18:	42a8      	cmp	r0, r5
 8001e1a:	d00a      	beq.n	8001e32 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	f101 0208 	add.w	r2, r1, #8
 8001e22:	441a      	add	r2, r3
 8001e24:	4294      	cmp	r4, r2
 8001e26:	d012      	beq.n	8001e4e <chHeapFree+0x7e>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e28:	4638      	mov	r0, r7

  return;
}
 8001e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e2e:	f7ff b987 	b.w	8001140 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001e32:	6840      	ldr	r0, [r0, #4]
 8001e34:	4401      	add	r1, r0
 8001e36:	3108      	adds	r1, #8
 8001e38:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001e3c:	58a2      	ldr	r2, [r4, r2]
 8001e3e:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	f101 0208 	add.w	r2, r1, #8
 8001e48:	441a      	add	r2, r3
 8001e4a:	4294      	cmp	r4, r2
 8001e4c:	d1ec      	bne.n	8001e28 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8001e4e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001e52:	440a      	add	r2, r1
 8001e54:	3208      	adds	r2, #8
 8001e56:	605a      	str	r2, [r3, #4]
        qp->h.u.next = hp->h.u.next;
 8001e58:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8001e5c:	601a      	str	r2, [r3, #0]
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e5e:	4638      	mov	r0, r7

  return;
}
 8001e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e64:	f7ff b96c 	b.w	8001140 <chMtxUnlock>
 8001e68:	f3af 8000 	nop.w
 8001e6c:	f3af 8000 	nop.w

08001e70 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001e70:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001e72:	4c0f      	ldr	r4, [pc, #60]	; (8001eb0 <chHeapStatus+0x40>)
 8001e74:	2800      	cmp	r0, #0
 8001e76:	bf18      	it	ne
 8001e78:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8001e7a:	f104 0510 	add.w	r5, r4, #16
 8001e7e:	4628      	mov	r0, r5
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001e80:	460e      	mov	r6, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8001e82:	f7ff f935 	bl	80010f0 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	b173      	cbz	r3, 8001ea8 <chHeapStatus+0x38>
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 8001e8e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001e90:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8001e92:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8001e94:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 8001e9a:	b106      	cbz	r6, 8001e9e <chHeapStatus+0x2e>
    *sizep = sz;
 8001e9c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f7ff f94e 	bl	8001140 <chMtxUnlock>

  return n;
}
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8001ea8:	461a      	mov	r2, r3
  n = 0;
 8001eaa:	461c      	mov	r4, r3
 8001eac:	e7f5      	b.n	8001e9a <chHeapStatus+0x2a>
 8001eae:	bf00      	nop
 8001eb0:	20000a98 	.word	0x20000a98
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	f3af 8000 	nop.w
 8001ebc:	f3af 8000 	nop.w

08001ec0 <chPoolObjectInit>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001ec0:	2300      	movs	r3, #0
  mp->mp_object_size = size;
 8001ec2:	6041      	str	r1, [r0, #4]
  mp->mp_provider = provider;
 8001ec4:	6082      	str	r2, [r0, #8]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001ec6:	6003      	str	r3, [r0, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w

08001ed0 <chPoolLoadArray>:
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001ed0:	b172      	cbz	r2, 8001ef0 <chPoolLoadArray+0x20>
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 8001ed2:	b430      	push	{r4, r5}
 8001ed4:	2520      	movs	r5, #32
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001edc:	6803      	ldr	r3, [r0, #0]
 8001ede:	600b      	str	r3, [r1, #0]
  mp->mp_next = php;
 8001ee0:	6001      	str	r1, [r0, #0]
 8001ee2:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001ee6:	6843      	ldr	r3, [r0, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001ee8:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001eea:	4419      	add	r1, r3
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001eec:	d1f4      	bne.n	8001ed8 <chPoolLoadArray+0x8>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
    /*lint -restore*/
    n--;
  }
}
 8001eee:	bc30      	pop	{r4, r5}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	f3af 8000 	nop.w
 8001efc:	f3af 8000 	nop.w

08001f00 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001f00:	b508      	push	{r3, lr}
 8001f02:	2220      	movs	r2, #32
 8001f04:	4603      	mov	r3, r0
 8001f06:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 8001f0a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8001f0c:	b128      	cbz	r0, 8001f1a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001f18:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d0f8      	beq.n	8001f12 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001f20:	6858      	ldr	r0, [r3, #4]
 8001f22:	4790      	blx	r2
 8001f24:	2300      	movs	r3, #0
 8001f26:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001f2a:	bd08      	pop	{r3, pc}
 8001f2c:	f3af 8000 	nop.w

08001f30 <chPoolFree>:
 8001f30:	2320      	movs	r3, #32
 8001f32:	f383 8811 	msr	BASEPRI, r3
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001f36:	6803      	ldr	r3, [r0, #0]
 8001f38:	600b      	str	r3, [r1, #0]
 8001f3a:	2300      	movs	r3, #0
  mp->mp_next = php;
 8001f3c:	6001      	str	r1, [r0, #0]
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	4770      	bx	lr
 8001f44:	f3af 8000 	nop.w
 8001f48:	f3af 8000 	nop.w
 8001f4c:	f3af 8000 	nop.w

08001f50 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <SVC_Handler+0x1c>)
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001f5a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001f5e:	3368      	adds	r3, #104	; 0x68
 8001f60:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001f64:	2300      	movs	r3, #0
 8001f66:	f383 8811 	msr	BASEPRI, r3
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ef30 	.word	0xe000ef30

08001f70 <_port_irq_epilogue>:
 8001f70:	2320      	movs	r3, #32
 8001f72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <_port_irq_epilogue+0x50>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001f7e:	d102      	bne.n	8001f86 <_port_irq_epilogue+0x16>
 8001f80:	f383 8811 	msr	BASEPRI, r3
 8001f84:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8001f86:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001f88:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001f8c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001f9c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001fa0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 8001fa4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001fa8:	f7fe fc3a 	bl	8000820 <chSchIsPreemptionRequired>
 8001fac:	b118      	cbz	r0, 8001fb6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <_port_irq_epilogue+0x58>)
 8001fb0:	f844 3c50 	str.w	r3, [r4, #-80]
 8001fb4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <_port_irq_epilogue+0x5c>)
 8001fb8:	f844 3c50 	str.w	r3, [r4, #-80]
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00
 8001fc4:	e000ef30 	.word	0xe000ef30
 8001fc8:	080002e9 	.word	0x080002e9
 8001fcc:	080002ec 	.word	0x080002ec

08001fd0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001fd0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001fd2:	f000 f8e5 	bl	80021a0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <halInit+0x1c>)
 8001fd8:	f000 f9c2 	bl	8002360 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8001fdc:	f000 f868 	bl	80020b0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001fe0:	f000 fba6 	bl	8002730 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8001fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001fe8:	f000 b802 	b.w	8001ff0 <stInit>
 8001fec:	080061b0 	.word	0x080061b0

08001ff0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8001ff0:	f000 b98e 	b.w	8002310 <st_lld_init>
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	f3af 8000 	nop.w
 8001ffc:	f3af 8000 	nop.w

08002000 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8002004:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002006:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002008:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800200a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	4770      	bx	lr

08002010 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w

08002020 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002024:	6358      	str	r0, [r3, #52]	; 0x34
 8002026:	4770      	bx	lr
 8002028:	f3af 8000 	nop.w
 800202c:	f3af 8000 	nop.w

08002030 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002030:	300c      	adds	r0, #12
 8002032:	f7ff bd2d 	b.w	8001a90 <chIQReadTimeout>
 8002036:	bf00      	nop
 8002038:	f3af 8000 	nop.w
 800203c:	f3af 8000 	nop.w

08002040 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002040:	300c      	adds	r0, #12
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002046:	f7ff bd23 	b.w	8001a90 <chIQReadTimeout>
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w

08002050 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002050:	3030      	adds	r0, #48	; 0x30
 8002052:	f7ff bdc5 	b.w	8001be0 <chOQWriteTimeout>
 8002056:	bf00      	nop
 8002058:	f3af 8000 	nop.w
 800205c:	f3af 8000 	nop.w

08002060 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002060:	3030      	adds	r0, #48	; 0x30
 8002062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002066:	f7ff bdbb 	b.w	8001be0 <chOQWriteTimeout>
 800206a:	bf00      	nop
 800206c:	f3af 8000 	nop.w

08002070 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002070:	300c      	adds	r0, #12
 8002072:	f7ff bce5 	b.w	8001a40 <chIQGetTimeout>
 8002076:	bf00      	nop
 8002078:	f3af 8000 	nop.w
 800207c:	f3af 8000 	nop.w

08002080 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002080:	300c      	adds	r0, #12
 8002082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002086:	f7ff bcdb 	b.w	8001a40 <chIQGetTimeout>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w

08002090 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002090:	3030      	adds	r0, #48	; 0x30
 8002092:	f7ff bd5d 	b.w	8001b50 <chOQPutTimeout>
 8002096:	bf00      	nop
 8002098:	f3af 8000 	nop.w
 800209c:	f3af 8000 	nop.w

080020a0 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80020a0:	3030      	adds	r0, #48	; 0x30
 80020a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a6:	f7ff bd53 	b.w	8001b50 <chOQPutTimeout>
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w

080020b0 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 80020b0:	f000 bad6 	b.w	8002660 <sd_lld_init>
 80020b4:	f3af 8000 	nop.w
 80020b8:	f3af 8000 	nop.w
 80020bc:	f3af 8000 	nop.w

080020c0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80020c0:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80020c4:	4604      	mov	r4, r0
 80020c6:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 80020c8:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80020cc:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80020ce:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80020d0:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80020d2:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80020d4:	6060      	str	r0, [r4, #4]
 80020d6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80020da:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80020de:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80020e0:	2210      	movs	r2, #16
 80020e2:	f7ff fc6d 	bl	80019c0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 80020e6:	9400      	str	r4, [sp, #0]
 80020e8:	462b      	mov	r3, r5
 80020ea:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80020ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80020f2:	2210      	movs	r2, #16
 80020f4:	f7ff fd0c 	bl	8001b10 <chOQObjectInit>
}
 80020f8:	b002      	add	sp, #8
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	08006180 	.word	0x08006180

08002100 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8002100:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002102:	2320      	movs	r3, #32
 8002104:	4604      	mov	r4, r0
 8002106:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800210a:	f000 fab9 	bl	8002680 <sd_lld_start>
  sdp->state = SD_READY;
 800210e:	2302      	movs	r3, #2
 8002110:	7223      	strb	r3, [r4, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	bd10      	pop	{r4, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w

08002120 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002120:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002122:	6943      	ldr	r3, [r0, #20]
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002124:	4604      	mov	r4, r0
 8002126:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002128:	b13b      	cbz	r3, 800213a <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800212a:	4629      	mov	r1, r5
 800212c:	f104 000c 	add.w	r0, r4, #12
 8002130:	f7ff fc66 	bl	8001a00 <chIQPutI>
 8002134:	2800      	cmp	r0, #0
 8002136:	db0b      	blt.n	8002150 <sdIncomingDataI+0x30>
 8002138:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800213a:	2104      	movs	r1, #4
 800213c:	4408      	add	r0, r1
 800213e:	f7ff f9af 	bl	80014a0 <chEvtBroadcastFlagsI>
 8002142:	4629      	mov	r1, r5
 8002144:	f104 000c 	add.w	r0, r4, #12
 8002148:	f7ff fc5a 	bl	8001a00 <chIQPutI>
 800214c:	2800      	cmp	r0, #0
 800214e:	daf3      	bge.n	8002138 <sdIncomingDataI+0x18>
 8002150:	1d20      	adds	r0, r4, #4
 8002152:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 8002154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002158:	f7ff b9a2 	b.w	80014a0 <chEvtBroadcastFlagsI>
 800215c:	f3af 8000 	nop.w

08002160 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002160:	0943      	lsrs	r3, r0, #5
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	b410      	push	{r4}
 8002166:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800216a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800216e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8002172:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002176:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002178:	f000 001f 	and.w	r0, r0, #31
 800217c:	2201      	movs	r2, #1
 800217e:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002182:	b2c9      	uxtb	r1, r1
 8002184:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002188:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800218c:	6018      	str	r0, [r3, #0]
}
 800218e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	f3af 8000 	nop.w
 8002198:	f3af 8000 	nop.w
 800219c:	f3af 8000 	nop.w

080021a0 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <hal_lld_init+0x5c>)
 80021a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 80021aa:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80021ac:	6119      	str	r1, [r3, #16]
 80021ae:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80021b0:	6958      	ldr	r0, [r3, #20]
 80021b2:	6159      	str	r1, [r3, #20]
 80021b4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80021b6:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80021b8:	4c11      	ldr	r4, [pc, #68]	; (8002200 <hal_lld_init+0x60>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80021ba:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80021be:	6218      	str	r0, [r3, #32]
 80021c0:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80021c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80021c4:	6259      	str	r1, [r3, #36]	; 0x24
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80021c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021ca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80021ce:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80021d0:	6821      	ldr	r1, [r4, #0]
 80021d2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80021d6:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80021d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80021da:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80021de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80021e2:	d003      	beq.n	80021ec <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80021e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80021e8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80021ea:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <hal_lld_init+0x60>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80021ee:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80021f2:	6853      	ldr	r3, [r2, #4]
 80021f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f8:	6053      	str	r3, [r2, #4]

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80021fa:	4770      	bx	lr
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	f3af 8000 	nop.w
 8002208:	f3af 8000 	nop.w
 800220c:	f3af 8000 	nop.w

08002210 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002210:	492c      	ldr	r1, [pc, #176]	; (80022c4 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002214:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002218:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800221c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800221e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002228:	680a      	ldr	r2, [r1, #0]
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <stm32_clock_init+0xb4>)
 800222c:	0790      	lsls	r0, r2, #30
 800222e:	d5fb      	bpl.n	8002228 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	f022 0203 	bic.w	r2, r2, #3
 8002236:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800223c:	4619      	mov	r1, r3
 800223e:	688b      	ldr	r3, [r1, #8]
 8002240:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <stm32_clock_init+0xb4>)
 8002242:	f013 030c 	ands.w	r3, r3, #12
 8002246:	d1fa      	bne.n	800223e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002248:	6811      	ldr	r1, [r2, #0]
 800224a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800224e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002250:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800225a:	6811      	ldr	r1, [r2, #0]
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <stm32_clock_init+0xb4>)
 800225e:	0389      	lsls	r1, r1, #14
 8002260:	d5fb      	bpl.n	800225a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002262:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800226a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800226c:	4915      	ldr	r1, [pc, #84]	; (80022c4 <stm32_clock_init+0xb4>)
 800226e:	0790      	lsls	r0, r2, #30
 8002270:	d5fb      	bpl.n	800226a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <stm32_clock_init+0xbc>)
 8002274:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002276:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002278:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002280:	6853      	ldr	r3, [r2, #4]
 8002282:	0459      	lsls	r1, r3, #17
 8002284:	d5fc      	bpl.n	8002280 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002286:	490f      	ldr	r1, [pc, #60]	; (80022c4 <stm32_clock_init+0xb4>)
 8002288:	680a      	ldr	r2, [r1, #0]
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <stm32_clock_init+0xb4>)
 800228c:	0192      	lsls	r2, r2, #6
 800228e:	d5fb      	bpl.n	8002288 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002292:	4910      	ldr	r1, [pc, #64]	; (80022d4 <stm32_clock_init+0xc4>)
 8002294:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002296:	f240 7102 	movw	r1, #1794	; 0x702
 800229a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	f042 0202 	orr.w	r2, r2, #2
 80022a2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80022a4:	461a      	mov	r2, r3
 80022a6:	6893      	ldr	r3, [r2, #8]
 80022a8:	4906      	ldr	r1, [pc, #24]	; (80022c4 <stm32_clock_init+0xb4>)
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d1f9      	bne.n	80022a6 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80022b2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	644b      	str	r3, [r1, #68]	; 0x44
 80022ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	664b      	str	r3, [r1, #100]	; 0x64
 80022c2:	4770      	bx	lr
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	07415408 	.word	0x07415408
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	38081000 	.word	0x38081000
 80022d8:	f3af 8000 	nop.w
 80022dc:	f3af 8000 	nop.w

080022e0 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80022e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	0792      	lsls	r2, r2, #30
 80022e8:	d401      	bmi.n	80022ee <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80022ea:	f7ff be41 	b.w	8001f70 <_port_irq_epilogue>
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80022ee:	b510      	push	{r4, lr}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80022f0:	2400      	movs	r4, #0
 80022f2:	611c      	str	r4, [r3, #16]
 80022f4:	2320      	movs	r3, #32
 80022f6:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 80022fa:	f7fe f8d1 	bl	80004a0 <chSysTimerHandlerI>
 80022fe:	f384 8811 	msr	BASEPRI, r4
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002306:	f7ff be33 	b.w	8001f70 <_port_irq_epilogue>
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w

08002310 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002312:	4810      	ldr	r0, [pc, #64]	; (8002354 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002314:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8002316:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800231e:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8002324:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002326:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002328:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800232c:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002330:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002334:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002336:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8002338:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800233a:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800233c:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 800233e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002342:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002344:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002346:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002348:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800234a:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800234c:	f7ff bf08 	b.w	8002160 <nvicEnableVector>
 8002350:	40023800 	.word	0x40023800
 8002354:	e0042000 	.word	0xe0042000
 8002358:	f3af 8000 	nop.w
 800235c:	f3af 8000 	nop.w

08002360 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8002360:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002362:	4e3a      	ldr	r6, [pc, #232]	; (800244c <_pal_lld_init+0xec>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002364:	4d3a      	ldr	r5, [pc, #232]	; (8002450 <_pal_lld_init+0xf0>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002366:	6b37      	ldr	r7, [r6, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002368:	4c3a      	ldr	r4, [pc, #232]	; (8002454 <_pal_lld_init+0xf4>)
 800236a:	493b      	ldr	r1, [pc, #236]	; (8002458 <_pal_lld_init+0xf8>)
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <_pal_lld_init+0xfc>)
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <_pal_lld_init+0x100>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002370:	f047 071f 	orr.w	r7, r7, #31
 8002374:	6337      	str	r7, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8002376:	6d37      	ldr	r7, [r6, #80]	; 0x50
 8002378:	f047 071f 	orr.w	r7, r7, #31
 800237c:	6537      	str	r7, [r6, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800237e:	6846      	ldr	r6, [r0, #4]
 8002380:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002382:	6886      	ldr	r6, [r0, #8]
 8002384:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002386:	68c6      	ldr	r6, [r0, #12]
 8002388:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 800238a:	6906      	ldr	r6, [r0, #16]
 800238c:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800238e:	6946      	ldr	r6, [r0, #20]
 8002390:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002392:	6986      	ldr	r6, [r0, #24]
 8002394:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002396:	6806      	ldr	r6, [r0, #0]
 8002398:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800239a:	6a05      	ldr	r5, [r0, #32]
 800239c:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800239e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80023a0:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80023a2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80023a4:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 80023a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80023a8:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80023aa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80023ac:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80023ae:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80023b0:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80023b2:	69c5      	ldr	r5, [r0, #28]
 80023b4:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80023b6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80023b8:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80023ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80023bc:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80023be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80023c0:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 80023c2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80023c4:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80023c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80023c8:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80023ca:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80023cc:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80023ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80023d0:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80023d2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80023d4:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80023d6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80023d8:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80023da:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80023dc:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 80023de:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80023e0:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80023e2:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80023e4:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80023e6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80023e8:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80023ea:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80023ec:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80023ee:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80023f0:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80023f2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80023f4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80023f6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80023f8:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80023fa:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80023fe:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002400:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002404:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002406:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800240c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800240e:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002410:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002414:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 8002418:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800241c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8002420:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8002424:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8002428:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800242c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8002430:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002434:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8002438:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800243c:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8002440:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002444:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 8002448:	bcf0      	pop	{r4, r5, r6, r7}
 800244a:	4770      	bx	lr
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	f3af 8000 	nop.w
 8002468:	f3af 8000 	nop.w
 800246c:	f3af 8000 	nop.w

08002470 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 8002474:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002478:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800247c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8002480:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 8002484:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002488:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800248a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800248e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002492:	f04f 0803 	mov.w	r8, #3
 8002496:	e030      	b.n	80024fa <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002498:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800249c:	ea2b 0303 	bic.w	r3, fp, r3
 80024a0:	ea43 030a 	orr.w	r3, r3, sl
 80024a4:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80024a6:	6843      	ldr	r3, [r0, #4]
 80024a8:	fa09 fa04 	lsl.w	sl, r9, r4
 80024ac:	ea23 030a 	bic.w	r3, r3, sl
 80024b0:	433b      	orrs	r3, r7
 80024b2:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80024b4:	0063      	lsls	r3, r4, #1
 80024b6:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80024ba:	fa08 f303 	lsl.w	r3, r8, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	ea0a 0a03 	and.w	sl, sl, r3
 80024c4:	ea4a 0a06 	orr.w	sl, sl, r6
 80024c8:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80024cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80024d0:	ea03 0a0a 	and.w	sl, r3, sl
 80024d4:	ea4a 0a05 	orr.w	sl, sl, r5
 80024d8:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 80024dc:	f8d0 a000 	ldr.w	sl, [r0]
 80024e0:	ea03 030a 	and.w	r3, r3, sl
 80024e4:	ea43 030e 	orr.w	r3, r3, lr
 80024e8:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 80024ea:	0849      	lsrs	r1, r1, #1
 80024ec:	d019      	beq.n	8002522 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 80024ee:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 80024f0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 80024f2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 80024f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80024f8:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80024fa:	f004 0307 	and.w	r3, r4, #7
 80024fe:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8002500:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002504:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 8002508:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800250c:	d0ed      	beq.n	80024ea <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800250e:	2c07      	cmp	r4, #7
 8002510:	d9c2      	bls.n	8002498 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002512:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8002516:	ea2b 0303 	bic.w	r3, fp, r3
 800251a:	ea43 030a 	orr.w	r3, r3, sl
 800251e:	6243      	str	r3, [r0, #36]	; 0x24
 8002520:	e7c1      	b.n	80024a6 <_pal_lld_setgroupmode+0x36>
 8002522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	f3af 8000 	nop.w
 800252c:	f3af 8000 	nop.w

08002530 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <notify2+0xc>)
 8002532:	68d3      	ldr	r3, [r2, #12]
 8002534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002538:	60d3      	str	r3, [r2, #12]
 800253a:	4770      	bx	lr
 800253c:	40004400 	.word	0x40004400

08002540 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8002542:	4e43      	ldr	r6, [pc, #268]	; (8002650 <VectorD8+0x110>)
 8002544:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002546:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 8002548:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800254a:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800254c:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800254e:	d44f      	bmi.n	80025f0 <VectorD8+0xb0>
 8002550:	2320      	movs	r3, #32
 8002552:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002556:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800255a:	d108      	bne.n	800256e <VectorD8+0x2e>
 800255c:	e029      	b.n	80025b2 <VectorD8+0x72>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800255e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002560:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002562:	d41d      	bmi.n	80025a0 <VectorD8+0x60>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002564:	682c      	ldr	r4, [r5, #0]
 8002566:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002568:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800256c:	d021      	beq.n	80025b2 <VectorD8+0x72>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800256e:	0723      	lsls	r3, r4, #28
 8002570:	d0f5      	beq.n	800255e <VectorD8+0x1e>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8002572:	f014 0f08 	tst.w	r4, #8
 8002576:	bf0c      	ite	eq
 8002578:	2100      	moveq	r1, #0
 800257a:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800257c:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800257e:	bf48      	it	mi
 8002580:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8002584:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002586:	bf48      	it	mi
 8002588:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800258c:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800258e:	bf48      	it	mi
 8002590:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002594:	482f      	ldr	r0, [pc, #188]	; (8002654 <VectorD8+0x114>)
 8002596:	f7fe ff83 	bl	80014a0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800259a:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800259c:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800259e:	d5e1      	bpl.n	8002564 <VectorD8+0x24>
      sdIncomingDataI(sdp, b);
 80025a0:	b2c9      	uxtb	r1, r1
 80025a2:	482b      	ldr	r0, [pc, #172]	; (8002650 <VectorD8+0x110>)
 80025a4:	f7ff fdbc 	bl	8002120 <sdIncomingDataI>
    sr = u->SR;
 80025a8:	682c      	ldr	r4, [r5, #0]
 80025aa:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80025ac:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80025b0:	d1dd      	bne.n	800256e <VectorD8+0x2e>
 80025b2:	2300      	movs	r3, #0
 80025b4:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80025b8:	0639      	lsls	r1, r7, #24
 80025ba:	d501      	bpl.n	80025c0 <VectorD8+0x80>
 80025bc:	0622      	lsls	r2, r4, #24
 80025be:	d426      	bmi.n	800260e <VectorD8+0xce>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80025c0:	0663      	lsls	r3, r4, #25
 80025c2:	d511      	bpl.n	80025e8 <VectorD8+0xa8>
 80025c4:	2320      	movs	r3, #32
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80025cc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80025ce:	4820      	ldr	r0, [pc, #128]	; (8002650 <VectorD8+0x110>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d029      	beq.n	8002628 <VectorD8+0xe8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80025d4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80025d8:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 80025da:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80025de:	60eb      	str	r3, [r5, #12]
 80025e0:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80025e2:	602a      	str	r2, [r5, #0]
 80025e4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 80025e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80025ec:	f7ff bcc0 	b.w	8001f70 <_port_irq_epilogue>
 80025f0:	2320      	movs	r3, #32
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025fa:	1d30      	adds	r0, r6, #4
 80025fc:	f7fe ff50 	bl	80014a0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8002600:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	e7a0      	b.n	8002550 <VectorD8+0x10>
 800260e:	2320      	movs	r3, #32
 8002610:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8002614:	4810      	ldr	r0, [pc, #64]	; (8002658 <VectorD8+0x118>)
 8002616:	f7ff fac3 	bl	8001ba0 <chOQGetI>
    if (b < Q_OK) {
 800261a:	2800      	cmp	r0, #0
 800261c:	db0c      	blt.n	8002638 <VectorD8+0xf8>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800261e:	6068      	str	r0, [r5, #4]
 8002620:	2300      	movs	r3, #0
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	e7cb      	b.n	80025c0 <VectorD8+0x80>
 8002628:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0d2      	beq.n	80025d4 <VectorD8+0x94>
 800262e:	3004      	adds	r0, #4
 8002630:	2110      	movs	r1, #16
 8002632:	f7fe ff35 	bl	80014a0 <chEvtBroadcastFlagsI>
 8002636:	e7cd      	b.n	80025d4 <VectorD8+0x94>
 8002638:	2108      	movs	r1, #8
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <VectorD8+0x114>)
 800263c:	f7fe ff30 	bl	80014a0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002640:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002644:	403b      	ands	r3, r7
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	60eb      	str	r3, [r5, #12]
 800264c:	e7e8      	b.n	8002620 <VectorD8+0xe0>
 800264e:	bf00      	nop
 8002650:	20000ab8 	.word	0x20000ab8
 8002654:	20000abc 	.word	0x20000abc
 8002658:	20000ae8 	.word	0x20000ae8
 800265c:	f3af 8000 	nop.w

08002660 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002660:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002662:	4c04      	ldr	r4, [pc, #16]	; (8002674 <sd_lld_init+0x14>)
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <sd_lld_init+0x18>)
 8002666:	4620      	mov	r0, r4
 8002668:	2100      	movs	r1, #0
 800266a:	f7ff fd29 	bl	80020c0 <sdObjectInit>
  SD2.usart = USART2;
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <sd_lld_init+0x1c>)
 8002670:	6763      	str	r3, [r4, #116]	; 0x74
 8002672:	bd10      	pop	{r4, pc}
 8002674:	20000ab8 	.word	0x20000ab8
 8002678:	08002531 	.word	0x08002531
 800267c:	40004400 	.word	0x40004400

08002680 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002680:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 8002682:	4c1f      	ldr	r4, [pc, #124]	; (8002700 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 8002684:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8002686:	2900      	cmp	r1, #0
 8002688:	bf18      	it	ne
 800268a:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800268c:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800268e:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002690:	d022      	beq.n	80026d8 <sd_lld_start+0x58>
 8002692:	6f6b      	ldr	r3, [r5, #116]	; 0x74
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <sd_lld_start+0x84>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <sd_lld_start+0x72>
 800269a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800269e:	4293      	cmp	r3, r2
 80026a0:	d027      	beq.n	80026f2 <sd_lld_start+0x72>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 80026a2:	6821      	ldr	r1, [r4, #0]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <sd_lld_start+0x88>)
 80026a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80026aa:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80026ac:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80026ae:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80026b0:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80026b2:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80026b6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80026ba:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80026be:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80026c2:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80026c4:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80026c6:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80026c8:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80026ca:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80026cc:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80026ce:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80026d0:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80026d2:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <sd_lld_start+0x8c>)
 80026da:	4298      	cmp	r0, r3
 80026dc:	d1d9      	bne.n	8002692 <sd_lld_start+0x12>
      rccEnableUSART2(FALSE);
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <sd_lld_start+0x90>)
 80026e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 80026e8:	210c      	movs	r1, #12
 80026ea:	2026      	movs	r0, #38	; 0x26
 80026ec:	f7ff fd38 	bl	8002160 <nvicEnableVector>
 80026f0:	e7cf      	b.n	8002692 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80026f2:	6821      	ldr	r1, [r4, #0]
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <sd_lld_start+0x94>)
 80026f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e7d6      	b.n	80026ac <sd_lld_start+0x2c>
 80026fe:	bf00      	nop
 8002700:	080061a0 	.word	0x080061a0
 8002704:	40011000 	.word	0x40011000
 8002708:	0280de80 	.word	0x0280de80
 800270c:	20000ab8 	.word	0x20000ab8
 8002710:	40023800 	.word	0x40023800
 8002714:	0501bd00 	.word	0x0501bd00
 8002718:	f3af 8000 	nop.w
 800271c:	f3af 8000 	nop.w

08002720 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8002720:	f7ff bd76 	b.w	8002210 <stm32_clock_init>
 8002724:	f3af 8000 	nop.w
 8002728:	f3af 8000 	nop.w
 800272c:	f3af 8000 	nop.w

08002730 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	f3af 8000 	nop.w
 800273c:	f3af 8000 	nop.w

08002740 <tmr>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8002740:	4b01      	ldr	r3, [pc, #4]	; (8002748 <tmr+0x8>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	4770      	bx	lr
 8002748:	20001445 	.word	0x20001445
 800274c:	f3af 8000 	nop.w

08002750 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	4e09      	ldr	r6, [pc, #36]	; (8002778 <print_line+0x28>)
 8002754:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8002756:	6830      	ldr	r0, [r6, #0]
 8002758:	4d07      	ldr	r5, [pc, #28]	; (8002778 <print_line+0x28>)
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	212d      	movs	r1, #45	; 0x2d
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8002762:	3c01      	subs	r4, #1
 8002764:	d1f7      	bne.n	8002756 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002766:	6828      	ldr	r0, [r5, #0]
 8002768:	4904      	ldr	r1, [pc, #16]	; (800277c <print_line+0x2c>)
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	2202      	movs	r2, #2
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002774:	4718      	bx	r3
 8002776:	bf00      	nop
 8002778:	20001474 	.word	0x20001474
 800277c:	080062c0 	.word	0x080062c0

08002780 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8002780:	b310      	cbz	r0, 80027c8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8002782:	b570      	push	{r4, r5, r6, lr}
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <test_printn+0x54>)
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8002786:	b084      	sub	sp, #16
 8002788:	466d      	mov	r5, sp
 800278a:	466c      	mov	r4, sp
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800278c:	fba2 1300 	umull	r1, r3, r2, r0
 8002790:	08db      	lsrs	r3, r3, #3
 8002792:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002796:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800279a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800279e:	b2c9      	uxtb	r1, r1
 80027a0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80027a4:	4618      	mov	r0, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80027aa:	42ac      	cmp	r4, r5
 80027ac:	d90a      	bls.n	80027c4 <test_printn+0x44>
 80027ae:	4e0a      	ldr	r6, [pc, #40]	; (80027d8 <test_printn+0x58>)
 80027b0:	3c01      	subs	r4, #1
 80027b2:	e001      	b.n	80027b8 <test_printn+0x38>
 80027b4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 80027b8:	6830      	ldr	r0, [r6, #0]
 80027ba:	6803      	ldr	r3, [r0, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80027c0:	42ac      	cmp	r4, r5
 80027c2:	d1f7      	bne.n	80027b4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 80027c4:	b004      	add	sp, #16
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <test_printn+0x58>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	2130      	movs	r1, #48	; 0x30
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4718      	bx	r3
 80027d4:	cccccccd 	.word	0xcccccccd
 80027d8:	20001474 	.word	0x20001474
 80027dc:	f3af 8000 	nop.w

080027e0 <test_print>:
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80027e0:	7801      	ldrb	r1, [r0, #0]
 80027e2:	b159      	cbz	r1, 80027fc <test_print+0x1c>
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4d06      	ldr	r5, [pc, #24]	; (8002800 <test_print+0x20>)
 80027e8:	4604      	mov	r4, r0

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80027ea:	6828      	ldr	r0, [r5, #0]
 80027ec:	6803      	ldr	r3, [r0, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80027f2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80027f6:	2900      	cmp	r1, #0
 80027f8:	d1f7      	bne.n	80027ea <test_print+0xa>
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20001474 	.word	0x20001474
 8002804:	f3af 8000 	nop.w
 8002808:	f3af 8000 	nop.w
 800280c:	f3af 8000 	nop.w

08002810 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8002810:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002812:	7801      	ldrb	r1, [r0, #0]
 8002814:	b189      	cbz	r1, 800283a <test_println+0x2a>
 8002816:	4d0a      	ldr	r5, [pc, #40]	; (8002840 <test_println+0x30>)
 8002818:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800281a:	6828      	ldr	r0, [r5, #0]
 800281c:	6803      	ldr	r3, [r0, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002822:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002826:	2900      	cmp	r1, #0
 8002828:	d1f7      	bne.n	800281a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800282a:	6828      	ldr	r0, [r5, #0]
 800282c:	4905      	ldr	r1, [pc, #20]	; (8002844 <test_println+0x34>)
 800282e:	6803      	ldr	r3, [r0, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002838:	4718      	bx	r3
 800283a:	4d01      	ldr	r5, [pc, #4]	; (8002840 <test_println+0x30>)
 800283c:	e7f5      	b.n	800282a <test_println+0x1a>
 800283e:	bf00      	nop
 8002840:	20001474 	.word	0x20001474
 8002844:	080062c0 	.word	0x080062c0
 8002848:	f3af 8000 	nop.w
 800284c:	f3af 8000 	nop.w

08002850 <test_emit_token>:
 8002850:	2320      	movs	r3, #32
 8002852:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <test_emit_token+0x18>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	1c51      	adds	r1, r2, #1
 800285c:	6019      	str	r1, [r3, #0]
 800285e:	7010      	strb	r0, [r2, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	4770      	bx	lr
 8002868:	20001448 	.word	0x20001448
 800286c:	f3af 8000 	nop.w

08002870 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8002870:	b959      	cbnz	r1, 800288a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8002872:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002874:	4906      	ldr	r1, [pc, #24]	; (8002890 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002876:	4c07      	ldr	r4, [pc, #28]	; (8002894 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800287a:	2301      	movs	r3, #1
 800287c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800287e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002880:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8002882:	4618      	mov	r0, r3
 8002884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002888:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	4770      	bx	lr
 8002890:	20001444 	.word	0x20001444
 8002894:	20001488 	.word	0x20001488
 8002898:	20001440 	.word	0x20001440
 800289c:	f3af 8000 	nop.w

080028a0 <_test_assert_sequence>:

bool _test_assert_sequence(unsigned point, char *expected) {
 80028a0:	b4f0      	push	{r4, r5, r6, r7}
 80028a2:	4e0e      	ldr	r6, [pc, #56]	; (80028dc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80028a4:	4f0e      	ldr	r7, [pc, #56]	; (80028e0 <_test_assert_sequence+0x40>)
 80028a6:	6835      	ldr	r5, [r6, #0]
 80028a8:	463b      	mov	r3, r7
  while (cp < tokp) {
 80028aa:	e005      	b.n	80028b8 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 80028ac:	f813 4b01 	ldrb.w	r4, [r3], #1
 80028b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028b4:	4294      	cmp	r4, r2
 80028b6:	d107      	bne.n	80028c8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80028b8:	42ab      	cmp	r3, r5
 80028ba:	d3f7      	bcc.n	80028ac <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80028bc:	780b      	ldrb	r3, [r1, #0]
 80028be:	b91b      	cbnz	r3, 80028c8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80028c0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bcf0      	pop	{r4, r5, r6, r7}
 80028c6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80028c8:	4c06      	ldr	r4, [pc, #24]	; (80028e4 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 80028ca:	4907      	ldr	r1, [pc, #28]	; (80028e8 <_test_assert_sequence+0x48>)
  failpoint = point;
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80028d2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80028d4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	bcf0      	pop	{r4, r5, r6, r7}
 80028da:	4770      	bx	lr
 80028dc:	20001448 	.word	0x20001448
 80028e0:	20001478 	.word	0x20001478
 80028e4:	20001488 	.word	0x20001488
 80028e8:	20001444 	.word	0x20001444
 80028ec:	20001440 	.word	0x20001440

080028f0 <_test_assert_time_window>:

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80028f0:	b410      	push	{r4}
 80028f2:	2320      	movs	r3, #32
 80028f4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80028f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80028fc:	2300      	movs	r3, #0
 80028fe:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8002900:	f383 8811 	msr	BASEPRI, r3
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8002904:	1a64      	subs	r4, r4, r1
 8002906:	1a52      	subs	r2, r2, r1
 8002908:	4294      	cmp	r4, r2
 800290a:	d306      	bcc.n	800291a <_test_assert_time_window+0x2a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800290c:	4c05      	ldr	r4, [pc, #20]	; (8002924 <_test_assert_time_window+0x34>)
  local_fail = TRUE;
 800290e:	4906      	ldr	r1, [pc, #24]	; (8002928 <_test_assert_time_window+0x38>)
  failpoint = point;
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002912:	2301      	movs	r3, #1
 8002914:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 8002916:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8002918:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800291a:	4618      	mov	r0, r3
 800291c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20001488 	.word	0x20001488
 8002928:	20001444 	.word	0x20001444
 800292c:	20001440 	.word	0x20001440

08002930 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4c06      	ldr	r4, [pc, #24]	; (800294c <test_terminate_threads+0x1c>)
 8002934:	f104 0514 	add.w	r5, r4, #20
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8002938:	f854 3b04 	ldr.w	r3, [r4], #4
      chThdTerminate(threads[i]);
 800293c:	4618      	mov	r0, r3
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800293e:	b10b      	cbz	r3, 8002944 <test_terminate_threads+0x14>
      chThdTerminate(threads[i]);
 8002940:	f7fe f87e 	bl	8000a40 <chThdTerminate>
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002944:	42ac      	cmp	r4, r5
 8002946:	d1f7      	bne.n	8002938 <test_terminate_threads+0x8>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8002948:	bd38      	pop	{r3, r4, r5, pc}
 800294a:	bf00      	nop
 800294c:	20001460 	.word	0x20001460

08002950 <test_wait_threads>:

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4c07      	ldr	r4, [pc, #28]	; (8002970 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8002954:	2600      	movs	r6, #0
 8002956:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800295a:	f854 0b04 	ldr.w	r0, [r4], #4
 800295e:	b118      	cbz	r0, 8002968 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8002960:	f7fe f8de 	bl	8000b20 <chThdWait>
      threads[i] = NULL;
 8002964:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002968:	42ac      	cmp	r4, r5
 800296a:	d1f6      	bne.n	800295a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	bf00      	nop
 8002970:	20001460 	.word	0x20001460
 8002974:	f3af 8000 	nop.w
 8002978:	f3af 8000 	nop.w
 800297c:	f3af 8000 	nop.w

08002980 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8002980:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002982:	2001      	movs	r0, #1
 8002984:	f7fe f86c 	bl	8000a60 <chThdSleep>
 8002988:	2320      	movs	r3, #32
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002992:	2300      	movs	r3, #0
 8002994:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002996:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800299a:	bd08      	pop	{r3, pc}
 800299c:	f3af 8000 	nop.w

080029a0 <test_start_timer>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 80029a0:	b510      	push	{r4, lr}

  systime_t duration = MS2ST(ms);
 80029a2:	f242 7410 	movw	r4, #10000	; 0x2710
 80029a6:	fb04 f000 	mul.w	r0, r4, r0
 80029aa:	490d      	ldr	r1, [pc, #52]	; (80029e0 <test_start_timer+0x40>)
  test_timer_done = FALSE;
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <test_start_timer+0x44>)
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 80029ae:	f200 34e7 	addw	r4, r0, #999	; 0x3e7
 80029b2:	fba1 2404 	umull	r2, r4, r1, r4
  test_timer_done = FALSE;
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 80029ba:	09a4      	lsrs	r4, r4, #6
 80029bc:	2320      	movs	r3, #32
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <test_start_timer+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80029c4:	68c3      	ldr	r3, [r0, #12]
 80029c6:	b10b      	cbz	r3, 80029cc <test_start_timer+0x2c>
    chVTDoResetI(vtp);
 80029c8:	f7fd fe1a 	bl	8000600 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80029cc:	4621      	mov	r1, r4
 80029ce:	2300      	movs	r3, #0
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <test_start_timer+0x4c>)
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <test_start_timer+0x48>)
 80029d4:	f7fd fdd4 	bl	8000580 <chVTDoSetI>
 80029d8:	2300      	movs	r3, #0
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	10624dd3 	.word	0x10624dd3
 80029e4:	20001445 	.word	0x20001445
 80029e8:	2000144c 	.word	0x2000144c
 80029ec:	08002741 	.word	0x08002741

080029f0 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 80029f4:	4c9f      	ldr	r4, [pc, #636]	; (8002c74 <TestThread+0x284>)
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
 80029f6:	4da0      	ldr	r5, [pc, #640]	; (8002c78 <TestThread+0x288>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 80029f8:	6020      	str	r0, [r4, #0]
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 80029fa:	b085      	sub	sp, #20
  int i, j;

  chp = p;
  test_println("");
 80029fc:	489f      	ldr	r0, [pc, #636]	; (8002c7c <TestThread+0x28c>)
 80029fe:	f7ff ff07 	bl	8002810 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8002a02:	489f      	ldr	r0, [pc, #636]	; (8002c80 <TestThread+0x290>)
 8002a04:	f7ff ff04 	bl	8002810 <test_println>
  test_println("***");
 8002a08:	489e      	ldr	r0, [pc, #632]	; (8002c84 <TestThread+0x294>)
 8002a0a:	f7ff ff01 	bl	8002810 <test_println>
 8002a0e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	6803      	ldr	r3, [r0, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a18:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d1f7      	bne.n	8002a10 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8002a20:	4899      	ldr	r0, [pc, #612]	; (8002c88 <TestThread+0x298>)
 8002a22:	4d9a      	ldr	r5, [pc, #616]	; (8002c8c <TestThread+0x29c>)
 8002a24:	f7ff fef4 	bl	8002810 <test_println>
 8002a28:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	6803      	ldr	r3, [r0, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a32:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a36:	2900      	cmp	r1, #0
 8002a38:	d1f7      	bne.n	8002a2a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8002a3a:	4895      	ldr	r0, [pc, #596]	; (8002c90 <TestThread+0x2a0>)
 8002a3c:	4d95      	ldr	r5, [pc, #596]	; (8002c94 <TestThread+0x2a4>)
 8002a3e:	f7ff fee7 	bl	8002810 <test_println>
 8002a42:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a44:	6820      	ldr	r0, [r4, #0]
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a4c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d1f7      	bne.n	8002a44 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8002a54:	4890      	ldr	r0, [pc, #576]	; (8002c98 <TestThread+0x2a8>)
 8002a56:	4d91      	ldr	r5, [pc, #580]	; (8002c9c <TestThread+0x2ac>)
 8002a58:	f7ff feda 	bl	8002810 <test_println>
 8002a5c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	6803      	ldr	r3, [r0, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a6a:	2900      	cmp	r1, #0
 8002a6c:	d1f7      	bne.n	8002a5e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8002a6e:	488c      	ldr	r0, [pc, #560]	; (8002ca0 <TestThread+0x2b0>)
 8002a70:	4d8c      	ldr	r5, [pc, #560]	; (8002ca4 <TestThread+0x2b4>)
 8002a72:	f7ff fecd 	bl	8002810 <test_println>
 8002a76:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a78:	6820      	ldr	r0, [r4, #0]
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d1f7      	bne.n	8002a78 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8002a88:	4887      	ldr	r0, [pc, #540]	; (8002ca8 <TestThread+0x2b8>)
 8002a8a:	4d88      	ldr	r5, [pc, #544]	; (8002cac <TestThread+0x2bc>)
 8002a8c:	f7ff fec0 	bl	8002810 <test_println>
 8002a90:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002a9a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002a9e:	2900      	cmp	r1, #0
 8002aa0:	d1f7      	bne.n	8002a92 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8002aa2:	4883      	ldr	r0, [pc, #524]	; (8002cb0 <TestThread+0x2c0>)
 8002aa4:	4d83      	ldr	r5, [pc, #524]	; (8002cb4 <TestThread+0x2c4>)
 8002aa6:	f7ff feb3 	bl	8002810 <test_println>
 8002aaa:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	6803      	ldr	r3, [r0, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002ab4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	d1f7      	bne.n	8002aac <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8002abc:	487e      	ldr	r0, [pc, #504]	; (8002cb8 <TestThread+0x2c8>)
 8002abe:	4d7f      	ldr	r5, [pc, #508]	; (8002cbc <TestThread+0x2cc>)
 8002ac0:	f7ff fea6 	bl	8002810 <test_println>
 8002ac4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002ac6:	6820      	ldr	r0, [r4, #0]
 8002ac8:	6803      	ldr	r3, [r0, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002ace:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d1f7      	bne.n	8002ac6 <TestThread+0xd6>
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	; (8002cc0 <TestThread+0x2d0>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002ad8:	487a      	ldr	r0, [pc, #488]	; (8002cc4 <TestThread+0x2d4>)
 8002ada:	9302      	str	r3, [sp, #8]
#endif
  test_println("");

  test_global_fail = FALSE;
 8002adc:	4b7a      	ldr	r3, [pc, #488]	; (8002cc8 <TestThread+0x2d8>)
 8002ade:	9101      	str	r1, [sp, #4]
 8002ae0:	9303      	str	r3, [sp, #12]
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002ae2:	f7ff fe95 	bl	8002810 <test_println>
#endif
  test_println("");
 8002ae6:	4865      	ldr	r0, [pc, #404]	; (8002c7c <TestThread+0x28c>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002ae8:	f8df b188 	ldr.w	fp, [pc, #392]	; 8002c74 <TestThread+0x284>
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  test_global_fail = FALSE;
 8002aec:	4f77      	ldr	r7, [pc, #476]	; (8002ccc <TestThread+0x2dc>)
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");
 8002aee:	f7ff fe8f 	bl	8002810 <test_println>

  test_global_fail = FALSE;
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <TestThread+0x2e0>)
 8002af4:	9901      	ldr	r1, [sp, #4]
 8002af6:	7019      	strb	r1, [r3, #0]
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	3f04      	subs	r7, #4
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002b00:	f04f 0800 	mov.w	r8, #0

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8002b04:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8087 	beq.w	8002c1c <TestThread+0x22c>
      print_line();
 8002b0e:	4d71      	ldr	r5, [pc, #452]	; (8002cd4 <TestThread+0x2e4>)
 8002b10:	f7ff fe1e 	bl	8002750 <print_line>
 8002b14:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	6803      	ldr	r3, [r0, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002b1e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002b22:	2900      	cmp	r1, #0
 8002b24:	d1f7      	bne.n	8002b16 <TestThread+0x126>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8002b26:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(j + 1);
 8002b28:	4d6b      	ldr	r5, [pc, #428]	; (8002cd8 <TestThread+0x2e8>)
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8002b2a:	f7ff fe29 	bl	8002780 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002b2e:	f8db 0000 	ldr.w	r0, [fp]
 8002b32:	6803      	ldr	r3, [r0, #0]
 8002b34:	212e      	movs	r1, #46	; 0x2e
 8002b36:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002b38:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002b3c:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002b3e:	4640      	mov	r0, r8
 8002b40:	f7ff fe1e 	bl	8002780 <test_printn>
 8002b44:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002b4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002b52:	2900      	cmp	r1, #0
 8002b54:	d1f7      	bne.n	8002b46 <TestThread+0x156>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002b5a:	7829      	ldrb	r1, [r5, #0]
 8002b5c:	b139      	cbz	r1, 8002b6e <TestThread+0x17e>
    chSequentialStreamPut(chp, *msgp++);
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002b66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d1f7      	bne.n	8002b5e <TestThread+0x16e>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8002b6e:	485b      	ldr	r0, [pc, #364]	; (8002cdc <TestThread+0x2ec>)
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002b70:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8002d04 <TestThread+0x314>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002b74:	4e5a      	ldr	r6, [pc, #360]	; (8002ce0 <TestThread+0x2f0>)
 8002b76:	4d5b      	ldr	r5, [pc, #364]	; (8002ce4 <TestThread+0x2f4>)
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8002b78:	f7ff fe4a 	bl	8002810 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8002b7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b80:	f7fd ff6e 	bl	8000a60 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <TestThread+0x2f8>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8002b86:	f8d7 a000 	ldr.w	sl, [r7]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002b8a:	6035      	str	r5, [r6, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002b8c:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	60d3      	str	r3, [r2, #12]
 8002b96:	6113      	str	r3, [r2, #16]

  if (tcp->setup != NULL)
 8002b98:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8002b9c:	f889 3000 	strb.w	r3, [r9]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8002ba0:	b102      	cbz	r2, 8002ba4 <TestThread+0x1b4>
    tcp->setup();
 8002ba2:	4790      	blx	r2
  tcp->execute();
 8002ba4:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002ba8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8002baa:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002bae:	b103      	cbz	r3, 8002bb2 <TestThread+0x1c2>
    tcp->teardown();
 8002bb0:	4798      	blx	r3

  test_wait_threads();
 8002bb2:	f7ff fecd 	bl	8002950 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8002bb6:	f899 3000 	ldrb.w	r3, [r9]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d038      	beq.n	8002c30 <TestThread+0x240>
 8002bbe:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8002d08 <TestThread+0x318>
 8002bc2:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002bc4:	6820      	ldr	r0, [r4, #0]
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002bcc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d1f7      	bne.n	8002bc4 <TestThread+0x1d4>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8002bd4:	4b45      	ldr	r3, [pc, #276]	; (8002cec <TestThread+0x2fc>)
 8002bd6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8002d0c <TestThread+0x31c>
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f7ff fdd0 	bl	8002780 <test_printn>
 8002be0:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	6803      	ldr	r3, [r0, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002bea:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	d1f7      	bne.n	8002be2 <TestThread+0x1f2>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002bf2:	6833      	ldr	r3, [r6, #0]
 8002bf4:	42ab      	cmp	r3, r5
 8002bf6:	d909      	bls.n	8002c0c <TestThread+0x21c>
 8002bf8:	4d3a      	ldr	r5, [pc, #232]	; (8002ce4 <TestThread+0x2f4>)
    chSequentialStreamPut(chp, *cp++);
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002c00:	6803      	ldr	r3, [r0, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002c06:	6833      	ldr	r3, [r6, #0]
 8002c08:	429d      	cmp	r5, r3
 8002c0a:	d3f6      	bcc.n	8002bfa <TestThread+0x20a>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8002c0c:	4838      	ldr	r0, [pc, #224]	; (8002cf0 <TestThread+0x300>)
 8002c0e:	f7ff fdff 	bl	8002810 <test_println>

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8002c12:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f af79 	bne.w	8002b0e <TestThread+0x11e>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8002c1c:	9b03      	ldr	r3, [sp, #12]
 8002c1e:	b15b      	cbz	r3, 8002c38 <TestThread+0x248>
 8002c20:	461f      	mov	r7, r3
 8002c22:	9b02      	ldr	r3, [sp, #8]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002c2a:	9303      	str	r3, [sp, #12]
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	e763      	b.n	8002af8 <TestThread+0x108>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8002c30:	4830      	ldr	r0, [pc, #192]	; (8002cf4 <TestThread+0x304>)
 8002c32:	f7ff fded 	bl	8002810 <test_println>
 8002c36:	e765      	b.n	8002b04 <TestThread+0x114>
      j++;
    }
    i++;
  }
  print_line();
 8002c38:	f7ff fd8a 	bl	8002750 <print_line>
  test_println("");
 8002c3c:	4d2e      	ldr	r5, [pc, #184]	; (8002cf8 <TestThread+0x308>)
 8002c3e:	480f      	ldr	r0, [pc, #60]	; (8002c7c <TestThread+0x28c>)
 8002c40:	f7ff fde6 	bl	8002810 <test_println>
 8002c44:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002c46:	6820      	ldr	r0, [r4, #0]
 8002c48:	6803      	ldr	r3, [r0, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002c4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002c52:	2900      	cmp	r1, #0
 8002c54:	d1f7      	bne.n	8002c46 <TestThread+0x256>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <TestThread+0x2e0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b92b      	cbnz	r3, 8002c68 <TestThread+0x278>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002c5c:	4827      	ldr	r0, [pc, #156]	; (8002cfc <TestThread+0x30c>)
}
 8002c5e:	b005      	add	sp, #20
 8002c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002c64:	f7ff bdd4 	b.w	8002810 <test_println>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8002c68:	4825      	ldr	r0, [pc, #148]	; (8002d00 <TestThread+0x310>)
  else
    test_println("SUCCESS");
}
 8002c6a:	b005      	add	sp, #20
 8002c6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002c70:	f7ff bdce 	b.w	8002810 <test_println>
 8002c74:	20001474 	.word	0x20001474
 8002c78:	080062c4 	.word	0x080062c4
 8002c7c:	08006c2c 	.word	0x08006c2c
 8002c80:	080063a4 	.word	0x080063a4
 8002c84:	080063c0 	.word	0x080063c0
 8002c88:	080063e8 	.word	0x080063e8
 8002c8c:	080062d8 	.word	0x080062d8
 8002c90:	080063f0 	.word	0x080063f0
 8002c94:	080062ec 	.word	0x080062ec
 8002c98:	08006408 	.word	0x08006408
 8002c9c:	08006300 	.word	0x08006300
 8002ca0:	08006414 	.word	0x08006414
 8002ca4:	08006314 	.word	0x08006314
 8002ca8:	08006420 	.word	0x08006420
 8002cac:	08006328 	.word	0x08006328
 8002cb0:	0800642c 	.word	0x0800642c
 8002cb4:	0800633c 	.word	0x0800633c
 8002cb8:	08006444 	.word	0x08006444
 8002cbc:	08006350 	.word	0x08006350
 8002cc0:	08006284 	.word	0x08006284
 8002cc4:	08006474 	.word	0x08006474
 8002cc8:	080064e0 	.word	0x080064e0
 8002ccc:	08006ad0 	.word	0x08006ad0
 8002cd0:	20001488 	.word	0x20001488
 8002cd4:	08006364 	.word	0x08006364
 8002cd8:	08006374 	.word	0x08006374
 8002cdc:	080063c4 	.word	0x080063c4
 8002ce0:	20001448 	.word	0x20001448
 8002ce4:	20001478 	.word	0x20001478
 8002ce8:	20001460 	.word	0x20001460
 8002cec:	20001440 	.word	0x20001440
 8002cf0:	080063c8 	.word	0x080063c8
 8002cf4:	080063cc 	.word	0x080063cc
 8002cf8:	08006394 	.word	0x08006394
 8002cfc:	080063d8 	.word	0x080063d8
 8002d00:	080063e0 	.word	0x080063e0
 8002d04:	20001444 	.word	0x20001444
 8002d08:	08006378 	.word	0x08006378
 8002d0c:	08006390 	.word	0x08006390

08002d10 <thd1_execute>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	4f27      	ldr	r7, [pc, #156]	; (8002db0 <thd1_execute+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002d14:	4e27      	ldr	r6, [pc, #156]	; (8002db4 <thd1_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4d27      	ldr	r5, [pc, #156]	; (8002db8 <thd1_execute+0xa8>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <thd1_execute+0xac>)
 8002d1e:	6830      	ldr	r0, [r6, #0]
 8002d20:	4c27      	ldr	r4, [pc, #156]	; (8002dc0 <thd1_execute+0xb0>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8002d22:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002d24:	3a05      	subs	r2, #5
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	f7fd fe27 	bl	8000980 <chThdCreateStatic>
 8002d32:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002d34:	4923      	ldr	r1, [pc, #140]	; (8002dc4 <thd1_execute+0xb4>)
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	6873      	ldr	r3, [r6, #4]
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002d3a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002d3c:	9100      	str	r1, [sp, #0]
 8002d3e:	3a04      	subs	r2, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d46:	462b      	mov	r3, r5
 8002d48:	f7fd fe1a 	bl	8000980 <chThdCreateStatic>
 8002d4c:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002d4e:	68b3      	ldr	r3, [r6, #8]
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	491d      	ldr	r1, [pc, #116]	; (8002dc8 <thd1_execute+0xb8>)
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002d54:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002d56:	9100      	str	r1, [sp, #0]
 8002d58:	3a03      	subs	r2, #3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d60:	462b      	mov	r3, r5
 8002d62:	f7fd fe0d 	bl	8000980 <chThdCreateStatic>
 8002d66:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002d68:	68f3      	ldr	r3, [r6, #12]
 8002d6a:	6892      	ldr	r2, [r2, #8]
 8002d6c:	4917      	ldr	r1, [pc, #92]	; (8002dcc <thd1_execute+0xbc>)

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002d6e:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002d70:	9100      	str	r1, [sp, #0]
 8002d72:	3a02      	subs	r2, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	f7fd fe00 	bl	8000980 <chThdCreateStatic>
 8002d80:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002d82:	6933      	ldr	r3, [r6, #16]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	4912      	ldr	r1, [pc, #72]	; (8002dd0 <thd1_execute+0xc0>)
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002d88:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002d8a:	3a01      	subs	r2, #1
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d94:	462b      	mov	r3, r5
 8002d96:	f7fd fdf3 	bl	8000980 <chThdCreateStatic>
 8002d9a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8002d9c:	f7ff fdd8 	bl	8002950 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <thd1_execute+0xc4>)
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	b003      	add	sp, #12
 8002da6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002daa:	f7ff bd79 	b.w	80028a0 <_test_assert_sequence>
 8002dae:	bf00      	nop
 8002db0:	200008b8 	.word	0x200008b8
 8002db4:	08006260 	.word	0x08006260
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08006514 	.word	0x08006514
 8002dc0:	20001460 	.word	0x20001460
 8002dc4:	08006500 	.word	0x08006500
 8002dc8:	08006504 	.word	0x08006504
 8002dcc:	08006508 	.word	0x08006508
 8002dd0:	0800650c 	.word	0x0800650c
 8002dd4:	08006510 	.word	0x08006510
 8002dd8:	f3af 8000 	nop.w
 8002ddc:	f3af 8000 	nop.w

08002de0 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8002de0:	7800      	ldrb	r0, [r0, #0]
 8002de2:	f7ff bd35 	b.w	8002850 <test_emit_token>
 8002de6:	bf00      	nop
 8002de8:	f3af 8000 	nop.w
 8002dec:	f3af 8000 	nop.w

08002df0 <thd2_execute>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002df2:	4f2b      	ldr	r7, [pc, #172]	; (8002ea0 <thd2_execute+0xb0>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002df4:	4e2b      	ldr	r6, [pc, #172]	; (8002ea4 <thd2_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4d2b      	ldr	r5, [pc, #172]	; (8002ea8 <thd2_execute+0xb8>)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <thd2_execute+0xbc>)
 8002dfe:	6870      	ldr	r0, [r6, #4]
 8002e00:	4c2b      	ldr	r4, [pc, #172]	; (8002eb0 <thd2_execute+0xc0>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002e02:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002e04:	3a04      	subs	r2, #4
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	f7fd fdb7 	bl	8000980 <chThdCreateStatic>
 8002e12:	69bb      	ldr	r3, [r7, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002e14:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <thd2_execute+0xc4>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	6833      	ldr	r3, [r6, #0]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002e1a:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002e1c:	9100      	str	r1, [sp, #0]
 8002e1e:	3a05      	subs	r2, #5
 8002e20:	4618      	mov	r0, r3
 8002e22:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002e26:	462b      	mov	r3, r5
 8002e28:	f7fd fdaa 	bl	8000980 <chThdCreateStatic>
 8002e2c:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002e2e:	6933      	ldr	r3, [r6, #16]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	4921      	ldr	r1, [pc, #132]	; (8002eb8 <thd2_execute+0xc8>)
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002e34:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002e36:	9100      	str	r1, [sp, #0]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002e40:	462b      	mov	r3, r5
 8002e42:	f7fd fd9d 	bl	8000980 <chThdCreateStatic>
 8002e46:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002e48:	68f3      	ldr	r3, [r6, #12]
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	491b      	ldr	r1, [pc, #108]	; (8002ebc <thd2_execute+0xcc>)

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002e4e:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002e50:	9100      	str	r1, [sp, #0]
 8002e52:	3a02      	subs	r2, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	f7fd fd90 	bl	8000980 <chThdCreateStatic>
 8002e60:	2320      	movs	r3, #32
 8002e62:	60e0      	str	r0, [r4, #12]
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002e6a:	68b0      	ldr	r0, [r6, #8]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <thd2_execute+0xd0>)
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	3a03      	subs	r2, #3
 8002e74:	462b      	mov	r3, r5
 8002e76:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002e7a:	f7fd fd59 	bl	8000930 <chThdCreateI>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60a0      	str	r0, [r4, #8]
 8002e82:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  chThdStart(threads[2]);
 8002e86:	68a0      	ldr	r0, [r4, #8]
 8002e88:	f7fd fdb2 	bl	80009f0 <chThdStart>
  test_wait_threads();
 8002e8c:	f7ff fd60 	bl	8002950 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <thd2_execute+0xd4>)
 8002e92:	2001      	movs	r0, #1
}
 8002e94:	b003      	add	sp, #12
 8002e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002e9a:	f7ff bd01 	b.w	80028a0 <_test_assert_sequence>
 8002e9e:	bf00      	nop
 8002ea0:	200008b8 	.word	0x200008b8
 8002ea4:	08006260 	.word	0x08006260
 8002ea8:	08002de1 	.word	0x08002de1
 8002eac:	08006500 	.word	0x08006500
 8002eb0:	20001460 	.word	0x20001460
 8002eb4:	08006514 	.word	0x08006514
 8002eb8:	0800650c 	.word	0x0800650c
 8002ebc:	08006508 	.word	0x08006508
 8002ec0:	08006504 	.word	0x08006504
 8002ec4:	08006510 	.word	0x08006510
 8002ec8:	f3af 8000 	nop.w
 8002ecc:	f3af 8000 	nop.w

08002ed0 <thd3_execute>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002ed2:	4e49      	ldr	r6, [pc, #292]	; (8002ff8 <thd3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002ed4:	69b3      	ldr	r3, [r6, #24]
 8002ed6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8002ed8:	1c65      	adds	r5, r4, #1
 8002eda:	4628      	mov	r0, r5
 8002edc:	f7fd fd98 	bl	8000a10 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8002ee0:	1b01      	subs	r1, r0, r4
 8002ee2:	fab1 f181 	clz	r1, r1

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8002ee6:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8002ee8:	0949      	lsrs	r1, r1, #5
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7ff fcc0 	bl	8002870 <_test_assert>
 8002ef0:	b100      	cbz	r0, 8002ef4 <thd3_execute+0x24>
 8002ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef4:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	1b49      	subs	r1, r1, r5
 8002efa:	fab1 f181 	clz	r1, r1
 8002efe:	2002      	movs	r0, #2
 8002f00:	0949      	lsrs	r1, r1, #5
 8002f02:	f7ff fcb5 	bl	8002870 <_test_assert>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d1f3      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	f7fd fd80 	bl	8000a10 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8002f10:	1a29      	subs	r1, r5, r0
 8002f12:	fab1 f181 	clz	r1, r1
 8002f16:	0949      	lsrs	r1, r1, #5
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f7ff fca9 	bl	8002870 <_test_assert>
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d1e7      	bne.n	8002ef2 <thd3_execute+0x22>
 8002f22:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	1b09      	subs	r1, r1, r4
 8002f28:	fab1 f181 	clz	r1, r1
 8002f2c:	2004      	movs	r0, #4
 8002f2e:	0949      	lsrs	r1, r1, #5
 8002f30:	f7ff fc9e 	bl	8002870 <_test_assert>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d1dc      	bne.n	8002ef2 <thd3_execute+0x22>
 8002f38:	2320      	movs	r3, #32
 8002f3a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002f3e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8002f40:	6893      	ldr	r3, [r2, #8]
 8002f42:	3302      	adds	r3, #2
 8002f44:	6093      	str	r3, [r2, #8]
 8002f46:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002f4a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	1ca7      	adds	r7, r4, #2
 8002f50:	1bc9      	subs	r1, r1, r7
 8002f52:	fab1 f181 	clz	r1, r1
 8002f56:	0949      	lsrs	r1, r1, #5
 8002f58:	2005      	movs	r0, #5
 8002f5a:	f7ff fc89 	bl	8002870 <_test_assert>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d1c7      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8002f62:	4628      	mov	r0, r5
 8002f64:	f7fd fd54 	bl	8000a10 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8002f68:	1b01      	subs	r1, r0, r4
 8002f6a:	fab1 f181 	clz	r1, r1
 8002f6e:	0949      	lsrs	r1, r1, #5
 8002f70:	2006      	movs	r0, #6
 8002f72:	f7ff fc7d 	bl	8002870 <_test_assert>
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d1bb      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8002f7a:	69b3      	ldr	r3, [r6, #24]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	1bc9      	subs	r1, r1, r7
 8002f80:	fab1 f181 	clz	r1, r1
 8002f84:	2007      	movs	r0, #7
 8002f86:	0949      	lsrs	r1, r1, #5
 8002f88:	f7ff fc72 	bl	8002870 <_test_assert>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1b0      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8002f90:	69b3      	ldr	r3, [r6, #24]
 8002f92:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f94:	1b49      	subs	r1, r1, r5
 8002f96:	fab1 f181 	clz	r1, r1
 8002f9a:	2008      	movs	r0, #8
 8002f9c:	0949      	lsrs	r1, r1, #5
 8002f9e:	f7ff fc67 	bl	8002870 <_test_assert>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d1a5      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8002fa6:	1ce7      	adds	r7, r4, #3
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f7fd fd31 	bl	8000a10 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8002fae:	1a28      	subs	r0, r5, r0
 8002fb0:	4241      	negs	r1, r0
 8002fb2:	4141      	adcs	r1, r0
 8002fb4:	2009      	movs	r0, #9
 8002fb6:	f7ff fc5b 	bl	8002870 <_test_assert>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d199      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8002fbe:	69b3      	ldr	r3, [r6, #24]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	1bca      	subs	r2, r1, r7
 8002fc4:	4251      	negs	r1, r2
 8002fc6:	4151      	adcs	r1, r2
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f7ff fc51 	bl	8002870 <_test_assert>
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d18f      	bne.n	8002ef2 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8002fd2:	69b3      	ldr	r3, [r6, #24]
 8002fd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fd6:	1bcb      	subs	r3, r1, r7
 8002fd8:	4259      	negs	r1, r3
 8002fda:	4159      	adcs	r1, r3
 8002fdc:	200b      	movs	r0, #11
 8002fde:	f7ff fc47 	bl	8002870 <_test_assert>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d185      	bne.n	8002ef2 <thd3_execute+0x22>
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002fec:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8002fee:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8002ff0:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002ff2:	f380 8811 	msr	BASEPRI, r0
 8002ff6:	e77c      	b.n	8002ef2 <thd3_execute+0x22>
 8002ff8:	200008b8 	.word	0x200008b8
 8002ffc:	f3af 8000 	nop.w

08003000 <thd4_execute>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8003000:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8003002:	f7ff fcbd 	bl	8002980 <test_wait_tick>
 8003006:	2620      	movs	r6, #32
 8003008:	f386 8811 	msr	BASEPRI, r6
 800300c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003010:	2300      	movs	r3, #0
 8003012:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003014:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8003018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800301c:	f7fd fd20 	bl	8000a60 <chThdSleep>
  test_assert_time_window(1,
 8003020:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8003024:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8003028:	2001      	movs	r0, #1
 800302a:	f7ff fc61 	bl	80028f0 <_test_assert_time_window>
 800302e:	b100      	cbz	r0, 8003032 <thd4_execute+0x32>
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	f386 8811 	msr	BASEPRI, r6
 8003036:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003038:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 800303c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003040:	f7fd fd0e 	bl	8000a60 <chThdSleep>
  test_assert_time_window(2,
 8003044:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8003048:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 800304c:	2002      	movs	r0, #2
 800304e:	f7ff fc4f 	bl	80028f0 <_test_assert_time_window>
 8003052:	2800      	cmp	r0, #0
 8003054:	d1ec      	bne.n	8003030 <thd4_execute+0x30>
 8003056:	f386 8811 	msr	BASEPRI, r6
 800305a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800305c:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8003060:	f242 7010 	movw	r0, #10000	; 0x2710
 8003064:	f7fd fcfc 	bl	8000a60 <chThdSleep>
  test_assert_time_window(3,
 8003068:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
 800306c:	4611      	mov	r1, r2
 800306e:	3110      	adds	r1, #16
 8003070:	3213      	adds	r2, #19
 8003072:	2003      	movs	r0, #3
 8003074:	f7ff fc3c 	bl	80028f0 <_test_assert_time_window>
 8003078:	2800      	cmp	r0, #0
 800307a:	d1d9      	bne.n	8003030 <thd4_execute+0x30>
 800307c:	f386 8811 	msr	BASEPRI, r6
 8003080:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003082:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8003086:	f504 757a 	add.w	r5, r4, #1000	; 0x3e8
  chThdSleepUntil(time);
 800308a:	4628      	mov	r0, r5
 800308c:	f7fd fcf8 	bl	8000a80 <chThdSleepUntil>
  test_assert_time_window(4,
 8003090:	4629      	mov	r1, r5
 8003092:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8003096:	2004      	movs	r0, #4
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8003098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800309c:	f7ff bc28 	b.w	80028f0 <_test_assert_time_window>

080030a0 <sem1_execute>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80030a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a4:	4e48      	ldr	r6, [pc, #288]	; (80031c8 <sem1_execute+0x128>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80030a6:	4f49      	ldr	r7, [pc, #292]	; (80031cc <sem1_execute+0x12c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80030a8:	69b3      	ldr	r3, [r6, #24]
 80030aa:	f8d7 8000 	ldr.w	r8, [r7]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80031f0 <sem1_execute+0x150>
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <sem1_execute+0x130>)
 80030b6:	4d47      	ldr	r5, [pc, #284]	; (80031d4 <sem1_execute+0x134>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  chSemSignal(&sem1);
 80030b8:	4c47      	ldr	r4, [pc, #284]	; (80031d8 <sem1_execute+0x138>)

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80030ba:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80030bc:	3205      	adds	r2, #5
 80030be:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80030c2:	f8cd 9000 	str.w	r9, [sp]
 80030c6:	4640      	mov	r0, r8
 80030c8:	f7fd fc5a 	bl	8000980 <chThdCreateStatic>
 80030cc:	69b3      	ldr	r3, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <sem1_execute+0x13c>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80030d4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80030d6:	3201      	adds	r2, #1
 80030d8:	4608      	mov	r0, r1
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <sem1_execute+0x130>)
 80030e2:	f7fd fc4d 	bl	8000980 <chThdCreateStatic>
 80030e6:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b3c      	ldr	r3, [pc, #240]	; (80031e0 <sem1_execute+0x140>)
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80030ee:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80030f0:	3203      	adds	r2, #3
 80030f2:	4608      	mov	r0, r1
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80030fa:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <sem1_execute+0x130>)
 80030fc:	f7fd fc40 	bl	8000980 <chThdCreateStatic>
 8003100:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <sem1_execute+0x144>)

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003108:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800310a:	3204      	adds	r2, #4
 800310c:	4608      	mov	r0, r1
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <sem1_execute+0x130>)
 8003116:	f7fd fc33 	bl	8000980 <chThdCreateStatic>
 800311a:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800311c:	6939      	ldr	r1, [r7, #16]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <sem1_execute+0x148>)
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003122:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003124:	3202      	adds	r2, #2
 8003126:	4608      	mov	r0, r1
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <sem1_execute+0x130>)
 8003130:	f7fd fc26 	bl	8000980 <chThdCreateStatic>
 8003134:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8003136:	4620      	mov	r0, r4
 8003138:	f7fd feea 	bl	8000f10 <chSemSignal>
  chSemSignal(&sem1);
 800313c:	4620      	mov	r0, r4
 800313e:	f7fd fee7 	bl	8000f10 <chSemSignal>
  chSemSignal(&sem1);
 8003142:	4620      	mov	r0, r4
 8003144:	f7fd fee4 	bl	8000f10 <chSemSignal>
  chSemSignal(&sem1);
 8003148:	4620      	mov	r0, r4
 800314a:	f7fd fee1 	bl	8000f10 <chSemSignal>
  chSemSignal(&sem1);
 800314e:	4620      	mov	r0, r4
 8003150:	f7fd fede 	bl	8000f10 <chSemSignal>
  test_wait_threads();
 8003154:	f7ff fbfc 	bl	8002950 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8003158:	4924      	ldr	r1, [pc, #144]	; (80031ec <sem1_execute+0x14c>)
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff fba0 	bl	80028a0 <_test_assert_sequence>
 8003160:	b110      	cbz	r0, 8003168 <sem1_execute+0xc8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8003162:	b003      	add	sp, #12
 8003164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003168:	69b2      	ldr	r2, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <sem1_execute+0x130>)
 800316c:	6892      	ldr	r2, [r2, #8]
 800316e:	f8cd 9000 	str.w	r9, [sp]
 8003172:	4607      	mov	r7, r0
 8003174:	3205      	adds	r2, #5
 8003176:	4640      	mov	r0, r8
 8003178:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800317c:	f7fd fc00 	bl	8000980 <chThdCreateStatic>
 8003180:	2620      	movs	r6, #32
 8003182:	6028      	str	r0, [r5, #0]
 8003184:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  chSemAddCounterI(&sem1, 2);
 8003188:	2102      	movs	r1, #2
 800318a:	4620      	mov	r0, r4
 800318c:	f7fd fef0 	bl	8000f70 <chSemAddCounterI>
  chSchRescheduleS();
 8003190:	f7fd fb96 	bl	80008c0 <chSchRescheduleS>
 8003194:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_wait_threads();
 8003198:	f7ff fbda 	bl	8002950 <test_wait_threads>
 800319c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 80031a0:	68a1      	ldr	r1, [r4, #8]
 80031a2:	f1a1 0101 	sub.w	r1, r1, #1
 80031a6:	fab1 f181 	clz	r1, r1
 80031aa:	2002      	movs	r0, #2
 80031ac:	0949      	lsrs	r1, r1, #5
 80031ae:	f7ff fb5f 	bl	8002870 <_test_assert>
 80031b2:	b920      	cbnz	r0, 80031be <sem1_execute+0x11e>
 80031b4:	f380 8811 	msr	BASEPRI, r0
}
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031be:	f387 8811 	msr	BASEPRI, r7
 80031c2:	b003      	add	sp, #12
 80031c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031c8:	200008b8 	.word	0x200008b8
 80031cc:	08006260 	.word	0x08006260
 80031d0:	08003221 	.word	0x08003221
 80031d4:	20001460 	.word	0x20001460
 80031d8:	20000800 	.word	0x20000800
 80031dc:	08006508 	.word	0x08006508
 80031e0:	08006504 	.word	0x08006504
 80031e4:	08006500 	.word	0x08006500
 80031e8:	08006514 	.word	0x08006514
 80031ec:	08006510 	.word	0x08006510
 80031f0:	0800650c 	.word	0x0800650c
 80031f4:	f3af 8000 	nop.w
 80031f8:	f3af 8000 	nop.w
 80031fc:	f3af 8000 	nop.w

08003200 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8003200:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8003202:	4c04      	ldr	r4, [pc, #16]	; (8003214 <thread3+0x14>)
 8003204:	4620      	mov	r0, r4
 8003206:	f7fd fe13 	bl	8000e30 <chSemWait>
  chSemSignal(&sem1);
 800320a:	4620      	mov	r0, r4
}
 800320c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8003210:	f7fd be7e 	b.w	8000f10 <chSemSignal>
 8003214:	20000800 	.word	0x20000800
 8003218:	f3af 8000 	nop.w
 800321c:	f3af 8000 	nop.w

08003220 <thread1>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8003220:	b510      	push	{r4, lr}
 8003222:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8003224:	4803      	ldr	r0, [pc, #12]	; (8003234 <thread1+0x14>)
 8003226:	f7fd fe03 	bl	8000e30 <chSemWait>
  test_emit_token(*(char *)p);
 800322a:	7820      	ldrb	r0, [r4, #0]
}
 800322c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8003230:	f7ff bb0e 	b.w	8002850 <test_emit_token>
 8003234:	20000800 	.word	0x20000800
 8003238:	f3af 8000 	nop.w
 800323c:	f3af 8000 	nop.w

08003240 <sem3_setup>:
 * correct after each operation.
 */

static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
 8003240:	2100      	movs	r1, #0
 8003242:	4801      	ldr	r0, [pc, #4]	; (8003248 <sem3_setup+0x8>)
 8003244:	f7fd bdc4 	b.w	8000dd0 <chSemObjectInit>
 8003248:	20000800 	.word	0x20000800
 800324c:	f3af 8000 	nop.w

08003250 <sem2_setup>:
 8003250:	f7ff bff6 	b.w	8003240 <sem3_setup>
 8003254:	f3af 8000 	nop.w
 8003258:	f3af 8000 	nop.w
 800325c:	f3af 8000 	nop.w

08003260 <sem1_setup>:
 8003260:	f7ff bfee 	b.w	8003240 <sem3_setup>
 8003264:	f3af 8000 	nop.w
 8003268:	f3af 8000 	nop.w
 800326c:	f3af 8000 	nop.w

08003270 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8003270:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8003272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003276:	f7fd fbf3 	bl	8000a60 <chThdSleep>
 800327a:	2320      	movs	r3, #32
 800327c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <thread2+0x24>)
 8003282:	f7fd fe65 	bl	8000f50 <chSemSignalI>
  chSchRescheduleS();
 8003286:	f7fd fb1b 	bl	80008c0 <chSchRescheduleS>
 800328a:	2300      	movs	r3, #0
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	bd08      	pop	{r3, pc}
 8003292:	bf00      	nop
 8003294:	20000800 	.word	0x20000800
 8003298:	f3af 8000 	nop.w
 800329c:	f3af 8000 	nop.w

080032a0 <sem2_execute>:
  chSysUnlock();
}

static void sem2_execute(void) {
 80032a0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80032a2:	4c4e      	ldr	r4, [pc, #312]	; (80033dc <sem2_execute+0x13c>)
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 80032a4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80032a6:	2100      	movs	r1, #0
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7fd fde9 	bl	8000e80 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80032ae:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 80032b2:	fab1 f181 	clz	r1, r1
 80032b6:	0949      	lsrs	r1, r1, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7ff fad9 	bl	8002870 <_test_assert>
 80032be:	b108      	cbz	r0, 80032c4 <sem2_execute+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80032c0:	b002      	add	sp, #8
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80032c4:	6821      	ldr	r1, [r4, #0]
 80032c6:	1b09      	subs	r1, r1, r4
 80032c8:	fab1 f181 	clz	r1, r1
 80032cc:	2002      	movs	r0, #2
 80032ce:	0949      	lsrs	r1, r1, #5
 80032d0:	f7ff face 	bl	8002870 <_test_assert>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d1f3      	bne.n	80032c0 <sem2_execute+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 80032d8:	68a1      	ldr	r1, [r4, #8]
 80032da:	fab1 f181 	clz	r1, r1
 80032de:	0949      	lsrs	r1, r1, #5
 80032e0:	2003      	movs	r0, #3
 80032e2:	f7ff fac5 	bl	8002870 <_test_assert>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d1ea      	bne.n	80032c0 <sem2_execute+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <sem2_execute+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80032ec:	4a3d      	ldr	r2, [pc, #244]	; (80033e4 <sem2_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	6811      	ldr	r1, [r2, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <sem2_execute+0x148>)
 80032f6:	9000      	str	r0, [sp, #0]
 80032f8:	3a01      	subs	r2, #1
 80032fa:	4608      	mov	r0, r1
 80032fc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003300:	f7fd fb3e 	bl	8000980 <chThdCreateStatic>
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <sem2_execute+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8003306:	f241 3188 	movw	r1, #5000	; 0x1388
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800330a:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800330c:	4620      	mov	r0, r4
 800330e:	f7fd fdb7 	bl	8000e80 <chSemWaitTimeout>
 8003312:	4605      	mov	r5, r0
  test_wait_threads();
 8003314:	f7ff fb1c 	bl	8002950 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8003318:	fab5 f185 	clz	r1, r5
 800331c:	0949      	lsrs	r1, r1, #5
 800331e:	2004      	movs	r0, #4
 8003320:	f7ff faa6 	bl	8002870 <_test_assert>
 8003324:	2800      	cmp	r0, #0
 8003326:	d1cb      	bne.n	80032c0 <sem2_execute+0x20>
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8003328:	6821      	ldr	r1, [r4, #0]
 800332a:	1b09      	subs	r1, r1, r4
 800332c:	fab1 f181 	clz	r1, r1
 8003330:	2005      	movs	r0, #5
 8003332:	0949      	lsrs	r1, r1, #5
 8003334:	f7ff fa9c 	bl	8002870 <_test_assert>
 8003338:	2800      	cmp	r0, #0
 800333a:	d1c1      	bne.n	80032c0 <sem2_execute+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 800333c:	68a1      	ldr	r1, [r4, #8]
 800333e:	fab1 f181 	clz	r1, r1
 8003342:	0949      	lsrs	r1, r1, #5
 8003344:	2006      	movs	r0, #6
 8003346:	f7ff fa93 	bl	8002870 <_test_assert>
 800334a:	4605      	mov	r5, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	d1b7      	bne.n	80032c0 <sem2_execute+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8003350:	f7ff fb16 	bl	8002980 <test_wait_tick>
 8003354:	2320      	movs	r3, #32
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800335e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8003360:	f385 8811 	msr	BASEPRI, r5
 8003364:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8003366:	4628      	mov	r0, r5
 8003368:	f7ff fa72 	bl	8002850 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 800336c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003370:	481a      	ldr	r0, [pc, #104]	; (80033dc <sem2_execute+0x13c>)
 8003372:	f7fd fd85 	bl	8000e80 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8003376:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 800337a:	fab1 f181 	clz	r1, r1
 800337e:	0949      	lsrs	r1, r1, #5
 8003380:	2007      	movs	r0, #7
 8003382:	f7ff fa75 	bl	8002870 <_test_assert>
 8003386:	2800      	cmp	r0, #0
 8003388:	d19a      	bne.n	80032c0 <sem2_execute+0x20>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 800338a:	6821      	ldr	r1, [r4, #0]
 800338c:	1b09      	subs	r1, r1, r4
 800338e:	fab1 f181 	clz	r1, r1
 8003392:	2008      	movs	r0, #8
 8003394:	0949      	lsrs	r1, r1, #5
 8003396:	f7ff fa6b 	bl	8002870 <_test_assert>
 800339a:	2800      	cmp	r0, #0
 800339c:	d190      	bne.n	80032c0 <sem2_execute+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 800339e:	68a1      	ldr	r1, [r4, #8]
 80033a0:	fab1 f181 	clz	r1, r1
 80033a4:	0949      	lsrs	r1, r1, #5
 80033a6:	2009      	movs	r0, #9
 80033a8:	f7ff fa62 	bl	8002870 <_test_assert>
 80033ac:	3501      	adds	r5, #1
 80033ae:	b2ed      	uxtb	r5, r5
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d185      	bne.n	80032c0 <sem2_execute+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80033b4:	2d46      	cmp	r5, #70	; 0x46
 80033b6:	d1d6      	bne.n	8003366 <sem2_execute+0xc6>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80033b8:	490d      	ldr	r1, [pc, #52]	; (80033f0 <sem2_execute+0x150>)
 80033ba:	200a      	movs	r0, #10
 80033bc:	f7ff fa70 	bl	80028a0 <_test_assert_sequence>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f47f af7d 	bne.w	80032c0 <sem2_execute+0x20>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80033c6:	f606 12d8 	addw	r2, r6, #2520	; 0x9d8
 80033ca:	f606 11c4 	addw	r1, r6, #2500	; 0x9c4
 80033ce:	200b      	movs	r0, #11
}
 80033d0:	b002      	add	sp, #8
 80033d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80033d6:	f7ff ba8b 	b.w	80028f0 <_test_assert_time_window>
 80033da:	bf00      	nop
 80033dc:	20000800 	.word	0x20000800
 80033e0:	200008b8 	.word	0x200008b8
 80033e4:	08006260 	.word	0x08006260
 80033e8:	08003271 	.word	0x08003271
 80033ec:	20001460 	.word	0x20001460
 80033f0:	08006510 	.word	0x08006510
 80033f4:	f3af 8000 	nop.w
 80033f8:	f3af 8000 	nop.w
 80033fc:	f3af 8000 	nop.w

08003400 <sem3_execute>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8003400:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <sem3_execute+0x84>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <sem3_execute+0x88>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	6810      	ldr	r0, [r2, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <sem3_execute+0x8c>)
  chSemSignalWait(&sem1, &sem1);
 800340e:	4c20      	ldr	r4, [pc, #128]	; (8003490 <sem3_execute+0x90>)
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8003410:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003412:	2100      	movs	r1, #0
 8003414:	3201      	adds	r2, #1
 8003416:	9100      	str	r1, [sp, #0]
 8003418:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800341c:	f7fd fab0 	bl	8000980 <chThdCreateStatic>
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <sem3_execute+0x94>)
  chSemSignalWait(&sem1, &sem1);
 8003422:	4621      	mov	r1, r4
  chSemSignal(&sem1);
}

static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003424:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8003426:	4620      	mov	r0, r4
 8003428:	f7fd fdba 	bl	8000fa0 <chSemSignalWait>
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 800342c:	6821      	ldr	r1, [r4, #0]
 800342e:	1b09      	subs	r1, r1, r4
 8003430:	fab1 f181 	clz	r1, r1
 8003434:	2001      	movs	r0, #1
 8003436:	0949      	lsrs	r1, r1, #5
 8003438:	f7ff fa1a 	bl	8002870 <_test_assert>
 800343c:	b108      	cbz	r0, 8003442 <sem3_execute+0x42>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 800343e:	b002      	add	sp, #8
 8003440:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8003442:	68a1      	ldr	r1, [r4, #8]
 8003444:	fab1 f181 	clz	r1, r1
 8003448:	0949      	lsrs	r1, r1, #5
 800344a:	2002      	movs	r0, #2
 800344c:	f7ff fa10 	bl	8002870 <_test_assert>
 8003450:	2800      	cmp	r0, #0
 8003452:	d1f4      	bne.n	800343e <sem3_execute+0x3e>

  chSemSignalWait(&sem1, &sem1);
 8003454:	4621      	mov	r1, r4
 8003456:	4620      	mov	r0, r4
 8003458:	f7fd fda2 	bl	8000fa0 <chSemSignalWait>
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 800345c:	6821      	ldr	r1, [r4, #0]
 800345e:	1b09      	subs	r1, r1, r4
 8003460:	fab1 f181 	clz	r1, r1
 8003464:	2003      	movs	r0, #3
 8003466:	0949      	lsrs	r1, r1, #5
 8003468:	f7ff fa02 	bl	8002870 <_test_assert>
 800346c:	2800      	cmp	r0, #0
 800346e:	d1e6      	bne.n	800343e <sem3_execute+0x3e>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8003470:	68a1      	ldr	r1, [r4, #8]
 8003472:	fab1 f181 	clz	r1, r1
 8003476:	0949      	lsrs	r1, r1, #5
 8003478:	2004      	movs	r0, #4
}
 800347a:	b002      	add	sp, #8
 800347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8003480:	f7ff b9f6 	b.w	8002870 <_test_assert>
 8003484:	200008b8 	.word	0x200008b8
 8003488:	08006260 	.word	0x08006260
 800348c:	08003201 	.word	0x08003201
 8003490:	20000800 	.word	0x20000800
 8003494:	20001460 	.word	0x20001460
 8003498:	f3af 8000 	nop.w
 800349c:	f3af 8000 	nop.w

080034a0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 80034a0:	b508      	push	{r3, lr}
 80034a2:	2220      	movs	r2, #32
 80034a4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80034a8:	6883      	ldr	r3, [r0, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	dd05      	ble.n	80034ba <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80034ae:	f7fd fa07 	bl	80008c0 <chSchRescheduleS>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80034ba:	f7fd fd49 	bl	8000f50 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80034be:	f7fd f9ff 	bl	80008c0 <chSchRescheduleS>
 80034c2:	2300      	movs	r3, #0
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop
 80034cc:	f3af 8000 	nop.w

080034d0 <sem4_execute>:

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	b086      	sub	sp, #24
 *
 * @init
 */
static inline void chBSemObjectInit(binary_semaphore_t *bsp, bool taken) {

  chSemObjectInit(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80034d4:	a803      	add	r0, sp, #12
 80034d6:	2100      	movs	r1, #0
 80034d8:	f7fd fc7a 	bl	8000dd0 <chSemObjectInit>
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {

  chSemReset(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80034dc:	a803      	add	r0, sp, #12
 80034de:	2100      	movs	r1, #0
 80034e0:	f7fd fc96 	bl	8000e10 <chSemReset>
 80034e4:	2520      	movs	r5, #32
 80034e6:	f385 8811 	msr	BASEPRI, r5
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80034ea:	9905      	ldr	r1, [sp, #20]
 80034ec:	2900      	cmp	r1, #0
 80034ee:	bfcc      	ite	gt
 80034f0:	2100      	movgt	r1, #0
 80034f2:	2101      	movle	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f7ff f9bb 	bl	8002870 <_test_assert>
 80034fa:	b120      	cbz	r0, 8003506 <sem4_execute+0x36>
 80034fc:	2300      	movs	r3, #0
 80034fe:	f383 8811 	msr	BASEPRI, r3

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8003502:	b006      	add	sp, #24
 8003504:	bd70      	pop	{r4, r5, r6, pc}
 8003506:	4604      	mov	r4, r0
 8003508:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800350c:	4b40      	ldr	r3, [pc, #256]	; (8003610 <sem4_execute+0x140>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800350e:	4a41      	ldr	r2, [pc, #260]	; (8003614 <sem4_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	6810      	ldr	r0, [r2, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b40      	ldr	r3, [pc, #256]	; (8003618 <sem4_execute+0x148>)
 8003518:	a903      	add	r1, sp, #12
 800351a:	9100      	str	r1, [sp, #0]
 800351c:	3a01      	subs	r2, #1
 800351e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003522:	f7fd fa2d 	bl	8000980 <chThdCreateStatic>
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <sem4_execute+0x14c>)
 8003528:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 800352a:	a803      	add	r0, sp, #12
 800352c:	f7fd fc80 	bl	8000e30 <chSemWait>
 8003530:	f385 8811 	msr	BASEPRI, r5
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8003534:	9905      	ldr	r1, [sp, #20]
 8003536:	2900      	cmp	r1, #0
 8003538:	bfcc      	ite	gt
 800353a:	2100      	movgt	r1, #0
 800353c:	2101      	movle	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f7ff f996 	bl	8002870 <_test_assert>
 8003544:	b118      	cbz	r0, 800354e <sem4_execute+0x7e>
 8003546:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 800354a:	b006      	add	sp, #24
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	f380 8811 	msr	BASEPRI, r0
 8003552:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8003556:	9b05      	ldr	r3, [sp, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	dd24      	ble.n	80035a6 <sem4_execute+0xd6>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800355c:	f7fd f9b0 	bl	80008c0 <chSchRescheduleS>
 8003560:	2400      	movs	r4, #0
 8003562:	f384 8811 	msr	BASEPRI, r4
 8003566:	2620      	movs	r6, #32
 8003568:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 800356c:	9905      	ldr	r1, [sp, #20]
 800356e:	42a1      	cmp	r1, r4
 8003570:	f04f 0003 	mov.w	r0, #3
 8003574:	bfd4      	ite	le
 8003576:	2100      	movle	r1, #0
 8003578:	2101      	movgt	r1, #1
 800357a:	f7ff f979 	bl	8002870 <_test_assert>
 800357e:	4605      	mov	r5, r0
 8003580:	2800      	cmp	r0, #0
 8003582:	d1e0      	bne.n	8003546 <sem4_execute+0x76>
 8003584:	f380 8811 	msr	BASEPRI, r0
 8003588:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 800358c:	9905      	ldr	r1, [sp, #20]
 800358e:	f1a1 0101 	sub.w	r1, r1, #1
 8003592:	fab1 f181 	clz	r1, r1
 8003596:	2004      	movs	r0, #4
 8003598:	0949      	lsrs	r1, r1, #5
 800359a:	f7ff f969 	bl	8002870 <_test_assert>
 800359e:	b130      	cbz	r0, 80035ae <sem4_execute+0xde>
 80035a0:	f385 8811 	msr	BASEPRI, r5
 80035a4:	e7ad      	b.n	8003502 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80035a6:	a803      	add	r0, sp, #12
 80035a8:	f7fd fcd2 	bl	8000f50 <chSemSignalI>
 80035ac:	e7d6      	b.n	800355c <sem4_execute+0x8c>
 80035ae:	f380 8811 	msr	BASEPRI, r0
 80035b2:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80035b6:	9b05      	ldr	r3, [sp, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	dd25      	ble.n	8003608 <sem4_execute+0x138>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80035bc:	f7fd f980 	bl	80008c0 <chSchRescheduleS>
 80035c0:	2400      	movs	r4, #0
 80035c2:	f384 8811 	msr	BASEPRI, r4
 80035c6:	2620      	movs	r6, #32
 80035c8:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80035cc:	9905      	ldr	r1, [sp, #20]
 80035ce:	42a1      	cmp	r1, r4
 80035d0:	f04f 0003 	mov.w	r0, #3
 80035d4:	bfd4      	ite	le
 80035d6:	2100      	movle	r1, #0
 80035d8:	2101      	movgt	r1, #1
 80035da:	f7ff f949 	bl	8002870 <_test_assert>
 80035de:	4605      	mov	r5, r0
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1b0      	bne.n	8003546 <sem4_execute+0x76>
 80035e4:	f380 8811 	msr	BASEPRI, r0
 80035e8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80035ec:	9905      	ldr	r1, [sp, #20]
 80035ee:	f1a1 0101 	sub.w	r1, r1, #1
 80035f2:	fab1 f181 	clz	r1, r1
 80035f6:	2005      	movs	r0, #5
 80035f8:	0949      	lsrs	r1, r1, #5
 80035fa:	f7ff f939 	bl	8002870 <_test_assert>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d1ce      	bne.n	80035a0 <sem4_execute+0xd0>
 8003602:	f380 8811 	msr	BASEPRI, r0
 8003606:	e77c      	b.n	8003502 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8003608:	a803      	add	r0, sp, #12
 800360a:	f7fd fca1 	bl	8000f50 <chSemSignalI>
 800360e:	e7d5      	b.n	80035bc <sem4_execute+0xec>
 8003610:	200008b8 	.word	0x200008b8
 8003614:	08006260 	.word	0x08006260
 8003618:	080034a1 	.word	0x080034a1
 800361c:	20001460 	.word	0x20001460

08003620 <mtx1_execute>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003622:	4f2b      	ldr	r7, [pc, #172]	; (80036d0 <mtx1_execute+0xb0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003624:	4e2b      	ldr	r6, [pc, #172]	; (80036d4 <mtx1_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003626:	69bb      	ldr	r3, [r7, #24]
}

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8003628:	482b      	ldr	r0, [pc, #172]	; (80036d8 <mtx1_execute+0xb8>)
 800362a:	689c      	ldr	r4, [r3, #8]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800362c:	4d2b      	ldr	r5, [pc, #172]	; (80036dc <mtx1_execute+0xbc>)
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 800362e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8003630:	f7fd fd5e 	bl	80010f0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <mtx1_execute+0xc0>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	1c62      	adds	r2, r4, #1
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <mtx1_execute+0xc4>)
 800363c:	6830      	ldr	r0, [r6, #0]
 800363e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003642:	f7fd f99d 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003646:	6871      	ldr	r1, [r6, #4]
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <mtx1_execute+0xc8>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800364a:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800364c:	1ca2      	adds	r2, r4, #2
 800364e:	4608      	mov	r0, r1
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <mtx1_execute+0xc4>)
 8003658:	f7fd f992 	bl	8000980 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800365c:	68b1      	ldr	r1, [r6, #8]
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <mtx1_execute+0xcc>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003660:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8003662:	1ce2      	adds	r2, r4, #3
 8003664:	4608      	mov	r0, r1
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <mtx1_execute+0xc4>)
 800366e:	f7fd f987 	bl	8000980 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8003672:	68f1      	ldr	r1, [r6, #12]
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <mtx1_execute+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8003676:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8003678:	1d22      	adds	r2, r4, #4
 800367a:	4608      	mov	r0, r1
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <mtx1_execute+0xc4>)
 8003684:	f7fd f97c 	bl	8000980 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8003688:	6931      	ldr	r1, [r6, #16]
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <mtx1_execute+0xd4>)
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800368c:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800368e:	1d62      	adds	r2, r4, #5
 8003690:	4608      	mov	r0, r1
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <mtx1_execute+0xc4>)
 800369a:	f7fd f971 	bl	8000980 <chThdCreateStatic>
 800369e:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 80036a0:	480d      	ldr	r0, [pc, #52]	; (80036d8 <mtx1_execute+0xb8>)
 80036a2:	f7fd fd4d 	bl	8001140 <chMtxUnlock>
  test_wait_threads();
 80036a6:	f7ff f953 	bl	8002950 <test_wait_threads>
 80036aa:	69bb      	ldr	r3, [r7, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	1b09      	subs	r1, r1, r4
 80036b0:	fab1 f181 	clz	r1, r1
 80036b4:	2001      	movs	r0, #1
 80036b6:	0949      	lsrs	r1, r1, #5
 80036b8:	f7ff f8da 	bl	8002870 <_test_assert>
 80036bc:	b108      	cbz	r0, 80036c2 <mtx1_execute+0xa2>
  test_assert_sequence(2, "ABCDE");
}
 80036be:	b003      	add	sp, #12
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80036c2:	490d      	ldr	r1, [pc, #52]	; (80036f8 <mtx1_execute+0xd8>)
 80036c4:	2002      	movs	r0, #2
}
 80036c6:	b003      	add	sp, #12
 80036c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80036cc:	f7ff b8e8 	b.w	80028a0 <_test_assert_sequence>
 80036d0:	200008b8 	.word	0x200008b8
 80036d4:	08006260 	.word	0x08006260
 80036d8:	2000080c 	.word	0x2000080c
 80036dc:	20001460 	.word	0x20001460
 80036e0:	08006514 	.word	0x08006514
 80036e4:	08003701 	.word	0x08003701
 80036e8:	08006500 	.word	0x08006500
 80036ec:	08006504 	.word	0x08006504
 80036f0:	08006508 	.word	0x08006508
 80036f4:	0800650c 	.word	0x0800650c
 80036f8:	08006510 	.word	0x08006510
 80036fc:	f3af 8000 	nop.w

08003700 <thread1>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8003700:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8003702:	4c06      	ldr	r4, [pc, #24]	; (800371c <thread1+0x1c>)
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8003704:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8003706:	4620      	mov	r0, r4
 8003708:	f7fd fcf2 	bl	80010f0 <chMtxLock>
  test_emit_token(*(char *)p);
 800370c:	7828      	ldrb	r0, [r5, #0]
 800370e:	f7ff f89f 	bl	8002850 <test_emit_token>
  chMtxUnlock(&m1);
 8003712:	4620      	mov	r0, r4
}
 8003714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8003718:	f7fd bd12 	b.w	8001140 <chMtxUnlock>
 800371c:	2000080c 	.word	0x2000080c

08003720 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8003720:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8003722:	4c06      	ldr	r4, [pc, #24]	; (800373c <thread12+0x1c>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8003724:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8003726:	4620      	mov	r0, r4
 8003728:	f7fd fce2 	bl	80010f0 <chMtxLock>
  test_emit_token(*(char *)p);
 800372c:	7828      	ldrb	r0, [r5, #0]
 800372e:	f7ff f88f 	bl	8002850 <test_emit_token>
  chMtxUnlock(&m2);
 8003732:	4620      	mov	r0, r4
}
 8003734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8003738:	f7fd bd02 	b.w	8001140 <chMtxUnlock>
 800373c:	2000081c 	.word	0x2000081c

08003740 <mtx4_setup>:
 * thread with precise timing.<br>
 * The test expects that the priority changes caused by the priority
 * inheritance algorithm happen at the right moment and with the right values.
 */

static void mtx4_setup(void) {
 8003740:	b508      	push	{r3, lr}

  chMtxObjectInit(&m1);
 8003742:	4804      	ldr	r0, [pc, #16]	; (8003754 <mtx4_setup+0x14>)
 8003744:	f7fd fc64 	bl	8001010 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <mtx4_setup+0x18>)
}
 800374a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx4_setup(void) {

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 800374e:	f7fd bc5f 	b.w	8001010 <chMtxObjectInit>
 8003752:	bf00      	nop
 8003754:	2000080c 	.word	0x2000080c
 8003758:	2000081c 	.word	0x2000081c
 800375c:	f3af 8000 	nop.w

08003760 <mtx5_setup>:
 * operation.
 */

static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <mtx5_setup+0x8>)
 8003762:	f7fd bc55 	b.w	8001010 <chMtxObjectInit>
 8003766:	bf00      	nop
 8003768:	2000080c 	.word	0x2000080c
 800376c:	f3af 8000 	nop.w

08003770 <mtx1_setup>:
 8003770:	f7ff bff6 	b.w	8003760 <mtx5_setup>
 8003774:	f3af 8000 	nop.w
 8003778:	f3af 8000 	nop.w
 800377c:	f3af 8000 	nop.w

08003780 <thread4b>:
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread4b, p) {
 8003780:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8003782:	4c06      	ldr	r4, [pc, #24]	; (800379c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8003784:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003788:	f7fd f96a 	bl	8000a60 <chThdSleep>
  chMtxLock(&m1);
 800378c:	4620      	mov	r0, r4
 800378e:	f7fd fcaf 	bl	80010f0 <chMtxLock>
  chMtxUnlock(&m1);
 8003792:	4620      	mov	r0, r4
}
 8003794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8003798:	f7fd bcd2 	b.w	8001140 <chMtxUnlock>
 800379c:	2000080c 	.word	0x2000080c

080037a0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 80037a0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80037a2:	4c06      	ldr	r4, [pc, #24]	; (80037bc <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80037a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037a8:	f7fd f95a 	bl	8000a60 <chThdSleep>
  chMtxLock(&m2);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7fd fc9f 	bl	80010f0 <chMtxLock>
  chMtxUnlock(&m2);
 80037b2:	4620      	mov	r0, r4
}
 80037b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 80037b8:	f7fd bcc2 	b.w	8001140 <chMtxUnlock>
 80037bc:	2000081c 	.word	0x2000081c

080037c0 <mtx4_execute>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80037c0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80037c4:	4d8e      	ldr	r5, [pc, #568]	; (8003a00 <mtx4_execute+0x240>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80037c6:	4e8f      	ldr	r6, [pc, #572]	; (8003a04 <mtx4_execute+0x244>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80037c8:	69ab      	ldr	r3, [r5, #24]
 80037ca:	6832      	ldr	r2, [r6, #0]
 80037cc:	689c      	ldr	r4, [r3, #8]
 80037ce:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <mtx4_execute+0x248>)
 80037d0:	4f8e      	ldr	r7, [pc, #568]	; (8003a0c <mtx4_execute+0x24c>)
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80037d2:	b085      	sub	sp, #20
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80037d4:	f104 0901 	add.w	r9, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80037d8:	4610      	mov	r0, r2
 80037da:	9203      	str	r2, [sp, #12]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	464a      	mov	r2, r9
 80037e0:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <mtx4_execute+0x250>)
 80037e2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80037e6:	f7fd f8cb 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80037ea:	6876      	ldr	r6, [r6, #4]
 80037ec:	4b89      	ldr	r3, [pc, #548]	; (8003a14 <mtx4_execute+0x254>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80037ee:	6038      	str	r0, [r7, #0]
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80037f0:	f104 0a02 	add.w	sl, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80037f4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80037f8:	4652      	mov	r2, sl
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4630      	mov	r0, r6
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <mtx4_execute+0x258>)
 8003800:	f7fd f8be 	bl	8000980 <chThdCreateStatic>
 8003804:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8003806:	4885      	ldr	r0, [pc, #532]	; (8003a1c <mtx4_execute+0x25c>)
 8003808:	f7fd fc72 	bl	80010f0 <chMtxLock>
 800380c:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	1b09      	subs	r1, r1, r4
 8003812:	fab1 f181 	clz	r1, r1
 8003816:	2001      	movs	r0, #1
 8003818:	0949      	lsrs	r1, r1, #5
 800381a:	f7ff f829 	bl	8002870 <_test_assert>
 800381e:	b110      	cbz	r0, 8003826 <mtx4_execute+0x66>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8003820:	b005      	add	sp, #20
 8003822:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8003826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800382a:	f7fd f919 	bl	8000a60 <chThdSleep>
 800382e:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	ebc9 0101 	rsb	r1, r9, r1
 8003836:	fab1 f181 	clz	r1, r1
 800383a:	2002      	movs	r0, #2
 800383c:	0949      	lsrs	r1, r1, #5
 800383e:	f7ff f817 	bl	8002870 <_test_assert>
 8003842:	2800      	cmp	r0, #0
 8003844:	d1ec      	bne.n	8003820 <mtx4_execute+0x60>
  chMtxLock(&m1);
 8003846:	4876      	ldr	r0, [pc, #472]	; (8003a20 <mtx4_execute+0x260>)
 8003848:	f7fd fc52 	bl	80010f0 <chMtxLock>
 800384c:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	ebc9 0101 	rsb	r1, r9, r1
 8003854:	fab1 f181 	clz	r1, r1
 8003858:	2003      	movs	r0, #3
 800385a:	0949      	lsrs	r1, r1, #5
 800385c:	f7ff f808 	bl	8002870 <_test_assert>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1dd      	bne.n	8003820 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8003864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003868:	f7fd f8fa 	bl	8000a60 <chThdSleep>
 800386c:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	ebca 0101 	rsb	r1, sl, r1
 8003874:	fab1 f181 	clz	r1, r1
 8003878:	2004      	movs	r0, #4
 800387a:	0949      	lsrs	r1, r1, #5
 800387c:	f7fe fff8 	bl	8002870 <_test_assert>
 8003880:	2800      	cmp	r0, #0
 8003882:	d1cd      	bne.n	8003820 <mtx4_execute+0x60>
  chMtxUnlock(&m1);
 8003884:	4866      	ldr	r0, [pc, #408]	; (8003a20 <mtx4_execute+0x260>)
 8003886:	f7fd fc5b 	bl	8001140 <chMtxUnlock>
 800388a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	ebc9 0101 	rsb	r1, r9, r1
 8003892:	fab1 f181 	clz	r1, r1
 8003896:	2005      	movs	r0, #5
 8003898:	0949      	lsrs	r1, r1, #5
 800389a:	f7fe ffe9 	bl	8002870 <_test_assert>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d1be      	bne.n	8003820 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 80038a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038a6:	f7fd f8db 	bl	8000a60 <chThdSleep>
 80038aa:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	ebc9 0101 	rsb	r1, r9, r1
 80038b2:	fab1 f181 	clz	r1, r1
 80038b6:	2006      	movs	r0, #6
 80038b8:	0949      	lsrs	r1, r1, #5
 80038ba:	f7fe ffd9 	bl	8002870 <_test_assert>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d1ae      	bne.n	8003820 <mtx4_execute+0x60>
  chMtxUnlockAll();
 80038c2:	f7fd fc95 	bl	80011f0 <chMtxUnlockAll>
 80038c6:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80038c8:	6899      	ldr	r1, [r3, #8]
 80038ca:	1b09      	subs	r1, r1, r4
 80038cc:	fab1 f181 	clz	r1, r1
 80038d0:	2007      	movs	r0, #7
 80038d2:	0949      	lsrs	r1, r1, #5
 80038d4:	f7fe ffcc 	bl	8002870 <_test_assert>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d1a1      	bne.n	8003820 <mtx4_execute+0x60>
  test_wait_threads();
 80038dc:	f7ff f838 	bl	8002950 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <mtx4_execute+0x264>)
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	464a      	mov	r2, r9
 80038e6:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <mtx4_execute+0x250>)
 80038e8:	9803      	ldr	r0, [sp, #12]
 80038ea:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80038ee:	f7fd f847 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80038f2:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <mtx4_execute+0x268>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80038f4:	6038      	str	r0, [r7, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80038f6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4652      	mov	r2, sl
 80038fe:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <mtx4_execute+0x258>)
 8003900:	4630      	mov	r0, r6
 8003902:	f7fd f83d 	bl	8000980 <chThdCreateStatic>
 8003906:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8003908:	4844      	ldr	r0, [pc, #272]	; (8003a1c <mtx4_execute+0x25c>)
 800390a:	f7fd fbf1 	bl	80010f0 <chMtxLock>
 800390e:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	1b09      	subs	r1, r1, r4
 8003914:	fab1 f181 	clz	r1, r1
 8003918:	2008      	movs	r0, #8
 800391a:	0949      	lsrs	r1, r1, #5
 800391c:	f7fe ffa8 	bl	8002870 <_test_assert>
 8003920:	2800      	cmp	r0, #0
 8003922:	f47f af7d 	bne.w	8003820 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8003926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800392a:	f7fd f899 	bl	8000a60 <chThdSleep>
 800392e:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	ebc9 0c01 	rsb	ip, r9, r1
 8003936:	f1dc 0100 	rsbs	r1, ip, #0
 800393a:	eb41 010c 	adc.w	r1, r1, ip
 800393e:	2009      	movs	r0, #9
 8003940:	f7fe ff96 	bl	8002870 <_test_assert>
 8003944:	2800      	cmp	r0, #0
 8003946:	f47f af6b 	bne.w	8003820 <mtx4_execute+0x60>
  chMtxLock(&m1);
 800394a:	4835      	ldr	r0, [pc, #212]	; (8003a20 <mtx4_execute+0x260>)
 800394c:	f7fd fbd0 	bl	80010f0 <chMtxLock>
 8003950:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	ebc9 0e01 	rsb	lr, r9, r1
 8003958:	f1de 0100 	rsbs	r1, lr, #0
 800395c:	eb41 010e 	adc.w	r1, r1, lr
 8003960:	200a      	movs	r0, #10
 8003962:	f7fe ff85 	bl	8002870 <_test_assert>
 8003966:	2800      	cmp	r0, #0
 8003968:	f47f af5a 	bne.w	8003820 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 800396c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003970:	f7fd f876 	bl	8000a60 <chThdSleep>
 8003974:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	ebca 0701 	rsb	r7, sl, r1
 800397c:	4279      	negs	r1, r7
 800397e:	f04f 000b 	mov.w	r0, #11
 8003982:	4179      	adcs	r1, r7
 8003984:	f7fe ff74 	bl	8002870 <_test_assert>
 8003988:	4606      	mov	r6, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	f47f af48 	bne.w	8003820 <mtx4_execute+0x60>
 8003990:	2320      	movs	r3, #32
 8003992:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8003996:	4822      	ldr	r0, [pc, #136]	; (8003a20 <mtx4_execute+0x260>)
 8003998:	f7fd fc02 	bl	80011a0 <chMtxUnlockS>
  chSchRescheduleS();
 800399c:	f7fc ff90 	bl	80008c0 <chSchRescheduleS>
 80039a0:	f386 8811 	msr	BASEPRI, r6
 80039a4:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	ebc9 0601 	rsb	r6, r9, r1
 80039ac:	4271      	negs	r1, r6
 80039ae:	4171      	adcs	r1, r6
 80039b0:	200c      	movs	r0, #12
 80039b2:	f7fe ff5d 	bl	8002870 <_test_assert>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f47f af32 	bne.w	8003820 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 80039bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c0:	f7fd f84e 	bl	8000a60 <chThdSleep>
 80039c4:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	ebc9 0201 	rsb	r2, r9, r1
 80039cc:	4251      	negs	r1, r2
 80039ce:	4151      	adcs	r1, r2
 80039d0:	200d      	movs	r0, #13
 80039d2:	f7fe ff4d 	bl	8002870 <_test_assert>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	f47f af22 	bne.w	8003820 <mtx4_execute+0x60>
  chMtxUnlockAll();
 80039dc:	f7fd fc08 	bl	80011f0 <chMtxUnlockAll>
 80039e0:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	1b0b      	subs	r3, r1, r4
 80039e6:	4259      	negs	r1, r3
 80039e8:	4159      	adcs	r1, r3
 80039ea:	200e      	movs	r0, #14
 80039ec:	f7fe ff40 	bl	8002870 <_test_assert>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	f47f af15 	bne.w	8003820 <mtx4_execute+0x60>
  test_wait_threads();
}
 80039f6:	b005      	add	sp, #20
 80039f8:	e8bd 46f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 80039fc:	f7fe bfa8 	b.w	8002950 <test_wait_threads>
 8003a00:	200008b8 	.word	0x200008b8
 8003a04:	08006260 	.word	0x08006260
 8003a08:	08006508 	.word	0x08006508
 8003a0c:	20001460 	.word	0x20001460
 8003a10:	080037a1 	.word	0x080037a1
 8003a14:	0800650c 	.word	0x0800650c
 8003a18:	08003781 	.word	0x08003781
 8003a1c:	2000081c 	.word	0x2000081c
 8003a20:	2000080c 	.word	0x2000080c
 8003a24:	08006500 	.word	0x08006500
 8003a28:	08006504 	.word	0x08006504
 8003a2c:	f3af 8000 	nop.w

08003a30 <mtx5_execute>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003a32:	4d2b      	ldr	r5, [pc, #172]	; (8003ae0 <mtx5_execute+0xb0>)

#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
 8003a34:	4c2b      	ldr	r4, [pc, #172]	; (8003ae4 <mtx5_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003a36:	69ab      	ldr	r3, [r5, #24]
 8003a38:	4620      	mov	r0, r4
 8003a3a:	689e      	ldr	r6, [r3, #8]
 8003a3c:	f7fd fb68 	bl	8001110 <chMtxTryLock>
  test_assert(1, b, "already locked");
 8003a40:	4601      	mov	r1, r0
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fe ff14 	bl	8002870 <_test_assert>
 8003a48:	b100      	cbz	r0, 8003a4c <mtx5_execute+0x1c>
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  b = chMtxTryLock(&m1);
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7fd fb5f 	bl	8001110 <chMtxTryLock>
  test_assert(2, !b, "not locked");
 8003a52:	f080 0101 	eor.w	r1, r0, #1
 8003a56:	b2c9      	uxtb	r1, r1
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f7fe ff09 	bl	8002870 <_test_assert>
 8003a5e:	4607      	mov	r7, r0
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d1f2      	bne.n	8003a4a <mtx5_execute+0x1a>
 8003a64:	2320      	movs	r3, #32
 8003a66:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7fd fb98 	bl	80011a0 <chMtxUnlockS>
 8003a70:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8003a74:	6821      	ldr	r1, [r4, #0]
 8003a76:	1b09      	subs	r1, r1, r4
 8003a78:	fab1 f181 	clz	r1, r1
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	0949      	lsrs	r1, r1, #5
 8003a80:	f7fe fef6 	bl	8002870 <_test_assert>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1e0      	bne.n	8003a4a <mtx5_execute+0x1a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8003a88:	68a1      	ldr	r1, [r4, #8]
 8003a8a:	fab1 f181 	clz	r1, r1
 8003a8e:	0949      	lsrs	r1, r1, #5
 8003a90:	2004      	movs	r0, #4
 8003a92:	f7fe feed 	bl	8002870 <_test_assert>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d1d7      	bne.n	8003a4a <mtx5_execute+0x1a>
 8003a9a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	1b89      	subs	r1, r1, r6
 8003aa0:	fab1 f181 	clz	r1, r1
 8003aa4:	2005      	movs	r0, #5
 8003aa6:	0949      	lsrs	r1, r1, #5
 8003aa8:	f7fe fee2 	bl	8002870 <_test_assert>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d1cc      	bne.n	8003a4a <mtx5_execute+0x1a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7fd fb1d 	bl	80010f0 <chMtxLock>
  chMtxUnlockAll();
 8003ab6:	f7fd fb9b 	bl	80011f0 <chMtxUnlockAll>
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8003aba:	6821      	ldr	r1, [r4, #0]
 8003abc:	1b09      	subs	r1, r1, r4
 8003abe:	fab1 f181 	clz	r1, r1
 8003ac2:	2006      	movs	r0, #6
 8003ac4:	0949      	lsrs	r1, r1, #5
 8003ac6:	f7fe fed3 	bl	8002870 <_test_assert>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1bd      	bne.n	8003a4a <mtx5_execute+0x1a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003ace:	68a1      	ldr	r1, [r4, #8]
 8003ad0:	fab1 f181 	clz	r1, r1
 8003ad4:	0949      	lsrs	r1, r1, #5
 8003ad6:	2007      	movs	r0, #7
}
 8003ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003adc:	f7fe bec8 	b.w	8002870 <_test_assert>
 8003ae0:	200008b8 	.word	0x200008b8
 8003ae4:	2000080c 	.word	0x2000080c
 8003ae8:	f3af 8000 	nop.w
 8003aec:	f3af 8000 	nop.w

08003af0 <mtx6_execute>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <mtx6_execute+0xc0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003af4:	4f2f      	ldr	r7, [pc, #188]	; (8003bb4 <mtx6_execute+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4d2f      	ldr	r5, [pc, #188]	; (8003bb8 <mtx6_execute+0xc8>)
 8003afa:	689e      	ldr	r6, [r3, #8]
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <mtx6_execute+0xcc>)
 8003afe:	6838      	ldr	r0, [r7, #0]
 8003b00:	4c2f      	ldr	r4, [pc, #188]	; (8003bc0 <mtx6_execute+0xd0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8003b02:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003b04:	1c72      	adds	r2, r6, #1
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	f7fc ff37 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	492b      	ldr	r1, [pc, #172]	; (8003bc4 <mtx6_execute+0xd4>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003b16:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003b18:	1cb2      	adds	r2, r6, #2
 8003b1a:	9100      	str	r1, [sp, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003b22:	462b      	mov	r3, r5
 8003b24:	f7fc ff2c 	bl	8000980 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4927      	ldr	r1, [pc, #156]	; (8003bc8 <mtx6_execute+0xd8>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003b2c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003b2e:	1cf2      	adds	r2, r6, #3
 8003b30:	9100      	str	r1, [sp, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003b38:	462b      	mov	r3, r5
 8003b3a:	f7fc ff21 	bl	8000980 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4922      	ldr	r1, [pc, #136]	; (8003bcc <mtx6_execute+0xdc>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003b42:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003b44:	1d32      	adds	r2, r6, #4
 8003b46:	9100      	str	r1, [sp, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003b4e:	462b      	mov	r3, r5
 8003b50:	f7fc ff16 	bl	8000980 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	491e      	ldr	r1, [pc, #120]	; (8003bd0 <mtx6_execute+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003b58:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003b5a:	1d72      	adds	r2, r6, #5
 8003b5c:	9100      	str	r1, [sp, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003b64:	462b      	mov	r3, r5
 8003b66:	f7fc ff0b 	bl	8000980 <chThdCreateStatic>
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	6120      	str	r0, [r4, #16]
 8003b6e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8003b72:	4c18      	ldr	r4, [pc, #96]	; (8003bd4 <mtx6_execute+0xe4>)
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7fd fb8b 	bl	8001290 <chCondSignalI>
  chCondSignalI(&c1);
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7fd fb88 	bl	8001290 <chCondSignalI>
  chCondSignalI(&c1);
 8003b80:	4620      	mov	r0, r4
 8003b82:	f7fd fb85 	bl	8001290 <chCondSignalI>
  chCondSignalI(&c1);
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7fd fb82 	bl	8001290 <chCondSignalI>
  chCondSignalI(&c1);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fd fb7f 	bl	8001290 <chCondSignalI>
  chSchRescheduleS();
 8003b92:	f7fc fe95 	bl	80008c0 <chSchRescheduleS>
 8003b96:	2300      	movs	r3, #0
 8003b98:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8003b9c:	f7fe fed8 	bl	8002950 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8003ba0:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <mtx6_execute+0xe8>)
 8003ba2:	2001      	movs	r0, #1
}
 8003ba4:	b003      	add	sp, #12
 8003ba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8003baa:	f7fe be79 	b.w	80028a0 <_test_assert_sequence>
 8003bae:	bf00      	nop
 8003bb0:	200008b8 	.word	0x200008b8
 8003bb4:	08006260 	.word	0x08006260
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08006514 	.word	0x08006514
 8003bc0:	20001460 	.word	0x20001460
 8003bc4:	08006500 	.word	0x08006500
 8003bc8:	08006504 	.word	0x08006504
 8003bcc:	08006508 	.word	0x08006508
 8003bd0:	0800650c 	.word	0x0800650c
 8003bd4:	2000082c 	.word	0x2000082c
 8003bd8:	08006510 	.word	0x08006510
 8003bdc:	f3af 8000 	nop.w

08003be0 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8003be0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8003be2:	4c08      	ldr	r4, [pc, #32]	; (8003c04 <thread10+0x24>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8003be4:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fd fa82 	bl	80010f0 <chMtxLock>
  chCondWait(&c1);
 8003bec:	4806      	ldr	r0, [pc, #24]	; (8003c08 <thread10+0x28>)
 8003bee:	f7fd fba7 	bl	8001340 <chCondWait>
  test_emit_token(*(char *)p);
 8003bf2:	7828      	ldrb	r0, [r5, #0]
 8003bf4:	f7fe fe2c 	bl	8002850 <test_emit_token>
  chMtxUnlock(&m1);
 8003bf8:	4620      	mov	r0, r4
}
 8003bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8003bfe:	f7fd ba9f 	b.w	8001140 <chMtxUnlock>
 8003c02:	bf00      	nop
 8003c04:	2000080c 	.word	0x2000080c
 8003c08:	2000082c 	.word	0x2000082c
 8003c0c:	f3af 8000 	nop.w

08003c10 <mtx7_setup>:
 * tester thread then proceeds to broadcast the conditional variable.<br>
 * The test expects the threads to reach their goal in increasing priority
 * order regardless of the initial order.
 */

static void mtx7_setup(void) {
 8003c10:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8003c12:	4804      	ldr	r0, [pc, #16]	; (8003c24 <mtx7_setup+0x14>)
 8003c14:	f7fd fb1c 	bl	8001250 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8003c18:	4803      	ldr	r0, [pc, #12]	; (8003c28 <mtx7_setup+0x18>)
}
 8003c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx7_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
 8003c1e:	f7fd b9f7 	b.w	8001010 <chMtxObjectInit>
 8003c22:	bf00      	nop
 8003c24:	2000082c 	.word	0x2000082c
 8003c28:	2000080c 	.word	0x2000080c
 8003c2c:	f3af 8000 	nop.w

08003c30 <mtx6_setup>:
 8003c30:	f7ff bfee 	b.w	8003c10 <mtx7_setup>
 8003c34:	f3af 8000 	nop.w
 8003c38:	f3af 8000 	nop.w
 8003c3c:	f3af 8000 	nop.w

08003c40 <mtx8_setup>:
 * This test case verifies the priority boost of a thread waiting on a
 * conditional variable queue. It tests this very specific situation in order
 * to complete the code coverage.
 */

static void mtx8_setup(void) {
 8003c40:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8003c42:	4805      	ldr	r0, [pc, #20]	; (8003c58 <mtx8_setup+0x18>)
 8003c44:	f7fd fb04 	bl	8001250 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <mtx8_setup+0x1c>)
 8003c4a:	f7fd f9e1 	bl	8001010 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8003c4e:	4804      	ldr	r0, [pc, #16]	; (8003c60 <mtx8_setup+0x20>)
}
 8003c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

static void mtx8_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 8003c54:	f7fd b9dc 	b.w	8001010 <chMtxObjectInit>
 8003c58:	2000082c 	.word	0x2000082c
 8003c5c:	2000080c 	.word	0x2000080c
 8003c60:	2000081c 	.word	0x2000081c
 8003c64:	f3af 8000 	nop.w
 8003c68:	f3af 8000 	nop.w
 8003c6c:	f3af 8000 	nop.w

08003c70 <mtx7_execute>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <mtx7_execute+0x94>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003c74:	4f24      	ldr	r7, [pc, #144]	; (8003d08 <mtx7_execute+0x98>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	4d24      	ldr	r5, [pc, #144]	; (8003d0c <mtx7_execute+0x9c>)
 8003c7a:	689e      	ldr	r6, [r3, #8]
 8003c7c:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <mtx7_execute+0xa0>)
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	4c24      	ldr	r4, [pc, #144]	; (8003d14 <mtx7_execute+0xa4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003c82:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003c84:	1c72      	adds	r2, r6, #1
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f7fc fe77 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4920      	ldr	r1, [pc, #128]	; (8003d18 <mtx7_execute+0xa8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003c96:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003c98:	1cb2      	adds	r2, r6, #2
 8003c9a:	9100      	str	r1, [sp, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	f7fc fe6c 	bl	8000980 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	491c      	ldr	r1, [pc, #112]	; (8003d1c <mtx7_execute+0xac>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003cac:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003cae:	1cf2      	adds	r2, r6, #3
 8003cb0:	9100      	str	r1, [sp, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003cb8:	462b      	mov	r3, r5
 8003cba:	f7fc fe61 	bl	8000980 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4917      	ldr	r1, [pc, #92]	; (8003d20 <mtx7_execute+0xb0>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003cc2:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003cc4:	1d32      	adds	r2, r6, #4
 8003cc6:	9100      	str	r1, [sp, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003cce:	462b      	mov	r3, r5
 8003cd0:	f7fc fe56 	bl	8000980 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4913      	ldr	r1, [pc, #76]	; (8003d24 <mtx7_execute+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003cd8:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003cda:	1d72      	adds	r2, r6, #5
 8003cdc:	9100      	str	r1, [sp, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	f7fc fe4b 	bl	8000980 <chThdCreateStatic>
 8003cea:	6120      	str	r0, [r4, #16]
  chCondBroadcast(&c1);
 8003cec:	480e      	ldr	r0, [pc, #56]	; (8003d28 <mtx7_execute+0xb8>)
 8003cee:	f7fd fadf 	bl	80012b0 <chCondBroadcast>
  test_wait_threads();
 8003cf2:	f7fe fe2d 	bl	8002950 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8003cf6:	490d      	ldr	r1, [pc, #52]	; (8003d2c <mtx7_execute+0xbc>)
 8003cf8:	2001      	movs	r0, #1
}
 8003cfa:	b003      	add	sp, #12
 8003cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8003d00:	f7fe bdce 	b.w	80028a0 <_test_assert_sequence>
 8003d04:	200008b8 	.word	0x200008b8
 8003d08:	08006260 	.word	0x08006260
 8003d0c:	08003be1 	.word	0x08003be1
 8003d10:	08006514 	.word	0x08006514
 8003d14:	20001460 	.word	0x20001460
 8003d18:	08006500 	.word	0x08006500
 8003d1c:	08006504 	.word	0x08006504
 8003d20:	08006508 	.word	0x08006508
 8003d24:	0800650c 	.word	0x0800650c
 8003d28:	2000082c 	.word	0x2000082c
 8003d2c:	08006510 	.word	0x08006510

08003d30 <mtx8_execute>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <mtx8_execute+0x70>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003d34:	4e1b      	ldr	r6, [pc, #108]	; (8003da4 <mtx8_execute+0x74>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	6830      	ldr	r0, [r6, #0]
 8003d3a:	689d      	ldr	r5, [r3, #8]
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <mtx8_execute+0x78>)
 8003d3e:	4c1b      	ldr	r4, [pc, #108]	; (8003dac <mtx8_execute+0x7c>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
 8003d40:	4f1b      	ldr	r7, [pc, #108]	; (8003db0 <mtx8_execute+0x80>)
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003d42:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003d44:	1c6a      	adds	r2, r5, #1
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <mtx8_execute+0x84>)
 8003d4e:	f7fc fe17 	bl	8000980 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003d52:	6871      	ldr	r1, [r6, #4]
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <mtx8_execute+0x88>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003d56:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003d58:	1caa      	adds	r2, r5, #2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <mtx8_execute+0x8c>)
 8003d60:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003d64:	f7fc fe0c 	bl	8000980 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003d68:	68b1      	ldr	r1, [r6, #8]
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <mtx8_execute+0x90>)

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8003d6c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003d6e:	1cea      	adds	r2, r5, #3
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4608      	mov	r0, r1
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <mtx8_execute+0x94>)
 8003d76:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003d7a:	f7fc fe01 	bl	8000980 <chThdCreateStatic>
 8003d7e:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8003d80:	4638      	mov	r0, r7
 8003d82:	f7fd fa6d 	bl	8001260 <chCondSignal>
  chCondSignal(&c1);
 8003d86:	4638      	mov	r0, r7
 8003d88:	f7fd fa6a 	bl	8001260 <chCondSignal>
  test_wait_threads();
 8003d8c:	f7fe fde0 	bl	8002950 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8003d90:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <mtx8_execute+0x98>)
 8003d92:	2001      	movs	r0, #1
}
 8003d94:	b003      	add	sp, #12
 8003d96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8003d9a:	f7fe bd81 	b.w	80028a0 <_test_assert_sequence>
 8003d9e:	bf00      	nop
 8003da0:	200008b8 	.word	0x200008b8
 8003da4:	08006260 	.word	0x08006260
 8003da8:	0800650c 	.word	0x0800650c
 8003dac:	20001460 	.word	0x20001460
 8003db0:	2000082c 	.word	0x2000082c
 8003db4:	08003dd1 	.word	0x08003dd1
 8003db8:	08006504 	.word	0x08006504
 8003dbc:	08003be1 	.word	0x08003be1
 8003dc0:	08006508 	.word	0x08006508
 8003dc4:	08003721 	.word	0x08003721
 8003dc8:	08006690 	.word	0x08006690
 8003dcc:	f3af 8000 	nop.w

08003dd0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8003dd0:	b570      	push	{r4, r5, r6, lr}

  chMtxLock(&m2);
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <thread11+0x34>)
  chMtxLock(&m1);
 8003dd4:	4d0c      	ldr	r5, [pc, #48]	; (8003e08 <thread11+0x38>)
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8003dd6:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7fd f989 	bl	80010f0 <chMtxLock>
  chMtxLock(&m1);
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7fd f986 	bl	80010f0 <chMtxLock>
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <thread11+0x3c>)
 8003dea:	f7fd fae1 	bl	80013b0 <chCondWaitTimeout>
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8003dee:	7830      	ldrb	r0, [r6, #0]
 8003df0:	f7fe fd2e 	bl	8002850 <test_emit_token>
  chMtxUnlock(&m1);
 8003df4:	4628      	mov	r0, r5
 8003df6:	f7fd f9a3 	bl	8001140 <chMtxUnlock>
  chMtxUnlock(&m2);
 8003dfa:	4620      	mov	r0, r4
}
 8003dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8003e00:	f7fd b99e 	b.w	8001140 <chMtxUnlock>
 8003e04:	2000081c 	.word	0x2000081c
 8003e08:	2000080c 	.word	0x2000080c
 8003e0c:	2000082c 	.word	0x2000082c

08003e10 <msg1_execute>:
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8003e10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003e12:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <msg1_execute+0x64>)
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <msg1_execute+0x68>)
 8003e16:	6991      	ldr	r1, [r2, #24]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	688a      	ldr	r2, [r1, #8]
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <msg1_execute+0x6c>)
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8003e1e:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003e20:	3201      	adds	r2, #1
 8003e22:	9100      	str	r1, [sp, #0]
 8003e24:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003e28:	f7fc fdaa 	bl	8000980 <chThdCreateStatic>
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <msg1_execute+0x70>)
 8003e2e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8003e30:	f7fd fc86 	bl	8001740 <chMsgWait>
 8003e34:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8003e36:	4621      	mov	r1, r4
 8003e38:	f7fd fca2 	bl	8001780 <chMsgRelease>
  test_emit_token(msg);
 8003e3c:	b2e0      	uxtb	r0, r4
 8003e3e:	f7fe fd07 	bl	8002850 <test_emit_token>
  tp = chMsgWait();
 8003e42:	f7fd fc7d 	bl	8001740 <chMsgWait>
 8003e46:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8003e48:	4621      	mov	r1, r4
 8003e4a:	f7fd fc99 	bl	8001780 <chMsgRelease>
  test_emit_token(msg);
 8003e4e:	b2e0      	uxtb	r0, r4
 8003e50:	f7fe fcfe 	bl	8002850 <test_emit_token>
  tp = chMsgWait();
 8003e54:	f7fd fc74 	bl	8001740 <chMsgWait>
 8003e58:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	f7fd fc90 	bl	8001780 <chMsgRelease>
  test_emit_token(msg);
 8003e60:	b2e0      	uxtb	r0, r4
 8003e62:	f7fe fcf5 	bl	8002850 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8003e66:	4907      	ldr	r1, [pc, #28]	; (8003e84 <msg1_execute+0x74>)
 8003e68:	2001      	movs	r0, #1
}
 8003e6a:	b002      	add	sp, #8
 8003e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8003e70:	f7fe bd16 	b.w	80028a0 <_test_assert_sequence>
 8003e74:	200008b8 	.word	0x200008b8
 8003e78:	08006260 	.word	0x08006260
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	20001460 	.word	0x20001460
 8003e84:	08006690 	.word	0x08006690
 8003e88:	f3af 8000 	nop.w
 8003e8c:	f3af 8000 	nop.w

08003e90 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003e90:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8003e92:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003e94:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8003e96:	f7fd fc33 	bl	8001700 <chMsgSend>
  chMsgSend(p, 'B');
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	2142      	movs	r1, #66	; 0x42
 8003e9e:	f7fd fc2f 	bl	8001700 <chMsgSend>
  chMsgSend(p, 'C');
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	2143      	movs	r1, #67	; 0x43
}
 8003ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8003eaa:	f7fd bc29 	b.w	8001700 <chMsgSend>
 8003eae:	bf00      	nop

08003eb0 <mbox1_execute>:
static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}

static void mbox1_execute(void) {
 8003eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	4ecb      	ldr	r6, [pc, #812]	; (80041ec <mbox1_execute+0x33c>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003ebe:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8003ec0:	f1a1 0105 	sub.w	r1, r1, #5
 8003ec4:	fab1 f181 	clz	r1, r1
 8003ec8:	2001      	movs	r0, #1
 8003eca:	0949      	lsrs	r1, r1, #5
 8003ecc:	f7fe fcd0 	bl	8002870 <_test_assert>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f040 8118 	bne.w	8004106 <mbox1_execute+0x256>
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003edc:	4dc3      	ldr	r5, [pc, #780]	; (80041ec <mbox1_execute+0x33c>)
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7fd fc9b 	bl	8001820 <chMBPost>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8003eea:	fab0 f180 	clz	r1, r0
 8003eee:	0949      	lsrs	r1, r1, #5
 8003ef0:	2002      	movs	r0, #2
 8003ef2:	f7fe fcbd 	bl	8002870 <_test_assert>
 8003ef6:	3401      	adds	r4, #1
 8003ef8:	b980      	cbnz	r0, 8003f1c <mbox1_execute+0x6c>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8003efa:	2c46      	cmp	r4, #70	; 0x46
 8003efc:	d1ee      	bne.n	8003edc <mbox1_execute+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8003efe:	2141      	movs	r1, #65	; 0x41
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f04:	4628      	mov	r0, r5
 8003f06:	f7fd fcd3 	bl	80018b0 <chMBPostAhead>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8003f0a:	fab0 f180 	clz	r1, r0
 8003f0e:	0949      	lsrs	r1, r1, #5
 8003f10:	2003      	movs	r0, #3
 8003f12:	f7fe fcad 	bl	8002870 <_test_assert>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f000 80fb 	beq.w	8004112 <mbox1_execute+0x262>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8003f1c:	b002      	add	sp, #8
 8003f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f22:	f385 8811 	msr	BASEPRI, r5
 8003f26:	f387 8811 	msr	BASEPRI, r7
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003f2a:	69a1      	ldr	r1, [r4, #24]
 8003f2c:	fab1 f181 	clz	r1, r1
 8003f30:	0949      	lsrs	r1, r1, #5
 8003f32:	201f      	movs	r0, #31
 8003f34:	f7fe fc9c 	bl	8002870 <_test_assert>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	f040 829c 	bne.w	8004476 <mbox1_execute+0x5c6>
 8003f3e:	f385 8811 	msr	BASEPRI, r5
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003f42:	68e1      	ldr	r1, [r4, #12]
 8003f44:	68a3      	ldr	r3, [r4, #8]
 8003f46:	1acb      	subs	r3, r1, r3
 8003f48:	4259      	negs	r1, r3
 8003f4a:	4159      	adcs	r1, r3
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f7fe fc8f 	bl	8002870 <_test_assert>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d1e2      	bne.n	8003f1c <mbox1_execute+0x6c>
 8003f56:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8003f5a:	2145      	movs	r1, #69	; 0x45
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7fd fccf 	bl	8001900 <chMBPostAheadI>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8003f62:	fab0 f180 	clz	r1, r0
 8003f66:	0949      	lsrs	r1, r1, #5
 8003f68:	2021      	movs	r0, #33	; 0x21
 8003f6a:	f7fe fc81 	bl	8002870 <_test_assert>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d1d4      	bne.n	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8003f72:	2144      	movs	r1, #68	; 0x44
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7fd fcc3 	bl	8001900 <chMBPostAheadI>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8003f7a:	fab0 f180 	clz	r1, r0
 8003f7e:	0949      	lsrs	r1, r1, #5
 8003f80:	2022      	movs	r0, #34	; 0x22
 8003f82:	f7fe fc75 	bl	8002870 <_test_assert>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d1c8      	bne.n	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8003f8a:	2143      	movs	r1, #67	; 0x43
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f7fd fcb7 	bl	8001900 <chMBPostAheadI>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8003f92:	fab0 f180 	clz	r1, r0
 8003f96:	0949      	lsrs	r1, r1, #5
 8003f98:	2023      	movs	r0, #35	; 0x23
 8003f9a:	f7fe fc69 	bl	8002870 <_test_assert>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d1bc      	bne.n	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8003fa2:	2142      	movs	r1, #66	; 0x42
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7fd fcab 	bl	8001900 <chMBPostAheadI>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8003faa:	fab0 f180 	clz	r1, r0
 8003fae:	0949      	lsrs	r1, r1, #5
 8003fb0:	2024      	movs	r0, #36	; 0x24
 8003fb2:	f7fe fc5d 	bl	8002870 <_test_assert>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d1b0      	bne.n	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8003fba:	4c8c      	ldr	r4, [pc, #560]	; (80041ec <mbox1_execute+0x33c>)
 8003fbc:	2141      	movs	r1, #65	; 0x41
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7fd fc9e 	bl	8001900 <chMBPostAheadI>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8003fca:	fab0 f180 	clz	r1, r0
 8003fce:	0949      	lsrs	r1, r1, #5
 8003fd0:	2025      	movs	r0, #37	; 0x25
 8003fd2:	f7fe fc4d 	bl	8002870 <_test_assert>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d1a0      	bne.n	8003f1c <mbox1_execute+0x6c>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003fda:	68e1      	ldr	r1, [r4, #12]
 8003fdc:	68a3      	ldr	r3, [r4, #8]
 8003fde:	ebc3 0801 	rsb	r8, r3, r1
 8003fe2:	f1d8 0100 	rsbs	r1, r8, #0
 8003fe6:	eb41 0108 	adc.w	r1, r1, r8
 8003fea:	2026      	movs	r0, #38	; 0x26
 8003fec:	f7fe fc40 	bl	8002870 <_test_assert>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d193      	bne.n	8003f1c <mbox1_execute+0x6c>
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	2405      	movs	r4, #5
 8003ff8:	f04f 0820 	mov.w	r8, #32
 8003ffc:	2620      	movs	r6, #32
 8003ffe:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004002:	4d7a      	ldr	r5, [pc, #488]	; (80041ec <mbox1_execute+0x33c>)
 8004004:	a901      	add	r1, sp, #4
 8004006:	4628      	mov	r0, r5
 8004008:	f7fd fcba 	bl	8001980 <chMBFetchI>
 800400c:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8004010:	fab0 f180 	clz	r1, r0
 8004014:	0949      	lsrs	r1, r1, #5
 8004016:	2027      	movs	r0, #39	; 0x27
 8004018:	f7fe fc2a 	bl	8002870 <_test_assert>
 800401c:	2800      	cmp	r0, #0
 800401e:	f47f af7d 	bne.w	8003f1c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8004022:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004026:	f7fe fc13 	bl	8002850 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800402a:	3c01      	subs	r4, #1
 800402c:	d1e6      	bne.n	8003ffc <mbox1_execute+0x14c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 800402e:	4970      	ldr	r1, [pc, #448]	; (80041f0 <mbox1_execute+0x340>)
 8004030:	2028      	movs	r0, #40	; 0x28
 8004032:	f7fe fc35 	bl	80028a0 <_test_assert_sequence>
 8004036:	2800      	cmp	r0, #0
 8004038:	f47f af70 	bne.w	8003f1c <mbox1_execute+0x6c>
 800403c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004040:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004042:	f1a1 0c05 	sub.w	ip, r1, #5
 8004046:	f1dc 0100 	rsbs	r1, ip, #0
 800404a:	eb41 010c 	adc.w	r1, r1, ip
 800404e:	2029      	movs	r0, #41	; 0x29
 8004050:	f7fe fc0e 	bl	8002870 <_test_assert>
 8004054:	2800      	cmp	r0, #0
 8004056:	f040 80c5 	bne.w	80041e4 <mbox1_execute+0x334>
 800405a:	f384 8811 	msr	BASEPRI, r4
 800405e:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004062:	69a9      	ldr	r1, [r5, #24]
 8004064:	fab1 f181 	clz	r1, r1
 8004068:	0949      	lsrs	r1, r1, #5
 800406a:	202a      	movs	r0, #42	; 0x2a
 800406c:	f7fe fc00 	bl	8002870 <_test_assert>
 8004070:	2800      	cmp	r0, #0
 8004072:	f040 80b7 	bne.w	80041e4 <mbox1_execute+0x334>
 8004076:	f384 8811 	msr	BASEPRI, r4
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800407a:	68e9      	ldr	r1, [r5, #12]
 800407c:	68ab      	ldr	r3, [r5, #8]
 800407e:	ebc3 0e01 	rsb	lr, r3, r1
 8004082:	f1de 0100 	rsbs	r1, lr, #0
 8004086:	eb41 010e 	adc.w	r1, r1, lr
 800408a:	202b      	movs	r0, #43	; 0x2b
 800408c:	f7fe fbf0 	bl	8002870 <_test_assert>
 8004090:	2800      	cmp	r0, #0
 8004092:	f47f af43 	bne.w	8003f1c <mbox1_execute+0x6c>

  /*
   * Testing reset.
   */
  chMBReset(&mb1);
 8004096:	4628      	mov	r0, r5
 8004098:	f7fd fbb2 	bl	8001800 <chMBReset>
 800409c:	f386 8811 	msr	BASEPRI, r6

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80040a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80040a2:	1f4f      	subs	r7, r1, #5
 80040a4:	4279      	negs	r1, r7
 80040a6:	4179      	adcs	r1, r7
 80040a8:	202c      	movs	r0, #44	; 0x2c
 80040aa:	f7fe fbe1 	bl	8002870 <_test_assert>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f040 8098 	bne.w	80041e4 <mbox1_execute+0x334>
 80040b4:	f384 8811 	msr	BASEPRI, r4
 80040b8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80040bc:	69a9      	ldr	r1, [r5, #24]
 80040be:	fab1 f181 	clz	r1, r1
 80040c2:	0949      	lsrs	r1, r1, #5
 80040c4:	202d      	movs	r0, #45	; 0x2d
 80040c6:	f7fe fbd3 	bl	8002870 <_test_assert>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f040 808a 	bne.w	80041e4 <mbox1_execute+0x334>
 80040d0:	f384 8811 	msr	BASEPRI, r4
 80040d4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80040d8:	6829      	ldr	r1, [r5, #0]
 80040da:	68ab      	ldr	r3, [r5, #8]
 80040dc:	1aca      	subs	r2, r1, r3
 80040de:	4251      	negs	r1, r2
 80040e0:	4151      	adcs	r1, r2
 80040e2:	202e      	movs	r0, #46	; 0x2e
 80040e4:	f7fe fbc4 	bl	8002870 <_test_assert>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d17b      	bne.n	80041e4 <mbox1_execute+0x334>
 80040ec:	f384 8811 	msr	BASEPRI, r4
 80040f0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80040f4:	6829      	ldr	r1, [r5, #0]
 80040f6:	68eb      	ldr	r3, [r5, #12]
 80040f8:	1acb      	subs	r3, r1, r3
 80040fa:	4259      	negs	r1, r3
 80040fc:	f04f 002f 	mov.w	r0, #47	; 0x2f
 8004100:	4159      	adcs	r1, r3
 8004102:	f7fe fbb5 	bl	8002870 <_test_assert>
 8004106:	2300      	movs	r3, #0
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	b002      	add	sp, #8
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8004112:	2201      	movs	r2, #1
 8004114:	2158      	movs	r1, #88	; 0x58
 8004116:	4628      	mov	r0, r5
 8004118:	f7fd fb82 	bl	8001820 <chMBPost>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800411c:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8004120:	fab1 f181 	clz	r1, r1
 8004124:	0949      	lsrs	r1, r1, #5
 8004126:	2004      	movs	r0, #4
 8004128:	f7fe fba2 	bl	8002870 <_test_assert>
 800412c:	4604      	mov	r4, r0
 800412e:	2800      	cmp	r0, #0
 8004130:	f47f aef4 	bne.w	8003f1c <mbox1_execute+0x6c>
 8004134:	2720      	movs	r7, #32
 8004136:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 800413a:	2158      	movs	r1, #88	; 0x58
 800413c:	4628      	mov	r0, r5
 800413e:	f7fd fb97 	bl	8001870 <chMBPostI>
 8004142:	4601      	mov	r1, r0
 8004144:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004148:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 800414c:	fab1 f181 	clz	r1, r1
 8004150:	2005      	movs	r0, #5
 8004152:	0949      	lsrs	r1, r1, #5
 8004154:	f7fe fb8c 	bl	8002870 <_test_assert>
 8004158:	2800      	cmp	r0, #0
 800415a:	f47f aedf 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 800415e:	2201      	movs	r2, #1
 8004160:	2158      	movs	r1, #88	; 0x58
 8004162:	4628      	mov	r0, r5
 8004164:	f7fd fba4 	bl	80018b0 <chMBPostAhead>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004168:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 800416c:	fab1 f181 	clz	r1, r1
 8004170:	0949      	lsrs	r1, r1, #5
 8004172:	2006      	movs	r0, #6
 8004174:	f7fe fb7c 	bl	8002870 <_test_assert>
 8004178:	4604      	mov	r4, r0
 800417a:	2800      	cmp	r0, #0
 800417c:	f47f aece 	bne.w	8003f1c <mbox1_execute+0x6c>
 8004180:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8004184:	2158      	movs	r1, #88	; 0x58
 8004186:	4628      	mov	r0, r5
 8004188:	f7fd fbba 	bl	8001900 <chMBPostAheadI>
 800418c:	4601      	mov	r1, r0
 800418e:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004192:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8004196:	fab1 f181 	clz	r1, r1
 800419a:	2007      	movs	r0, #7
 800419c:	0949      	lsrs	r1, r1, #5
 800419e:	f7fe fb67 	bl	8002870 <_test_assert>
 80041a2:	4680      	mov	r8, r0
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f47f aeb9 	bne.w	8003f1c <mbox1_execute+0x6c>
 80041aa:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 80041ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80041b0:	fab1 f181 	clz	r1, r1
 80041b4:	0949      	lsrs	r1, r1, #5
 80041b6:	2008      	movs	r0, #8
 80041b8:	f7fe fb5a 	bl	8002870 <_test_assert>
 80041bc:	4604      	mov	r4, r0
 80041be:	b110      	cbz	r0, 80041c6 <mbox1_execute+0x316>
 80041c0:	f388 8811 	msr	BASEPRI, r8
 80041c4:	e6aa      	b.n	8003f1c <mbox1_execute+0x6c>
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80041ce:	69a9      	ldr	r1, [r5, #24]
 80041d0:	f1a1 0e05 	sub.w	lr, r1, #5
 80041d4:	f1de 0100 	rsbs	r1, lr, #0
 80041d8:	eb41 010e 	adc.w	r1, r1, lr
 80041dc:	2009      	movs	r0, #9
 80041de:	f7fe fb47 	bl	8002870 <_test_assert>
 80041e2:	b138      	cbz	r0, 80041f4 <mbox1_execute+0x344>
 80041e4:	f384 8811 	msr	BASEPRI, r4
 80041e8:	e698      	b.n	8003f1c <mbox1_execute+0x6c>
 80041ea:	bf00      	nop
 80041ec:	20000834 	.word	0x20000834
 80041f0:	08006510 	.word	0x08006510
 80041f4:	f380 8811 	msr	BASEPRI, r0
 80041f8:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80041fc:	68e9      	ldr	r1, [r5, #12]
 80041fe:	68ab      	ldr	r3, [r5, #8]
 8004200:	1acc      	subs	r4, r1, r3
 8004202:	4261      	negs	r1, r4
 8004204:	f04f 000a 	mov.w	r0, #10
 8004208:	4161      	adcs	r1, r4
 800420a:	f7fe fb31 	bl	8002870 <_test_assert>
 800420e:	2300      	movs	r3, #0
 8004210:	2800      	cmp	r0, #0
 8004212:	f47f af79 	bne.w	8004108 <mbox1_execute+0x258>
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	2505      	movs	r5, #5
 800421c:	e005      	b.n	800422a <mbox1_execute+0x37a>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800421e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004222:	f7fe fb15 	bl	8002850 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8004226:	3d01      	subs	r5, #1
 8004228:	d00f      	beq.n	800424a <mbox1_execute+0x39a>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 800422a:	4c94      	ldr	r4, [pc, #592]	; (800447c <mbox1_execute+0x5cc>)
 800422c:	a901      	add	r1, sp, #4
 800422e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004232:	4620      	mov	r0, r4
 8004234:	f7fd fb7c 	bl	8001930 <chMBFetch>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8004238:	fab0 f180 	clz	r1, r0
 800423c:	0949      	lsrs	r1, r1, #5
 800423e:	200b      	movs	r0, #11
 8004240:	f7fe fb16 	bl	8002870 <_test_assert>
 8004244:	2800      	cmp	r0, #0
 8004246:	d0ea      	beq.n	800421e <mbox1_execute+0x36e>
 8004248:	e668      	b.n	8003f1c <mbox1_execute+0x6c>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 800424a:	498d      	ldr	r1, [pc, #564]	; (8004480 <mbox1_execute+0x5d0>)
 800424c:	200c      	movs	r0, #12
 800424e:	f7fe fb27 	bl	80028a0 <_test_assert_sequence>
 8004252:	2800      	cmp	r0, #0
 8004254:	f47f ae62 	bne.w	8003f1c <mbox1_execute+0x6c>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8004258:	2147      	movs	r1, #71	; 0x47
 800425a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800425e:	4620      	mov	r0, r4
 8004260:	f7fd fade 	bl	8001820 <chMBPost>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8004264:	fab0 f180 	clz	r1, r0
 8004268:	0949      	lsrs	r1, r1, #5
 800426a:	200d      	movs	r0, #13
 800426c:	f7fe fb00 	bl	8002870 <_test_assert>
 8004270:	2800      	cmp	r0, #0
 8004272:	f47f ae53 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004276:	a901      	add	r1, sp, #4
 8004278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427c:	4620      	mov	r0, r4
 800427e:	f7fd fb57 	bl	8001930 <chMBFetch>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8004282:	fab0 f180 	clz	r1, r0
 8004286:	0949      	lsrs	r1, r1, #5
 8004288:	200e      	movs	r0, #14
 800428a:	f7fe faf1 	bl	8002870 <_test_assert>
 800428e:	2800      	cmp	r0, #0
 8004290:	f47f ae44 	bne.w	8003f1c <mbox1_execute+0x6c>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004294:	6821      	ldr	r1, [r4, #0]
 8004296:	68a3      	ldr	r3, [r4, #8]
 8004298:	1aca      	subs	r2, r1, r3
 800429a:	4251      	negs	r1, r2
 800429c:	4151      	adcs	r1, r2
 800429e:	200f      	movs	r0, #15
 80042a0:	f7fe fae6 	bl	8002870 <_test_assert>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f47f ae39 	bne.w	8003f1c <mbox1_execute+0x6c>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	68e3      	ldr	r3, [r4, #12]
 80042ae:	1acb      	subs	r3, r1, r3
 80042b0:	4259      	negs	r1, r3
 80042b2:	4159      	adcs	r1, r3
 80042b4:	2010      	movs	r0, #16
 80042b6:	f7fe fadb 	bl	8002870 <_test_assert>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f47f ae2e 	bne.w	8003f1c <mbox1_execute+0x6c>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 80042c0:	a901      	add	r1, sp, #4
 80042c2:	2201      	movs	r2, #1
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7fd fb33 	bl	8001930 <chMBFetch>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80042ca:	f100 0801 	add.w	r8, r0, #1
 80042ce:	f1d8 0100 	rsbs	r1, r8, #0
 80042d2:	eb41 0108 	adc.w	r1, r1, r8
 80042d6:	2011      	movs	r0, #17
 80042d8:	f7fe faca 	bl	8002870 <_test_assert>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f47f ae1d 	bne.w	8003f1c <mbox1_execute+0x6c>
 80042e2:	2720      	movs	r7, #32
 80042e4:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 80042e8:	a901      	add	r1, sp, #4
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7fd fb48 	bl	8001980 <chMBFetchI>
 80042f0:	4601      	mov	r1, r0
 80042f2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80042f6:	f101 0c01 	add.w	ip, r1, #1
 80042fa:	f1dc 0100 	rsbs	r1, ip, #0
 80042fe:	eb41 010c 	adc.w	r1, r1, ip
 8004302:	2012      	movs	r0, #18
 8004304:	f7fe fab4 	bl	8002870 <_test_assert>
 8004308:	2800      	cmp	r0, #0
 800430a:	f47f ae07 	bne.w	8003f1c <mbox1_execute+0x6c>
 800430e:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004312:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004314:	f1a1 0e05 	sub.w	lr, r1, #5
 8004318:	f1de 0100 	rsbs	r1, lr, #0
 800431c:	eb41 010e 	adc.w	r1, r1, lr
 8004320:	2013      	movs	r0, #19
 8004322:	f7fe faa5 	bl	8002870 <_test_assert>
 8004326:	2800      	cmp	r0, #0
 8004328:	f47f aeed 	bne.w	8004106 <mbox1_execute+0x256>
 800432c:	2700      	movs	r7, #0
 800432e:	f387 8811 	msr	BASEPRI, r7
 8004332:	2520      	movs	r5, #32
 8004334:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004338:	69b1      	ldr	r1, [r6, #24]
 800433a:	4c50      	ldr	r4, [pc, #320]	; (800447c <mbox1_execute+0x5cc>)
 800433c:	fab1 f181 	clz	r1, r1
 8004340:	0949      	lsrs	r1, r1, #5
 8004342:	2014      	movs	r0, #20
 8004344:	f7fe fa94 	bl	8002870 <_test_assert>
 8004348:	4606      	mov	r6, r0
 800434a:	b110      	cbz	r0, 8004352 <mbox1_execute+0x4a2>
 800434c:	f387 8811 	msr	BASEPRI, r7
 8004350:	e5e4      	b.n	8003f1c <mbox1_execute+0x6c>
 8004352:	f380 8811 	msr	BASEPRI, r0
 8004356:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800435a:	68e1      	ldr	r1, [r4, #12]
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	1acf      	subs	r7, r1, r3
 8004360:	4279      	negs	r1, r7
 8004362:	4179      	adcs	r1, r7
 8004364:	2015      	movs	r0, #21
 8004366:	f7fe fa83 	bl	8002870 <_test_assert>
 800436a:	b110      	cbz	r0, 8004372 <mbox1_execute+0x4c2>
 800436c:	f386 8811 	msr	BASEPRI, r6
 8004370:	e5d4      	b.n	8003f1c <mbox1_execute+0x6c>
 8004372:	f380 8811 	msr	BASEPRI, r0
 8004376:	f385 8811 	msr	BASEPRI, r5

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 800437a:	2141      	movs	r1, #65	; 0x41
 800437c:	4620      	mov	r0, r4
 800437e:	f7fd fa77 	bl	8001870 <chMBPostI>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8004382:	fab0 f180 	clz	r1, r0
 8004386:	0949      	lsrs	r1, r1, #5
 8004388:	2016      	movs	r0, #22
 800438a:	f7fe fa71 	bl	8002870 <_test_assert>
 800438e:	2800      	cmp	r0, #0
 8004390:	f47f adc4 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'B');
 8004394:	2142      	movs	r1, #66	; 0x42
 8004396:	4620      	mov	r0, r4
 8004398:	f7fd fa6a 	bl	8001870 <chMBPostI>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 800439c:	fab0 f180 	clz	r1, r0
 80043a0:	0949      	lsrs	r1, r1, #5
 80043a2:	2017      	movs	r0, #23
 80043a4:	f7fe fa64 	bl	8002870 <_test_assert>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f47f adb7 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'C');
 80043ae:	2143      	movs	r1, #67	; 0x43
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7fd fa5d 	bl	8001870 <chMBPostI>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80043b6:	fab0 f180 	clz	r1, r0
 80043ba:	0949      	lsrs	r1, r1, #5
 80043bc:	2018      	movs	r0, #24
 80043be:	f7fe fa57 	bl	8002870 <_test_assert>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	f47f adaa 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'D');
 80043c8:	2144      	movs	r1, #68	; 0x44
 80043ca:	4620      	mov	r0, r4
 80043cc:	f7fd fa50 	bl	8001870 <chMBPostI>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 80043d0:	fab0 f180 	clz	r1, r0
 80043d4:	0949      	lsrs	r1, r1, #5
 80043d6:	2019      	movs	r0, #25
 80043d8:	f7fe fa4a 	bl	8002870 <_test_assert>
 80043dc:	4606      	mov	r6, r0
 80043de:	2800      	cmp	r0, #0
 80043e0:	f47f ad9c 	bne.w	8003f1c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'E');
 80043e4:	2145      	movs	r1, #69	; 0x45
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7fd fa42 	bl	8001870 <chMBPostI>
 80043ec:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 80043f0:	fab0 f180 	clz	r1, r0
 80043f4:	0949      	lsrs	r1, r1, #5
 80043f6:	201a      	movs	r0, #26
 80043f8:	f7fe fa3a 	bl	8002870 <_test_assert>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f47f ad8d 	bne.w	8003f1c <mbox1_execute+0x6c>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004402:	68e1      	ldr	r1, [r4, #12]
 8004404:	68a3      	ldr	r3, [r4, #8]
 8004406:	1acc      	subs	r4, r1, r3
 8004408:	4261      	negs	r1, r4
 800440a:	4161      	adcs	r1, r4
 800440c:	201b      	movs	r0, #27
 800440e:	f7fe fa2f 	bl	8002870 <_test_assert>
 8004412:	2800      	cmp	r0, #0
 8004414:	f47f ad82 	bne.w	8003f1c <mbox1_execute+0x6c>
 8004418:	462e      	mov	r6, r5
 800441a:	4680      	mov	r8, r0
 800441c:	2505      	movs	r5, #5
 800441e:	2720      	movs	r7, #32
 8004420:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004424:	4c15      	ldr	r4, [pc, #84]	; (800447c <mbox1_execute+0x5cc>)
 8004426:	a901      	add	r1, sp, #4
 8004428:	4620      	mov	r0, r4
 800442a:	f7fd faa9 	bl	8001980 <chMBFetchI>
 800442e:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8004432:	fab0 f180 	clz	r1, r0
 8004436:	0949      	lsrs	r1, r1, #5
 8004438:	201c      	movs	r0, #28
 800443a:	f7fe fa19 	bl	8002870 <_test_assert>
 800443e:	2800      	cmp	r0, #0
 8004440:	f47f ad6c 	bne.w	8003f1c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8004444:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004448:	f7fe fa02 	bl	8002850 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800444c:	3d01      	subs	r5, #1
 800444e:	d1e6      	bne.n	800441e <mbox1_execute+0x56e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <mbox1_execute+0x5d0>)
 8004452:	201d      	movs	r0, #29
 8004454:	f7fe fa24 	bl	80028a0 <_test_assert_sequence>
 8004458:	2800      	cmp	r0, #0
 800445a:	f47f ad5f 	bne.w	8003f1c <mbox1_execute+0x6c>
 800445e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004462:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004464:	1f4a      	subs	r2, r1, #5
 8004466:	4251      	negs	r1, r2
 8004468:	4151      	adcs	r1, r2
 800446a:	201e      	movs	r0, #30
 800446c:	f7fe fa00 	bl	8002870 <_test_assert>
 8004470:	2800      	cmp	r0, #0
 8004472:	f43f ad56 	beq.w	8003f22 <mbox1_execute+0x72>
 8004476:	f385 8811 	msr	BASEPRI, r5
 800447a:	e54f      	b.n	8003f1c <mbox1_execute+0x6c>
 800447c:	20000834 	.word	0x20000834
 8004480:	08006510 	.word	0x08006510
 8004484:	f3af 8000 	nop.w
 8004488:	f3af 8000 	nop.w
 800448c:	f3af 8000 	nop.w

08004490 <mbox1_setup>:
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
 8004490:	2205      	movs	r2, #5
 8004492:	4902      	ldr	r1, [pc, #8]	; (800449c <mbox1_setup+0xc>)
 8004494:	4802      	ldr	r0, [pc, #8]	; (80044a0 <mbox1_setup+0x10>)
 8004496:	f7fd b983 	b.w	80017a0 <chMBObjectInit>
 800449a:	bf00      	nop
 800449c:	20000b30 	.word	0x20000b30
 80044a0:	20000834 	.word	0x20000834
 80044a4:	f3af 8000 	nop.w
 80044a8:	f3af 8000 	nop.w
 80044ac:	f3af 8000 	nop.w

080044b0 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80044b0:	2043      	movs	r0, #67	; 0x43
 80044b2:	f7fe b9cd 	b.w	8002850 <test_emit_token>
 80044b6:	bf00      	nop
 80044b8:	f3af 8000 	nop.w
 80044bc:	f3af 8000 	nop.w

080044c0 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80044c0:	2042      	movs	r0, #66	; 0x42
 80044c2:	f7fe b9c5 	b.w	8002850 <test_emit_token>
 80044c6:	bf00      	nop
 80044c8:	f3af 8000 	nop.w
 80044cc:	f3af 8000 	nop.w

080044d0 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 80044d0:	2041      	movs	r0, #65	; 0x41
 80044d2:	f7fe b9bd 	b.w	8002850 <test_emit_token>
 80044d6:	bf00      	nop
 80044d8:	f3af 8000 	nop.w
 80044dc:	f3af 8000 	nop.w

080044e0 <evt1_execute>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 80044e0:	b510      	push	{r4, lr}
 80044e2:	4c1f      	ldr	r4, [pc, #124]	; (8004560 <evt1_execute+0x80>)
 80044e4:	b08a      	sub	sp, #40	; 0x28
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80044e6:	4620      	mov	r0, r4
 80044e8:	4669      	mov	r1, sp
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ee:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80044f0:	6024      	str	r4, [r4, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80044f2:	f7fc ff6d 	bl	80013d0 <chEvtRegisterMaskWithFlags>
 80044f6:	4620      	mov	r0, r4
 80044f8:	a905      	add	r1, sp, #20
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044fe:	2202      	movs	r2, #2
 8004500:	f7fc ff66 	bl	80013d0 <chEvtRegisterMaskWithFlags>
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8004504:	6821      	ldr	r1, [r4, #0]
 8004506:	1b09      	subs	r1, r1, r4
 8004508:	bf18      	it	ne
 800450a:	2101      	movne	r1, #1
 800450c:	2001      	movs	r0, #1
 800450e:	f7fe f9af 	bl	8002870 <_test_assert>
 8004512:	b108      	cbz	r0, 8004518 <evt1_execute+0x38>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8004514:	b00a      	add	sp, #40	; 0x28
 8004516:	bd10      	pop	{r4, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8004518:	4669      	mov	r1, sp
 800451a:	4620      	mov	r0, r4
 800451c:	f7fc ff70 	bl	8001400 <chEvtUnregister>
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	1b09      	subs	r1, r1, r4
 8004524:	bf18      	it	ne
 8004526:	2101      	movne	r1, #1
 8004528:	2002      	movs	r0, #2
 800452a:	f7fe f9a1 	bl	8002870 <_test_assert>
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f0      	bne.n	8004514 <evt1_execute+0x34>
  chEvtUnregister(&es1, &el2);
 8004532:	a905      	add	r1, sp, #20
 8004534:	4620      	mov	r0, r4
 8004536:	f7fc ff63 	bl	8001400 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800453a:	6821      	ldr	r1, [r4, #0]
 800453c:	1b09      	subs	r1, r1, r4
 800453e:	fab1 f181 	clz	r1, r1
 8004542:	2003      	movs	r0, #3
 8004544:	0949      	lsrs	r1, r1, #5
 8004546:	f7fe f993 	bl	8002870 <_test_assert>
 800454a:	2800      	cmp	r0, #0
 800454c:	d1e2      	bne.n	8004514 <evt1_execute+0x34>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
 800454e:	2107      	movs	r1, #7
 8004550:	4804      	ldr	r0, [pc, #16]	; (8004564 <evt1_execute+0x84>)
 8004552:	f7fc ffdd 	bl	8001510 <chEvtDispatch>
  test_assert_sequence(4, "ABC");
 8004556:	4904      	ldr	r1, [pc, #16]	; (8004568 <evt1_execute+0x88>)
 8004558:	2004      	movs	r0, #4
 800455a:	f7fe f9a1 	bl	80028a0 <_test_assert_sequence>
 800455e:	e7d9      	b.n	8004514 <evt1_execute+0x34>
 8004560:	2000085c 	.word	0x2000085c
 8004564:	08006870 	.word	0x08006870
 8004568:	08006690 	.word	0x08006690
 800456c:	f3af 8000 	nop.w

08004570 <evt3_setup>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8004570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004574:	f7fc bf5c 	b.w	8001430 <chEvtGetAndClearEvents>
 8004578:	f3af 8000 	nop.w
 800457c:	f3af 8000 	nop.w

08004580 <evt2_setup>:
 8004580:	f7ff bff6 	b.w	8004570 <evt3_setup>
 8004584:	f3af 8000 	nop.w
 8004588:	f3af 8000 	nop.w
 800458c:	f3af 8000 	nop.w

08004590 <evt1_setup>:
 8004590:	f7ff bfee 	b.w	8004570 <evt3_setup>
 8004594:	f3af 8000 	nop.w
 8004598:	f3af 8000 	nop.w
 800459c:	f3af 8000 	nop.w

080045a0 <evt2_execute>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80045a4:	2007      	movs	r0, #7
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80045a6:	b08d      	sub	sp, #52	; 0x34
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80045a8:	f7fc ff52 	bl	8001450 <chEvtAddEvents>
  m = chEvtWaitOne(ALL_EVENTS);
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b0:	f7fc ffce 	bl	8001550 <chEvtWaitOne>
  test_assert(1, m == 1, "single event error");
 80045b4:	f1a0 0101 	sub.w	r1, r0, #1
 80045b8:	fab1 f181 	clz	r1, r1
 80045bc:	0949      	lsrs	r1, r1, #5
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fe f956 	bl	8002870 <_test_assert>
 80045c4:	b110      	cbz	r0, 80045cc <evt2_execute+0x2c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80045c6:	b00d      	add	sp, #52	; 0x34
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045d0:	f7fc ffbe 	bl	8001550 <chEvtWaitOne>
  test_assert(2, m == 2, "single event error");
 80045d4:	f1a0 0102 	sub.w	r1, r0, #2
 80045d8:	fab1 f181 	clz	r1, r1
 80045dc:	0949      	lsrs	r1, r1, #5
 80045de:	2002      	movs	r0, #2
 80045e0:	f7fe f946 	bl	8002870 <_test_assert>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1ee      	bne.n	80045c6 <evt2_execute+0x26>
  m = chEvtWaitOne(ALL_EVENTS);
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ec:	f7fc ffb0 	bl	8001550 <chEvtWaitOne>
  test_assert(3, m == 4, "single event error");
 80045f0:	f1a0 0104 	sub.w	r1, r0, #4
 80045f4:	fab1 f181 	clz	r1, r1
 80045f8:	0949      	lsrs	r1, r1, #5
 80045fa:	2003      	movs	r0, #3
 80045fc:	f7fe f938 	bl	8002870 <_test_assert>
 8004600:	2800      	cmp	r0, #0
 8004602:	d1e0      	bne.n	80045c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8004604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004608:	f7fc ff12 	bl	8001430 <chEvtGetAndClearEvents>
  test_assert(4, m == 0, "stuck event");
 800460c:	fab0 f180 	clz	r1, r0
 8004610:	0949      	lsrs	r1, r1, #5
 8004612:	2004      	movs	r0, #4
 8004614:	f7fe f92c 	bl	8002870 <_test_assert>
 8004618:	4604      	mov	r4, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	d1d3      	bne.n	80045c6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 800461e:	f7fe f9af 	bl	8002980 <test_wait_tick>
 8004622:	f04f 0920 	mov.w	r9, #32
 8004626:	f389 8811 	msr	BASEPRI, r9
 800462a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800462e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8004632:	f384 8811 	msr	BASEPRI, r4
 8004636:	4f76      	ldr	r7, [pc, #472]	; (8004810 <evt2_execute+0x270>)
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004638:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800482c <evt2_execute+0x28c>
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	f8da 6000 	ldr.w	r6, [sl]
 8004642:	688a      	ldr	r2, [r1, #8]
 8004644:	4b73      	ldr	r3, [pc, #460]	; (8004814 <evt2_execute+0x274>)
 8004646:	9100      	str	r1, [sp, #0]
 8004648:	3a01      	subs	r2, #1
 800464a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800464e:	4630      	mov	r0, r6
 8004650:	f7fc f996 	bl	8000980 <chThdCreateStatic>
 8004654:	4c70      	ldr	r4, [pc, #448]	; (8004818 <evt2_execute+0x278>)
 8004656:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8004658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800465c:	f7fc ff78 	bl	8001550 <chEvtWaitOne>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8004660:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8004664:	4683      	mov	fp, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8004666:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 800466a:	2005      	movs	r0, #5
 800466c:	f7fe f940 	bl	80028f0 <_test_assert_time_window>
 8004670:	2800      	cmp	r0, #0
 8004672:	d1a8      	bne.n	80045c6 <evt2_execute+0x26>
  test_assert(6, m == 1, "single event error");
 8004674:	f1ab 0101 	sub.w	r1, fp, #1
 8004678:	fab1 f181 	clz	r1, r1
 800467c:	0949      	lsrs	r1, r1, #5
 800467e:	2006      	movs	r0, #6
 8004680:	f7fe f8f6 	bl	8002870 <_test_assert>
 8004684:	2800      	cmp	r0, #0
 8004686:	d19e      	bne.n	80045c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8004688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800468c:	f7fc fed0 	bl	8001430 <chEvtGetAndClearEvents>
  test_assert(7, m == 0, "stuck event");
 8004690:	fab0 f180 	clz	r1, r0
 8004694:	0949      	lsrs	r1, r1, #5
 8004696:	2007      	movs	r0, #7
 8004698:	f7fe f8ea 	bl	8002870 <_test_assert>
 800469c:	2800      	cmp	r0, #0
 800469e:	d192      	bne.n	80045c6 <evt2_execute+0x26>
  test_wait_threads();
 80046a0:	f7fe f956 	bl	8002950 <test_wait_threads>

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
 80046a4:	2005      	movs	r0, #5
 80046a6:	f7fc fed3 	bl	8001450 <chEvtAddEvents>
  m = chEvtWaitAny(ALL_EVENTS);
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ae:	f7fc ff6f 	bl	8001590 <chEvtWaitAny>
  test_assert(8, m == 5, "unexpected pending bit");
 80046b2:	1f45      	subs	r5, r0, #5
 80046b4:	4269      	negs	r1, r5
 80046b6:	4169      	adcs	r1, r5
 80046b8:	2008      	movs	r0, #8
 80046ba:	f7fe f8d9 	bl	8002870 <_test_assert>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d181      	bne.n	80045c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c6:	f7fc feb3 	bl	8001430 <chEvtGetAndClearEvents>
  test_assert(9, m == 0, "stuck event");
 80046ca:	fab0 f180 	clz	r1, r0
 80046ce:	0949      	lsrs	r1, r1, #5
 80046d0:	2009      	movs	r0, #9
 80046d2:	f7fe f8cd 	bl	8002870 <_test_assert>
 80046d6:	4683      	mov	fp, r0
 80046d8:	2800      	cmp	r0, #0
 80046da:	f47f af74 	bne.w	80045c6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80046de:	f7fe f94f 	bl	8002980 <test_wait_tick>
 80046e2:	f389 8811 	msr	BASEPRI, r9
 80046e6:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 80046ea:	f38b 8811 	msr	BASEPRI, fp
 80046ee:	69b9      	ldr	r1, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80046f0:	4b48      	ldr	r3, [pc, #288]	; (8004814 <evt2_execute+0x274>)
 80046f2:	688a      	ldr	r2, [r1, #8]
 80046f4:	9100      	str	r1, [sp, #0]
 80046f6:	3a01      	subs	r2, #1
 80046f8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7fc f93f 	bl	8000980 <chThdCreateStatic>
 8004702:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8004704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004708:	f7fc ff42 	bl	8001590 <chEvtWaitAny>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800470c:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8004710:	4606      	mov	r6, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8004712:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 8004716:	200a      	movs	r0, #10
 8004718:	f7fe f8ea 	bl	80028f0 <_test_assert_time_window>
 800471c:	2800      	cmp	r0, #0
 800471e:	f47f af52 	bne.w	80045c6 <evt2_execute+0x26>
  test_assert(11, m == 1, "single event error");
 8004722:	1e70      	subs	r0, r6, #1
 8004724:	4241      	negs	r1, r0
 8004726:	4141      	adcs	r1, r0
 8004728:	200b      	movs	r0, #11
 800472a:	f7fe f8a1 	bl	8002870 <_test_assert>
 800472e:	2800      	cmp	r0, #0
 8004730:	f47f af49 	bne.w	80045c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8004734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004738:	f7fc fe7a 	bl	8001430 <chEvtGetAndClearEvents>
  test_assert(12, m == 0, "stuck event");
 800473c:	fab0 f180 	clz	r1, r0
 8004740:	0949      	lsrs	r1, r1, #5
 8004742:	200c      	movs	r0, #12
 8004744:	f7fe f894 	bl	8002870 <_test_assert>
 8004748:	4681      	mov	r9, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	f47f af3b 	bne.w	80045c6 <evt2_execute+0x26>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8004750:	4e32      	ldr	r6, [pc, #200]	; (800481c <evt2_execute+0x27c>)
 8004752:	4d33      	ldr	r5, [pc, #204]	; (8004820 <evt2_execute+0x280>)
  test_wait_threads();
 8004754:	f7fe f8fc 	bl	8002950 <test_wait_threads>
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8004758:	4630      	mov	r0, r6
 800475a:	a902      	add	r1, sp, #8
 800475c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004760:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8004762:	6036      	str	r6, [r6, #0]
 8004764:	602d      	str	r5, [r5, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8004766:	f7fc fe33 	bl	80013d0 <chEvtRegisterMaskWithFlags>
 800476a:	4628      	mov	r0, r5
 800476c:	a907      	add	r1, sp, #28
 800476e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004772:	2204      	movs	r2, #4
 8004774:	f7fc fe2c 	bl	80013d0 <chEvtRegisterMaskWithFlags>
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8004778:	f7fe f902 	bl	8002980 <test_wait_tick>
 800477c:	2320      	movs	r3, #32
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
 8004786:	f389 8811 	msr	BASEPRI, r9
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800478a:	69ba      	ldr	r2, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <evt2_execute+0x284>)
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	f8da 0000 	ldr.w	r0, [sl]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	3a01      	subs	r2, #1
 8004798:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <evt2_execute+0x288>)
 800479e:	f7fc f8ef 	bl	8000980 <chThdCreateStatic>
 80047a2:	6020      	str	r0, [r4, #0]
                                 thread2, "A");
  m = chEvtWaitAll(5);
 80047a4:	2005      	movs	r0, #5
 80047a6:	f7fc ff13 	bl	80015d0 <chEvtWaitAll>
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80047aa:	f208 2226 	addw	r2, r8, #550	; 0x226
 80047ae:	f508 71fa 	add.w	r1, r8, #500	; 0x1f4
 80047b2:	200d      	movs	r0, #13
 80047b4:	f7fe f89c 	bl	80028f0 <_test_assert_time_window>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f47f af04 	bne.w	80045c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80047be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c2:	f7fc fe35 	bl	8001430 <chEvtGetAndClearEvents>
  test_assert(14, m == 0, "stuck event");
 80047c6:	fab0 f180 	clz	r1, r0
 80047ca:	0949      	lsrs	r1, r1, #5
 80047cc:	200e      	movs	r0, #14
 80047ce:	f7fe f84f 	bl	8002870 <_test_assert>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f47f aef7 	bne.w	80045c6 <evt2_execute+0x26>
  test_wait_threads();
 80047d8:	f7fe f8ba 	bl	8002950 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80047dc:	a902      	add	r1, sp, #8
 80047de:	4630      	mov	r0, r6
 80047e0:	f7fc fe0e 	bl	8001400 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 80047e4:	a907      	add	r1, sp, #28
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7fc fe0a 	bl	8001400 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 80047ec:	6831      	ldr	r1, [r6, #0]
 80047ee:	1b8a      	subs	r2, r1, r6
 80047f0:	4251      	negs	r1, r2
 80047f2:	4151      	adcs	r1, r2
 80047f4:	200f      	movs	r0, #15
 80047f6:	f7fe f83b 	bl	8002870 <_test_assert>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f47f aee3 	bne.w	80045c6 <evt2_execute+0x26>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8004800:	6829      	ldr	r1, [r5, #0]
 8004802:	1b4b      	subs	r3, r1, r5
 8004804:	4259      	negs	r1, r3
 8004806:	4159      	adcs	r1, r3
 8004808:	2010      	movs	r0, #16
 800480a:	f7fe f831 	bl	8002870 <_test_assert>
 800480e:	e6da      	b.n	80045c6 <evt2_execute+0x26>
 8004810:	200008b8 	.word	0x200008b8
 8004814:	08004861 	.word	0x08004861
 8004818:	20001460 	.word	0x20001460
 800481c:	2000085c 	.word	0x2000085c
 8004820:	20000860 	.word	0x20000860
 8004824:	0800650c 	.word	0x0800650c
 8004828:	08004831 	.word	0x08004831
 800482c:	08006260 	.word	0x08006260

08004830 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8004830:	b508      	push	{r3, lr}
 *
 * @api
 */
static inline void chEvtBroadcast(event_source_t *esp) {

  chEvtBroadcastFlags(esp, (eventflags_t)0);
 8004832:	2100      	movs	r1, #0
 8004834:	4806      	ldr	r0, [pc, #24]	; (8004850 <thread2+0x20>)
 8004836:	f7fc fe5b 	bl	80014f0 <chEvtBroadcastFlags>

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 800483a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800483e:	f7fc f90f 	bl	8000a60 <chThdSleep>
 8004842:	2100      	movs	r1, #0
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <thread2+0x24>)
  chEvtBroadcast(&es2);
}
 8004846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800484a:	f7fc be51 	b.w	80014f0 <chEvtBroadcastFlags>
 800484e:	bf00      	nop
 8004850:	2000085c 	.word	0x2000085c
 8004854:	20000860 	.word	0x20000860
 8004858:	f3af 8000 	nop.w
 800485c:	f3af 8000 	nop.w

08004860 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8004864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004868:	f7fc f8fa 	bl	8000a60 <chThdSleep>
  chEvtSignal((thread_t *)p, 1);
 800486c:	4620      	mov	r0, r4
 800486e:	2101      	movs	r1, #1
}
 8004870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
 8004874:	f7fc be2c 	b.w	80014d0 <chEvtSignal>
 8004878:	f3af 8000 	nop.w
 800487c:	f3af 8000 	nop.w

08004880 <evt3_execute>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8004880:	b508      	push	{r3, lr}
  eventmask_t m;

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 8004882:	2100      	movs	r1, #0
 8004884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004888:	f7fc fec2 	bl	8001610 <chEvtWaitOneTimeout>
  test_assert(1, m == 0, "spurious event");
 800488c:	fab0 f180 	clz	r1, r0
 8004890:	0949      	lsrs	r1, r1, #5
 8004892:	2001      	movs	r0, #1
 8004894:	f7fd ffec 	bl	8002870 <_test_assert>
 8004898:	b100      	cbz	r0, 800489c <evt3_execute+0x1c>
 800489a:	bd08      	pop	{r3, pc}
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 800489c:	4601      	mov	r1, r0
 800489e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a2:	f7fc fedd 	bl	8001660 <chEvtWaitAnyTimeout>
  test_assert(2, m == 0, "spurious event");
 80048a6:	fab0 f180 	clz	r1, r0
 80048aa:	0949      	lsrs	r1, r1, #5
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fd ffdf 	bl	8002870 <_test_assert>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d1f1      	bne.n	800489a <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80048b6:	4601      	mov	r1, r0
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048bc:	f7fc fef8 	bl	80016b0 <chEvtWaitAllTimeout>
  test_assert(3, m == 0, "spurious event");
 80048c0:	fab0 f180 	clz	r1, r0
 80048c4:	0949      	lsrs	r1, r1, #5
 80048c6:	2003      	movs	r0, #3
 80048c8:	f7fd ffd2 	bl	8002870 <_test_assert>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1e4      	bne.n	800489a <evt3_execute+0x1a>
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
 80048d0:	210a      	movs	r1, #10
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d6:	f7fc fe9b 	bl	8001610 <chEvtWaitOneTimeout>
  test_assert(4, m == 0, "spurious event");
 80048da:	fab0 f180 	clz	r1, r0
 80048de:	0949      	lsrs	r1, r1, #5
 80048e0:	2004      	movs	r0, #4
 80048e2:	f7fd ffc5 	bl	8002870 <_test_assert>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d1d7      	bne.n	800489a <evt3_execute+0x1a>
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
 80048ea:	210a      	movs	r1, #10
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	f7fc feb6 	bl	8001660 <chEvtWaitAnyTimeout>
  test_assert(5, m == 0, "spurious event");
 80048f4:	fab0 f180 	clz	r1, r0
 80048f8:	0949      	lsrs	r1, r1, #5
 80048fa:	2005      	movs	r0, #5
 80048fc:	f7fd ffb8 	bl	8002870 <_test_assert>
 8004900:	2800      	cmp	r0, #0
 8004902:	d1ca      	bne.n	800489a <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
 8004904:	210a      	movs	r1, #10
 8004906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490a:	f7fc fed1 	bl	80016b0 <chEvtWaitAllTimeout>
  test_assert(6, m == 0, "spurious event");
 800490e:	fab0 f180 	clz	r1, r0
 8004912:	0949      	lsrs	r1, r1, #5
 8004914:	2006      	movs	r0, #6
}
 8004916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 800491a:	f7fd bfa9 	b.w	8002870 <_test_assert>
 800491e:	bf00      	nop

08004920 <heap1_execute>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	b082      	sub	sp, #8
  void *p1, *p2, *p3;
  size_t n, sz;

  /* Unrelated, for coverage only.*/
  (void)chCoreGetStatusX();
 8004924:	f7fd f9dc 	bl	8001ce0 <chCoreGetStatusX>

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8004928:	a901      	add	r1, sp, #4
 800492a:	2000      	movs	r0, #0
 800492c:	f7fd faa0 	bl	8001e70 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8004930:	2110      	movs	r1, #16
 8004932:	2000      	movs	r0, #0
 8004934:	f7fd fa04 	bl	8001d40 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8004938:	1c01      	adds	r1, r0, #0
 800493a:	4605      	mov	r5, r0
 800493c:	bf18      	it	ne
 800493e:	2101      	movne	r1, #1
 8004940:	2001      	movs	r0, #1
 8004942:	f7fd ff95 	bl	8002870 <_test_assert>
 8004946:	b108      	cbz	r0, 800494c <heap1_execute+0x2c>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8004948:	b002      	add	sp, #8
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	4604      	mov	r4, r0
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800494e:	4628      	mov	r0, r5
 8004950:	f7fd fa3e 	bl	8001dd0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8004954:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8004958:	4620      	mov	r0, r4
 800495a:	f7fd f9f1 	bl	8001d40 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800495e:	fab0 f180 	clz	r1, r0
 8004962:	0949      	lsrs	r1, r1, #5
 8004964:	2002      	movs	r0, #2
 8004966:	f7fd ff83 	bl	8002870 <_test_assert>
 800496a:	2800      	cmp	r0, #0
 800496c:	d1ec      	bne.n	8004948 <heap1_execute+0x28>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800496e:	a901      	add	r1, sp, #4
 8004970:	487b      	ldr	r0, [pc, #492]	; (8004b60 <heap1_execute+0x240>)
 8004972:	f7fd fa7d 	bl	8001e70 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004976:	2110      	movs	r1, #16
 8004978:	4879      	ldr	r0, [pc, #484]	; (8004b60 <heap1_execute+0x240>)
 800497a:	f7fd f9e1 	bl	8001d40 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800497e:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004980:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004982:	4877      	ldr	r0, [pc, #476]	; (8004b60 <heap1_execute+0x240>)
 8004984:	f7fd f9dc 	bl	8001d40 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8004988:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 800498a:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 800498c:	4874      	ldr	r0, [pc, #464]	; (8004b60 <heap1_execute+0x240>)
 800498e:	f7fd f9d7 	bl	8001d40 <chHeapAlloc>
 8004992:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8004994:	4630      	mov	r0, r6
 8004996:	f7fd fa1b 	bl	8001dd0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 800499a:	4628      	mov	r0, r5
 800499c:	f7fd fa18 	bl	8001dd0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fd fa15 	bl	8001dd0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80049a6:	4669      	mov	r1, sp
 80049a8:	486d      	ldr	r0, [pc, #436]	; (8004b60 <heap1_execute+0x240>)
 80049aa:	f7fd fa61 	bl	8001e70 <chHeapStatus>
 80049ae:	f1a0 0101 	sub.w	r1, r0, #1
 80049b2:	fab1 f181 	clz	r1, r1
 80049b6:	0949      	lsrs	r1, r1, #5
 80049b8:	2003      	movs	r0, #3
 80049ba:	f7fd ff59 	bl	8002870 <_test_assert>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d1c2      	bne.n	8004948 <heap1_execute+0x28>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80049c2:	2110      	movs	r1, #16
 80049c4:	4866      	ldr	r0, [pc, #408]	; (8004b60 <heap1_execute+0x240>)
 80049c6:	f7fd f9bb 	bl	8001d40 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80049ca:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80049cc:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80049ce:	4864      	ldr	r0, [pc, #400]	; (8004b60 <heap1_execute+0x240>)
 80049d0:	f7fd f9b6 	bl	8001d40 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80049d4:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80049d6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80049d8:	4861      	ldr	r0, [pc, #388]	; (8004b60 <heap1_execute+0x240>)
 80049da:	f7fd f9b1 	bl	8001d40 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 80049de:	f7fd f9f7 	bl	8001dd0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7fd f9f4 	bl	8001dd0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7fd f9f1 	bl	8001dd0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80049ee:	4669      	mov	r1, sp
 80049f0:	485b      	ldr	r0, [pc, #364]	; (8004b60 <heap1_execute+0x240>)
 80049f2:	f7fd fa3d 	bl	8001e70 <chHeapStatus>
 80049f6:	f1a0 0101 	sub.w	r1, r0, #1
 80049fa:	fab1 f181 	clz	r1, r1
 80049fe:	0949      	lsrs	r1, r1, #5
 8004a00:	2004      	movs	r0, #4
 8004a02:	f7fd ff35 	bl	8002870 <_test_assert>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d19e      	bne.n	8004948 <heap1_execute+0x28>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8004a0a:	2111      	movs	r1, #17
 8004a0c:	4854      	ldr	r0, [pc, #336]	; (8004b60 <heap1_execute+0x240>)
 8004a0e:	f7fd f997 	bl	8001d40 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004a12:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8004a14:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004a16:	4852      	ldr	r0, [pc, #328]	; (8004b60 <heap1_execute+0x240>)
 8004a18:	f7fd f992 	bl	8001d40 <chHeapAlloc>
 8004a1c:	4605      	mov	r5, r0
  chHeapFree(p1);
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7fd f9d6 	bl	8001dd0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8004a24:	4669      	mov	r1, sp
 8004a26:	484e      	ldr	r0, [pc, #312]	; (8004b60 <heap1_execute+0x240>)
 8004a28:	f7fd fa22 	bl	8001e70 <chHeapStatus>
 8004a2c:	f1a0 0102 	sub.w	r1, r0, #2
 8004a30:	fab1 f181 	clz	r1, r1
 8004a34:	0949      	lsrs	r1, r1, #5
 8004a36:	2005      	movs	r0, #5
 8004a38:	f7fd ff1a 	bl	8002870 <_test_assert>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d183      	bne.n	8004948 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004a40:	2110      	movs	r1, #16
 8004a42:	4847      	ldr	r0, [pc, #284]	; (8004b60 <heap1_execute+0x240>)
 8004a44:	f7fd f97c 	bl	8001d40 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8004a48:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004a4a:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8004a4c:	4844      	ldr	r0, [pc, #272]	; (8004b60 <heap1_execute+0x240>)
 8004a4e:	f7fd fa0f 	bl	8001e70 <chHeapStatus>
 8004a52:	2801      	cmp	r0, #1
 8004a54:	f000 8081 	beq.w	8004b5a <heap1_execute+0x23a>
 8004a58:	4669      	mov	r1, sp
 8004a5a:	4841      	ldr	r0, [pc, #260]	; (8004b60 <heap1_execute+0x240>)
 8004a5c:	f7fd fa08 	bl	8001e70 <chHeapStatus>
 8004a60:	f1a0 0102 	sub.w	r1, r0, #2
 8004a64:	fab1 f181 	clz	r1, r1
 8004a68:	0949      	lsrs	r1, r1, #5
 8004a6a:	2006      	movs	r0, #6
 8004a6c:	f7fd ff00 	bl	8002870 <_test_assert>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f47f af69 	bne.w	8004948 <heap1_execute+0x28>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7fd f9aa 	bl	8001dd0 <chHeapFree>
  chHeapFree(p1);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7fd f9a7 	bl	8001dd0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004a82:	4669      	mov	r1, sp
 8004a84:	4836      	ldr	r0, [pc, #216]	; (8004b60 <heap1_execute+0x240>)
 8004a86:	f7fd f9f3 	bl	8001e70 <chHeapStatus>
 8004a8a:	1e46      	subs	r6, r0, #1
 8004a8c:	4271      	negs	r1, r6
 8004a8e:	4171      	adcs	r1, r6
 8004a90:	2007      	movs	r0, #7
 8004a92:	f7fd feed 	bl	8002870 <_test_assert>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	f47f af56 	bne.w	8004948 <heap1_execute+0x28>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	4830      	ldr	r0, [pc, #192]	; (8004b60 <heap1_execute+0x240>)
 8004aa0:	f7fd f94e 	bl	8001d40 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004aa4:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8004aa6:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8004aa8:	482d      	ldr	r0, [pc, #180]	; (8004b60 <heap1_execute+0x240>)
 8004aaa:	f7fd f949 	bl	8001d40 <chHeapAlloc>
 8004aae:	4604      	mov	r4, r0
  chHeapFree(p1);
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fd f98d 	bl	8001dd0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8004ab6:	4669      	mov	r1, sp
 8004ab8:	4829      	ldr	r0, [pc, #164]	; (8004b60 <heap1_execute+0x240>)
 8004aba:	f7fd f9d9 	bl	8001e70 <chHeapStatus>
 8004abe:	1e85      	subs	r5, r0, #2
 8004ac0:	4269      	negs	r1, r5
 8004ac2:	4169      	adcs	r1, r5
 8004ac4:	2008      	movs	r0, #8
 8004ac6:	f7fd fed3 	bl	8002870 <_test_assert>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f47f af3c 	bne.w	8004948 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	4823      	ldr	r0, [pc, #140]	; (8004b60 <heap1_execute+0x240>)
 8004ad4:	f7fd f934 	bl	8001d40 <chHeapAlloc>
  chHeapFree(p1);
 8004ad8:	f7fd f97a 	bl	8001dd0 <chHeapFree>
  chHeapFree(p2);
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7fd f977 	bl	8001dd0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004ae2:	4669      	mov	r1, sp
 8004ae4:	481e      	ldr	r0, [pc, #120]	; (8004b60 <heap1_execute+0x240>)
 8004ae6:	f7fd f9c3 	bl	8001e70 <chHeapStatus>
 8004aea:	3801      	subs	r0, #1
 8004aec:	4241      	negs	r1, r0
 8004aee:	4141      	adcs	r1, r0
 8004af0:	2009      	movs	r0, #9
 8004af2:	f7fd febd 	bl	8002870 <_test_assert>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f47f af26 	bne.w	8004948 <heap1_execute+0x28>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8004afc:	4669      	mov	r1, sp
 8004afe:	4818      	ldr	r0, [pc, #96]	; (8004b60 <heap1_execute+0x240>)
 8004b00:	f7fd f9b6 	bl	8001e70 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8004b04:	9900      	ldr	r1, [sp, #0]
 8004b06:	4816      	ldr	r0, [pc, #88]	; (8004b60 <heap1_execute+0x240>)
 8004b08:	f7fd f91a 	bl	8001d40 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8004b0c:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8004b0e:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8004b10:	4813      	ldr	r0, [pc, #76]	; (8004b60 <heap1_execute+0x240>)
 8004b12:	f7fd f9ad 	bl	8001e70 <chHeapStatus>
 8004b16:	fab0 f180 	clz	r1, r0
 8004b1a:	0949      	lsrs	r1, r1, #5
 8004b1c:	200a      	movs	r0, #10
 8004b1e:	f7fd fea7 	bl	8002870 <_test_assert>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f47f af10 	bne.w	8004948 <heap1_execute+0x28>
  chHeapFree(p1);
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7fd f951 	bl	8001dd0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8004b2e:	4669      	mov	r1, sp
 8004b30:	480b      	ldr	r0, [pc, #44]	; (8004b60 <heap1_execute+0x240>)
 8004b32:	f7fd f99d 	bl	8001e70 <chHeapStatus>
 8004b36:	1e42      	subs	r2, r0, #1
 8004b38:	4251      	negs	r1, r2
 8004b3a:	4151      	adcs	r1, r2
 8004b3c:	200b      	movs	r0, #11
 8004b3e:	f7fd fe97 	bl	8002870 <_test_assert>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f47f af00 	bne.w	8004948 <heap1_execute+0x28>
  test_assert(12, n == sz, "size changed");
 8004b48:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004b4c:	1acb      	subs	r3, r1, r3
 8004b4e:	4259      	negs	r1, r3
 8004b50:	4159      	adcs	r1, r3
 8004b52:	200c      	movs	r0, #12
 8004b54:	f7fd fe8c 	bl	8002870 <_test_assert>
 8004b58:	e6f6      	b.n	8004948 <heap1_execute+0x28>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	e785      	b.n	8004a6a <heap1_execute+0x14a>
 8004b5e:	bf00      	nop
 8004b60:	20001490 	.word	0x20001490
 8004b64:	f3af 8000 	nop.w
 8004b68:	f3af 8000 	nop.w
 8004b6c:	f3af 8000 	nop.w

08004b70 <heap1_setup>:
 * sequence.
 */

static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
 8004b70:	f44f 6211 	mov.w	r2, #2320	; 0x910
 8004b74:	4901      	ldr	r1, [pc, #4]	; (8004b7c <heap1_setup+0xc>)
 8004b76:	4802      	ldr	r0, [pc, #8]	; (8004b80 <heap1_setup+0x10>)
 8004b78:	f7fd b8d2 	b.w	8001d20 <chHeapObjectInit>
 8004b7c:	20000b30 	.word	0x20000b30
 8004b80:	20001490 	.word	0x20001490
 8004b84:	f3af 8000 	nop.w
 8004b88:	f3af 8000 	nop.w
 8004b8c:	f3af 8000 	nop.w

08004b90 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8004b90:	2000      	movs	r0, #0
 8004b92:	4770      	bx	lr
 8004b94:	f3af 8000 	nop.w
 8004b98:	f3af 8000 	nop.w
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pools1_setup>:

static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004ba6:	4801      	ldr	r0, [pc, #4]	; (8004bac <pools1_setup+0xc>)
 8004ba8:	f7fd b98a 	b.w	8001ec0 <chPoolObjectInit>
 8004bac:	20000864 	.word	0x20000864

08004bb0 <pools1_execute>:
}

static void pools1_execute(void) {
 8004bb0:	b538      	push	{r3, r4, r5, lr}
  int i;

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <pools1_execute+0xb0>)
 8004bb4:	482b      	ldr	r0, [pc, #172]	; (8004c64 <pools1_execute+0xb4>)
 8004bb6:	681d      	ldr	r5, [r3, #0]
 8004bb8:	2205      	movs	r2, #5
 8004bba:	4629      	mov	r1, r5
 8004bbc:	f7fd f988 	bl	8001ed0 <chPoolLoadArray>
 8004bc0:	2405      	movs	r4, #5

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8004bc2:	4828      	ldr	r0, [pc, #160]	; (8004c64 <pools1_execute+0xb4>)
 8004bc4:	f7fd f99c 	bl	8001f00 <chPoolAlloc>
 8004bc8:	1c01      	adds	r1, r0, #0
 8004bca:	bf18      	it	ne
 8004bcc:	2101      	movne	r1, #1
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f7fd fe4e 	bl	8002870 <_test_assert>
 8004bd4:	bb90      	cbnz	r0, 8004c3c <pools1_execute+0x8c>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004bd6:	3c01      	subs	r4, #1
 8004bd8:	d1f3      	bne.n	8004bc2 <pools1_execute+0x12>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8004bda:	4822      	ldr	r0, [pc, #136]	; (8004c64 <pools1_execute+0xb4>)
 8004bdc:	f7fd f990 	bl	8001f00 <chPoolAlloc>
 8004be0:	fab0 f180 	clz	r1, r0
 8004be4:	0949      	lsrs	r1, r1, #5
 8004be6:	2002      	movs	r0, #2
 8004be8:	f7fd fe42 	bl	8002870 <_test_assert>
 8004bec:	bb30      	cbnz	r0, 8004c3c <pools1_execute+0x8c>
 8004bee:	4c1c      	ldr	r4, [pc, #112]	; (8004c60 <pools1_execute+0xb0>)

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8004bf0:	481c      	ldr	r0, [pc, #112]	; (8004c64 <pools1_execute+0xb4>)
  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	f104 0510 	add.w	r5, r4, #16

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8004bf8:	f7fd f99a 	bl	8001f30 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004bfc:	42a5      	cmp	r5, r4
 8004bfe:	d006      	beq.n	8004c0e <pools1_execute+0x5e>
 8004c00:	f854 1f04 	ldr.w	r1, [r4, #4]!
    chPoolFree(&mp1, wa[i]);
 8004c04:	4817      	ldr	r0, [pc, #92]	; (8004c64 <pools1_execute+0xb4>)
 8004c06:	f7fd f993 	bl	8001f30 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004c0a:	42a5      	cmp	r5, r4
 8004c0c:	d1f8      	bne.n	8004c00 <pools1_execute+0x50>
 8004c0e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8004c10:	4814      	ldr	r0, [pc, #80]	; (8004c64 <pools1_execute+0xb4>)
 8004c12:	f7fd f975 	bl	8001f00 <chPoolAlloc>
 8004c16:	1c01      	adds	r1, r0, #0
 8004c18:	bf18      	it	ne
 8004c1a:	2101      	movne	r1, #1
 8004c1c:	2003      	movs	r0, #3
 8004c1e:	f7fd fe27 	bl	8002870 <_test_assert>
 8004c22:	b958      	cbnz	r0, 8004c3c <pools1_execute+0x8c>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004c24:	3c01      	subs	r4, #1
 8004c26:	d1f3      	bne.n	8004c10 <pools1_execute+0x60>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8004c28:	480e      	ldr	r0, [pc, #56]	; (8004c64 <pools1_execute+0xb4>)
 8004c2a:	f7fd f969 	bl	8001f00 <chPoolAlloc>
 8004c2e:	fab0 f180 	clz	r1, r0
 8004c32:	0949      	lsrs	r1, r1, #5
 8004c34:	2004      	movs	r0, #4
 8004c36:	f7fd fe1b 	bl	8002870 <_test_assert>
 8004c3a:	b100      	cbz	r0, 8004c3e <pools1_execute+0x8e>
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
 8004c3e:	2110      	movs	r1, #16
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <pools1_execute+0xb8>)
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <pools1_execute+0xb4>)
 8004c44:	f7fd f93c 	bl	8001ec0 <chPoolObjectInit>
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004c48:	4806      	ldr	r0, [pc, #24]	; (8004c64 <pools1_execute+0xb4>)
 8004c4a:	f7fd f959 	bl	8001f00 <chPoolAlloc>
 8004c4e:	fab0 f180 	clz	r1, r0
 8004c52:	0949      	lsrs	r1, r1, #5
 8004c54:	2005      	movs	r0, #5
}
 8004c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004c5a:	f7fd be09 	b.w	8002870 <_test_assert>
 8004c5e:	bf00      	nop
 8004c60:	08006260 	.word	0x08006260
 8004c64:	20000864 	.word	0x20000864
 8004c68:	08004b91 	.word	0x08004b91
 8004c6c:	f3af 8000 	nop.w

08004c70 <dyn1_execute>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8004c70:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004c72:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <dyn1_execute+0xd4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8004c74:	4834      	ldr	r0, [pc, #208]	; (8004d48 <dyn1_execute+0xd8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004c76:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8004c78:	4c34      	ldr	r4, [pc, #208]	; (8004d4c <dyn1_execute+0xdc>)
 8004c7a:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8004c7c:	b084      	sub	sp, #16
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8004c7e:	a903      	add	r1, sp, #12
 8004c80:	f7fd f8f6 	bl	8001e70 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <dyn1_execute+0xe0>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	1e6a      	subs	r2, r5, #1
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <dyn1_execute+0xe4>)
 8004c8c:	482e      	ldr	r0, [pc, #184]	; (8004d48 <dyn1_execute+0xd8>)
 8004c8e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004c92:	f7fc f82d 	bl	8000cf0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <dyn1_execute+0xe8>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8004c98:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004c9a:	1eaa      	subs	r2, r5, #2
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004ca2:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <dyn1_execute+0xe4>)
 8004ca4:	4828      	ldr	r0, [pc, #160]	; (8004d48 <dyn1_execute+0xd8>)
 8004ca6:	f7fc f823 	bl	8000cf0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8004caa:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8004cac:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8004cae:	4826      	ldr	r0, [pc, #152]	; (8004d48 <dyn1_execute+0xd8>)
 8004cb0:	f7fd f8de 	bl	8001e70 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8004cb4:	9902      	ldr	r1, [sp, #8]
 8004cb6:	4824      	ldr	r0, [pc, #144]	; (8004d48 <dyn1_execute+0xd8>)
 8004cb8:	f7fd f842 	bl	8001d40 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <dyn1_execute+0xec>)
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8004cc4:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8004cc6:	1eea      	subs	r2, r5, #3
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <dyn1_execute+0xe4>)
 8004cca:	481f      	ldr	r0, [pc, #124]	; (8004d48 <dyn1_execute+0xd8>)
 8004ccc:	f7fc f810 	bl	8000cf0 <chThdCreateFromHeap>
 8004cd0:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f7fd f87c 	bl	8001dd0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	b121      	cbz	r1, 8004ce6 <dyn1_execute+0x76>
 8004cdc:	6861      	ldr	r1, [r4, #4]
 8004cde:	b111      	cbz	r1, 8004ce6 <dyn1_execute+0x76>
 8004ce0:	68a1      	ldr	r1, [r4, #8]
 8004ce2:	b331      	cbz	r1, 8004d32 <dyn1_execute+0xc2>
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f7fd fdc2 	bl	8002870 <_test_assert>
 8004cec:	b108      	cbz	r0, 8004cf2 <dyn1_execute+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8004cf2:	f7fd fe2d 	bl	8002950 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8004cf6:	491a      	ldr	r1, [pc, #104]	; (8004d60 <dyn1_execute+0xf0>)
 8004cf8:	2002      	movs	r0, #2
 8004cfa:	f7fd fdd1 	bl	80028a0 <_test_assert_sequence>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d1f5      	bne.n	8004cee <dyn1_execute+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8004d02:	a902      	add	r1, sp, #8
 8004d04:	4810      	ldr	r0, [pc, #64]	; (8004d48 <dyn1_execute+0xd8>)
 8004d06:	f7fd f8b3 	bl	8001e70 <chHeapStatus>
 8004d0a:	f1a0 0101 	sub.w	r1, r0, #1
 8004d0e:	fab1 f181 	clz	r1, r1
 8004d12:	0949      	lsrs	r1, r1, #5
 8004d14:	2003      	movs	r0, #3
 8004d16:	f7fd fdab 	bl	8002870 <_test_assert>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d1e7      	bne.n	8004cee <dyn1_execute+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8004d1e:	9902      	ldr	r1, [sp, #8]
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	1ac9      	subs	r1, r1, r3
 8004d24:	fab1 f181 	clz	r1, r1
 8004d28:	0949      	lsrs	r1, r1, #5
 8004d2a:	2004      	movs	r0, #4
 8004d2c:	f7fd fda0 	bl	8002870 <_test_assert>
 8004d30:	e7dd      	b.n	8004cee <dyn1_execute+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1d6      	bne.n	8004ce6 <dyn1_execute+0x76>
 8004d38:	6921      	ldr	r1, [r4, #16]
 8004d3a:	fab1 f181 	clz	r1, r1
 8004d3e:	0949      	lsrs	r1, r1, #5
 8004d40:	e7d1      	b.n	8004ce6 <dyn1_execute+0x76>
 8004d42:	bf00      	nop
 8004d44:	200008b8 	.word	0x200008b8
 8004d48:	200014c0 	.word	0x200014c0
 8004d4c:	20001460 	.word	0x20001460
 8004d50:	0800650c 	.word	0x0800650c
 8004d54:	08004d71 	.word	0x08004d71
 8004d58:	08006508 	.word	0x08006508
 8004d5c:	08006504 	.word	0x08006504
 8004d60:	08006950 	.word	0x08006950
 8004d64:	f3af 8000 	nop.w
 8004d68:	f3af 8000 	nop.w
 8004d6c:	f3af 8000 	nop.w

08004d70 <thread>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8004d70:	7800      	ldrb	r0, [r0, #0]
 8004d72:	f7fd bd6d 	b.w	8002850 <test_emit_token>
 8004d76:	bf00      	nop
 8004d78:	f3af 8000 	nop.w
 8004d7c:	f3af 8000 	nop.w

08004d80 <dyn3_setup>:
  return found;
}

static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
 8004d80:	f44f 6211 	mov.w	r2, #2320	; 0x910
 8004d84:	4901      	ldr	r1, [pc, #4]	; (8004d8c <dyn3_setup+0xc>)
 8004d86:	4802      	ldr	r0, [pc, #8]	; (8004d90 <dyn3_setup+0x10>)
 8004d88:	f7fc bfca 	b.w	8001d20 <chHeapObjectInit>
 8004d8c:	20000b30 	.word	0x20000b30
 8004d90:	200014c0 	.word	0x200014c0
 8004d94:	f3af 8000 	nop.w
 8004d98:	f3af 8000 	nop.w
 8004d9c:	f3af 8000 	nop.w

08004da0 <dyn1_setup>:
 8004da0:	f7ff bfee 	b.w	8004d80 <dyn3_setup>
 8004da4:	f3af 8000 	nop.w
 8004da8:	f3af 8000 	nop.w
 8004dac:	f3af 8000 	nop.w

08004db0 <dyn2_execute>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004db0:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <dyn2_execute+0xc8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004db2:	699b      	ldr	r3, [r3, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4c31      	ldr	r4, [pc, #196]	; (8004e7c <dyn2_execute+0xcc>)
 8004db8:	689d      	ldr	r5, [r3, #8]
 8004dba:	f104 0610 	add.w	r6, r4, #16
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8004dbe:	f854 1b04 	ldr.w	r1, [r4], #4
 8004dc2:	482f      	ldr	r0, [pc, #188]	; (8004e80 <dyn2_execute+0xd0>)
 8004dc4:	f7fd f8b4 	bl	8001f30 <chPoolFree>
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d1f8      	bne.n	8004dbe <dyn2_execute+0xe>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <dyn2_execute+0xd4>)
 8004dce:	4a2e      	ldr	r2, [pc, #184]	; (8004e88 <dyn2_execute+0xd8>)
 8004dd0:	482b      	ldr	r0, [pc, #172]	; (8004e80 <dyn2_execute+0xd0>)
 8004dd2:	4c2e      	ldr	r4, [pc, #184]	; (8004e8c <dyn2_execute+0xdc>)
 8004dd4:	1e69      	subs	r1, r5, #1
 8004dd6:	f7fb ffab 	bl	8000d30 <chThdCreateFromMemoryPool>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <dyn2_execute+0xe0>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004ddc:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <dyn2_execute+0xd8>)
 8004de0:	4827      	ldr	r0, [pc, #156]	; (8004e80 <dyn2_execute+0xd0>)
 8004de2:	1ea9      	subs	r1, r5, #2
 8004de4:	f7fb ffa4 	bl	8000d30 <chThdCreateFromMemoryPool>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <dyn2_execute+0xe4>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004dea:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <dyn2_execute+0xd8>)
 8004dee:	4824      	ldr	r0, [pc, #144]	; (8004e80 <dyn2_execute+0xd0>)
 8004df0:	1ee9      	subs	r1, r5, #3
 8004df2:	f7fb ff9d 	bl	8000d30 <chThdCreateFromMemoryPool>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004df6:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <dyn2_execute+0xe8>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004df8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004dfa:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <dyn2_execute+0xd8>)
 8004dfc:	4820      	ldr	r0, [pc, #128]	; (8004e80 <dyn2_execute+0xd0>)
 8004dfe:	1f29      	subs	r1, r5, #4
 8004e00:	f7fb ff96 	bl	8000d30 <chThdCreateFromMemoryPool>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004e04:	1f69      	subs	r1, r5, #5

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004e06:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <dyn2_execute+0xec>)
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <dyn2_execute+0xd8>)
 8004e0c:	481c      	ldr	r0, [pc, #112]	; (8004e80 <dyn2_execute+0xd0>)
 8004e0e:	f7fb ff8f 	bl	8000d30 <chThdCreateFromMemoryPool>

  test_assert(1, (threads[0] != NULL) &&
 8004e12:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004e14:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8004e16:	b141      	cbz	r1, 8004e2a <dyn2_execute+0x7a>
 8004e18:	6861      	ldr	r1, [r4, #4]
 8004e1a:	b131      	cbz	r1, 8004e2a <dyn2_execute+0x7a>
 8004e1c:	68a1      	ldr	r1, [r4, #8]
 8004e1e:	b121      	cbz	r1, 8004e2a <dyn2_execute+0x7a>
 8004e20:	68e1      	ldr	r1, [r4, #12]
 8004e22:	b111      	cbz	r1, 8004e2a <dyn2_execute+0x7a>
 8004e24:	fab0 f180 	clz	r1, r0
 8004e28:	0949      	lsrs	r1, r1, #5
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f7fd fd20 	bl	8002870 <_test_assert>
 8004e30:	b100      	cbz	r0, 8004e34 <dyn2_execute+0x84>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8004e34:	f7fd fd8c 	bl	8002950 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8004e38:	4919      	ldr	r1, [pc, #100]	; (8004ea0 <dyn2_execute+0xf0>)
 8004e3a:	2002      	movs	r0, #2
 8004e3c:	f7fd fd30 	bl	80028a0 <_test_assert_sequence>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1f6      	bne.n	8004e32 <dyn2_execute+0x82>
 8004e44:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8004e46:	480e      	ldr	r0, [pc, #56]	; (8004e80 <dyn2_execute+0xd0>)
 8004e48:	f7fd f85a 	bl	8001f00 <chPoolAlloc>
 8004e4c:	1c01      	adds	r1, r0, #0
 8004e4e:	bf18      	it	ne
 8004e50:	2101      	movne	r1, #1
 8004e52:	2003      	movs	r0, #3
 8004e54:	f7fd fd0c 	bl	8002870 <_test_assert>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d1ea      	bne.n	8004e32 <dyn2_execute+0x82>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8004e5c:	3c01      	subs	r4, #1
 8004e5e:	d1f2      	bne.n	8004e46 <dyn2_execute+0x96>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <dyn2_execute+0xd0>)
 8004e62:	f7fd f84d 	bl	8001f00 <chPoolAlloc>
 8004e66:	fab0 f180 	clz	r1, r0
 8004e6a:	0949      	lsrs	r1, r1, #5
 8004e6c:	2004      	movs	r0, #4
}
 8004e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004e72:	f7fd bcfd 	b.w	8002870 <_test_assert>
 8004e76:	bf00      	nop
 8004e78:	200008b8 	.word	0x200008b8
 8004e7c:	08006260 	.word	0x08006260
 8004e80:	200014b0 	.word	0x200014b0
 8004e84:	0800650c 	.word	0x0800650c
 8004e88:	08004d71 	.word	0x08004d71
 8004e8c:	20001460 	.word	0x20001460
 8004e90:	08006508 	.word	0x08006508
 8004e94:	08006504 	.word	0x08006504
 8004e98:	08006500 	.word	0x08006500
 8004e9c:	08006514 	.word	0x08006514
 8004ea0:	08006954 	.word	0x08006954
 8004ea4:	f3af 8000 	nop.w
 8004ea8:	f3af 8000 	nop.w
 8004eac:	f3af 8000 	nop.w

08004eb0 <dyn2_setup>:
 * one to fail.
 */

static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004eb6:	4801      	ldr	r0, [pc, #4]	; (8004ebc <dyn2_setup+0xc>)
 8004eb8:	f7fd b802 	b.w	8001ec0 <chPoolObjectInit>
 8004ebc:	200014b0 	.word	0x200014b0

08004ec0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4605      	mov	r5, r0
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
 8004ec4:	f7fb ff5c 	bl	8000d80 <chRegFirstThread>
 * coverage.
 */

static bool regfind(thread_t *tp) {
  thread_t *ftp;
  bool found = false;
 8004ec8:	2400      	movs	r4, #0

  ftp = chRegFirstThread();
 8004eca:	4603      	mov	r3, r0
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8004ecc:	4618      	mov	r0, r3
 8004ece:	42ab      	cmp	r3, r5
 8004ed0:	bf08      	it	eq
 8004ed2:	f044 0401 	orreq.w	r4, r4, #1
 8004ed6:	f7fb ff63 	bl	8000da0 <chRegNextThread>
  } while (ftp != NULL);
 8004eda:	4603      	mov	r3, r0
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d1f5      	bne.n	8004ecc <regfind+0xc>
  return found;
}
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	f3af 8000 	nop.w
 8004eec:	f3af 8000 	nop.w

08004ef0 <dyn3_execute>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004ef0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004ef2:	4b48      	ldr	r3, [pc, #288]	; (8005014 <dyn3_execute+0x124>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004ef4:	4948      	ldr	r1, [pc, #288]	; (8005018 <dyn3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	4848      	ldr	r0, [pc, #288]	; (800501c <dyn3_execute+0x12c>)
 8004efa:	6892      	ldr	r2, [r2, #8]
 8004efc:	4b48      	ldr	r3, [pc, #288]	; (8005020 <dyn3_execute+0x130>)
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004efe:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004f00:	3a01      	subs	r2, #1
 8004f02:	9100      	str	r1, [sp, #0]
 8004f04:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004f08:	f7fb fef2 	bl	8000cf0 <chThdCreateFromHeap>
 8004f0c:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8004f0e:	2001      	movs	r0, #1
 8004f10:	7fa1      	ldrb	r1, [r4, #30]
 8004f12:	1a09      	subs	r1, r1, r0
 8004f14:	fab1 f181 	clz	r1, r1
 8004f18:	0949      	lsrs	r1, r1, #5
 8004f1a:	f7fd fca9 	bl	8002870 <_test_assert>
 8004f1e:	b108      	cbz	r0, 8004f24 <dyn3_execute+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8004f20:	b002      	add	sp, #8
 8004f22:	bd10      	pop	{r4, pc}
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fb feab 	bl	8000c80 <chThdAddRef>
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8004f2a:	7fa1      	ldrb	r1, [r4, #30]
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	1a09      	subs	r1, r1, r0
 8004f30:	fab1 f181 	clz	r1, r1
 8004f34:	0949      	lsrs	r1, r1, #5
 8004f36:	f7fd fc9b 	bl	8002870 <_test_assert>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1f0      	bne.n	8004f20 <dyn3_execute+0x30>
  chThdRelease(tp);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7fb feae 	bl	8000ca0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8004f44:	7fa1      	ldrb	r1, [r4, #30]
 8004f46:	f1a1 0101 	sub.w	r1, r1, #1
 8004f4a:	fab1 f181 	clz	r1, r1
 8004f4e:	2003      	movs	r0, #3
 8004f50:	0949      	lsrs	r1, r1, #5
 8004f52:	f7fd fc8d 	bl	8002870 <_test_assert>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d1e2      	bne.n	8004f20 <dyn3_execute+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff ffb0 	bl	8004ec0 <regfind>
 8004f60:	4601      	mov	r1, r0
 8004f62:	2004      	movs	r0, #4
 8004f64:	f7fd fc84 	bl	8002870 <_test_assert>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1d9      	bne.n	8004f20 <dyn3_execute+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff ffa7 	bl	8004ec0 <regfind>
 8004f72:	4601      	mov	r1, r0
 8004f74:	2005      	movs	r0, #5
 8004f76:	f7fd fc7b 	bl	8002870 <_test_assert>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1d0      	bne.n	8004f20 <dyn3_execute+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7fb fe8e 	bl	8000ca0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8004f84:	7fa1      	ldrb	r1, [r4, #30]
 8004f86:	fab1 f181 	clz	r1, r1
 8004f8a:	0949      	lsrs	r1, r1, #5
 8004f8c:	2006      	movs	r0, #6
 8004f8e:	f7fd fc6f 	bl	8002870 <_test_assert>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d1c4      	bne.n	8004f20 <dyn3_execute+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8004f96:	7f21      	ldrb	r1, [r4, #28]
 8004f98:	fab1 f181 	clz	r1, r1
 8004f9c:	0949      	lsrs	r1, r1, #5
 8004f9e:	2007      	movs	r0, #7
 8004fa0:	f7fd fc66 	bl	8002870 <_test_assert>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1bb      	bne.n	8004f20 <dyn3_execute+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ff89 	bl	8004ec0 <regfind>
 8004fae:	4601      	mov	r1, r0
 8004fb0:	2008      	movs	r0, #8
 8004fb2:	f7fd fc5d 	bl	8002870 <_test_assert>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1b2      	bne.n	8004f20 <dyn3_execute+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff ff80 	bl	8004ec0 <regfind>
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	2009      	movs	r0, #9
 8004fc4:	f7fd fc54 	bl	8002870 <_test_assert>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d1a9      	bne.n	8004f20 <dyn3_execute+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8004fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fd0:	f7fb fd46 	bl	8000a60 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8004fd4:	7f21      	ldrb	r1, [r4, #28]
 8004fd6:	f1a1 030f 	sub.w	r3, r1, #15
 8004fda:	4259      	negs	r1, r3
 8004fdc:	4159      	adcs	r1, r3
 8004fde:	200a      	movs	r0, #10
 8004fe0:	f7fd fc46 	bl	8002870 <_test_assert>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d19b      	bne.n	8004f20 <dyn3_execute+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff ff69 	bl	8004ec0 <regfind>
 8004fee:	4601      	mov	r1, r0
 8004ff0:	200b      	movs	r0, #11
 8004ff2:	f7fd fc3d 	bl	8002870 <_test_assert>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d192      	bne.n	8004f20 <dyn3_execute+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff ff60 	bl	8004ec0 <regfind>
 8005000:	f080 0101 	eor.w	r1, r0, #1
 8005004:	b2c9      	uxtb	r1, r1
 8005006:	200c      	movs	r0, #12
}
 8005008:	b002      	add	sp, #8
 800500a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 800500e:	f7fd bc2f 	b.w	8002870 <_test_assert>
 8005012:	bf00      	nop
 8005014:	200008b8 	.word	0x200008b8
 8005018:	0800650c 	.word	0x0800650c
 800501c:	200014c0 	.word	0x200014c0
 8005020:	08004d71 	.word	0x08004d71
 8005024:	f3af 8000 	nop.w
 8005028:	f3af 8000 	nop.w
 800502c:	f3af 8000 	nop.w

08005030 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	f3af 8000 	nop.w
 8005038:	f3af 8000 	nop.w
 800503c:	f3af 8000 	nop.w

08005040 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8005040:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <thread1+0xc>)
 8005046:	f7fc bcfb 	b.w	8001a40 <chIQGetTimeout>
 800504a:	bf00      	nop
 800504c:	20000894 	.word	0x20000894

08005050 <queues1_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8005050:	b500      	push	{lr}

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8005052:	4a06      	ldr	r2, [pc, #24]	; (800506c <queues1_setup+0x1c>)
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <queues1_setup+0x20>)
 8005056:	6811      	ldr	r1, [r2, #0]
 8005058:	4806      	ldr	r0, [pc, #24]	; (8005074 <queues1_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 800505a:	b083      	sub	sp, #12

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 800505c:	2200      	movs	r2, #0
 800505e:	9200      	str	r2, [sp, #0]
 8005060:	2204      	movs	r2, #4
 8005062:	f7fc fcad 	bl	80019c0 <chIQObjectInit>
}
 8005066:	b003      	add	sp, #12
 8005068:	f85d fb04 	ldr.w	pc, [sp], #4
 800506c:	08006260 	.word	0x08006260
 8005070:	08005031 	.word	0x08005031
 8005074:	20000894 	.word	0x20000894
 8005078:	f3af 8000 	nop.w
 800507c:	f3af 8000 	nop.w

08005080 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005080:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005084:	2100      	movs	r1, #0
 8005086:	4801      	ldr	r0, [pc, #4]	; (800508c <thread2+0xc>)
 8005088:	f7fc bd62 	b.w	8001b50 <chOQPutTimeout>
 800508c:	20000870 	.word	0x20000870

08005090 <queues2_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8005090:	b500      	push	{lr}

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8005092:	4a06      	ldr	r2, [pc, #24]	; (80050ac <queues2_setup+0x1c>)
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <queues2_setup+0x20>)
 8005096:	6811      	ldr	r1, [r2, #0]
 8005098:	4806      	ldr	r0, [pc, #24]	; (80050b4 <queues2_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 800509a:	b083      	sub	sp, #12

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 800509c:	2200      	movs	r2, #0
 800509e:	9200      	str	r2, [sp, #0]
 80050a0:	2204      	movs	r2, #4
 80050a2:	f7fc fd35 	bl	8001b10 <chOQObjectInit>
}
 80050a6:	b003      	add	sp, #12
 80050a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ac:	08006260 	.word	0x08006260
 80050b0:	08005031 	.word	0x08005031
 80050b4:	20000870 	.word	0x20000870
 80050b8:	f3af 8000 	nop.w
 80050bc:	f3af 8000 	nop.w

080050c0 <queues1_execute>:

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
}

static void queues1_execute(void) {
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	2420      	movs	r4, #32
 80050c6:	b082      	sub	sp, #8
 80050c8:	f384 8811 	msr	BASEPRI, r4
 80050cc:	4b90      	ldr	r3, [pc, #576]	; (8005310 <queues1_execute+0x250>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	fab1 f181 	clz	r1, r1
 80050d4:	0949      	lsrs	r1, r1, #5
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fd fbca 	bl	8002870 <_test_assert>
 80050dc:	b9f0      	cbnz	r0, 800511c <queues1_execute+0x5c>
 80050de:	4606      	mov	r6, r0
 80050e0:	f380 8811 	msr	BASEPRI, r0
 80050e4:	f384 8811 	msr	BASEPRI, r4
 80050e8:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80050ea:	4d89      	ldr	r5, [pc, #548]	; (8005310 <queues1_execute+0x250>)
 80050ec:	4621      	mov	r1, r4
 80050ee:	3401      	adds	r4, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	b2e4      	uxtb	r4, r4
 80050f4:	f7fc fc84 	bl	8001a00 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80050f8:	2c45      	cmp	r4, #69	; 0x45
 80050fa:	d1f6      	bne.n	80050ea <queues1_execute+0x2a>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	2320      	movs	r3, #32
 8005104:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8005108:	696a      	ldr	r2, [r5, #20]
 800510a:	69ab      	ldr	r3, [r5, #24]
 800510c:	429a      	cmp	r2, r3
 800510e:	d03a      	beq.n	8005186 <queues1_execute+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8005110:	4631      	mov	r1, r6
 8005112:	2002      	movs	r0, #2
 8005114:	f7fd fbac 	bl	8002870 <_test_assert>
 8005118:	4604      	mov	r4, r0
 800511a:	b128      	cbz	r0, 8005128 <queues1_execute+0x68>
 800511c:	2300      	movs	r3, #0
 800511e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005122:	b002      	add	sp, #8
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	2320      	movs	r3, #32
 800512e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8005132:	4877      	ldr	r0, [pc, #476]	; (8005310 <queues1_execute+0x250>)
 8005134:	4621      	mov	r1, r4
 8005136:	f7fc fc63 	bl	8001a00 <chIQPutI>
 800513a:	3004      	adds	r0, #4
 800513c:	bf14      	ite	ne
 800513e:	2100      	movne	r1, #0
 8005140:	2101      	moveq	r1, #1
 8005142:	2003      	movs	r0, #3
 8005144:	f7fd fb94 	bl	8002870 <_test_assert>
 8005148:	b9c0      	cbnz	r0, 800517c <queues1_execute+0xbc>
 800514a:	f380 8811 	msr	BASEPRI, r0
 800514e:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8005150:	4d6f      	ldr	r5, [pc, #444]	; (8005310 <queues1_execute+0x250>)
 8005152:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005156:	4628      	mov	r0, r5
 8005158:	f7fc fc72 	bl	8001a40 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 800515c:	b2c0      	uxtb	r0, r0
 800515e:	f7fd fb77 	bl	8002850 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005162:	3c01      	subs	r4, #1
 8005164:	d1f4      	bne.n	8005150 <queues1_execute+0x90>
 8005166:	2620      	movs	r6, #32
 8005168:	f386 8811 	msr	BASEPRI, r6
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800516c:	68a9      	ldr	r1, [r5, #8]
 800516e:	fab1 f181 	clz	r1, r1
 8005172:	0949      	lsrs	r1, r1, #5
 8005174:	2004      	movs	r0, #4
 8005176:	f7fd fb7b 	bl	8002870 <_test_assert>
 800517a:	b148      	cbz	r0, 8005190 <queues1_execute+0xd0>
 800517c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005180:	b002      	add	sp, #8
 8005182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8005186:	68ae      	ldr	r6, [r5, #8]
 8005188:	3600      	adds	r6, #0
 800518a:	bf18      	it	ne
 800518c:	2601      	movne	r6, #1
 800518e:	e7bf      	b.n	8005110 <queues1_execute+0x50>
 8005190:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8005194:	495f      	ldr	r1, [pc, #380]	; (8005314 <queues1_execute+0x254>)
 8005196:	2005      	movs	r0, #5
 8005198:	f7fd fb82 	bl	80028a0 <_test_assert_sequence>
 800519c:	2800      	cmp	r0, #0
 800519e:	d1c0      	bne.n	8005122 <queues1_execute+0x62>
 80051a0:	f386 8811 	msr	BASEPRI, r6
 80051a4:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80051a6:	4d5a      	ldr	r5, [pc, #360]	; (8005310 <queues1_execute+0x250>)
 80051a8:	4621      	mov	r1, r4
 80051aa:	3401      	adds	r4, #1
 80051ac:	4628      	mov	r0, r5
 80051ae:	b2e4      	uxtb	r4, r4
 80051b0:	f7fc fc26 	bl	8001a00 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80051b4:	2c45      	cmp	r4, #69	; 0x45
 80051b6:	d1f6      	bne.n	80051a6 <queues1_execute+0xe6>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80051be:	4e56      	ldr	r6, [pc, #344]	; (8005318 <queues1_execute+0x258>)
 80051c0:	2208      	movs	r2, #8
 80051c2:	6871      	ldr	r1, [r6, #4]
 80051c4:	4628      	mov	r0, r5
 80051c6:	f7fc fc63 	bl	8001a90 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80051ca:	f1a0 0104 	sub.w	r1, r0, #4
 80051ce:	fab1 f181 	clz	r1, r1
 80051d2:	0949      	lsrs	r1, r1, #5
 80051d4:	2006      	movs	r0, #6
 80051d6:	f7fd fb4b 	bl	8002870 <_test_assert>
 80051da:	4604      	mov	r4, r0
 80051dc:	2800      	cmp	r0, #0
 80051de:	d1a0      	bne.n	8005122 <queues1_execute+0x62>
 80051e0:	2720      	movs	r7, #32
 80051e2:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 80051e6:	68a9      	ldr	r1, [r5, #8]
 80051e8:	fab1 f181 	clz	r1, r1
 80051ec:	0949      	lsrs	r1, r1, #5
 80051ee:	2007      	movs	r0, #7
 80051f0:	f7fd fb3e 	bl	8002870 <_test_assert>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1c1      	bne.n	800517c <queues1_execute+0xbc>
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	f387 8811 	msr	BASEPRI, r7
 8005200:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8005202:	4d43      	ldr	r5, [pc, #268]	; (8005310 <queues1_execute+0x250>)
 8005204:	4621      	mov	r1, r4
 8005206:	3401      	adds	r4, #1
 8005208:	4628      	mov	r0, r5
 800520a:	b2e4      	uxtb	r4, r4
 800520c:	f7fc fbf8 	bl	8001a00 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005210:	2c45      	cmp	r4, #69	; 0x45
 8005212:	d1f6      	bne.n	8005202 <queues1_execute+0x142>
 8005214:	2300      	movs	r3, #0
 8005216:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 800521a:	6874      	ldr	r4, [r6, #4]
 800521c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8005318 <queues1_execute+0x258>
 8005220:	4621      	mov	r1, r4
 8005222:	4628      	mov	r0, r5
 8005224:	2202      	movs	r2, #2
 8005226:	f7fc fc33 	bl	8001a90 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800522a:	f1a0 0102 	sub.w	r1, r0, #2
 800522e:	fab1 f181 	clz	r1, r1
 8005232:	0949      	lsrs	r1, r1, #5
 8005234:	2008      	movs	r0, #8
 8005236:	f7fd fb1b 	bl	8002870 <_test_assert>
 800523a:	2800      	cmp	r0, #0
 800523c:	f47f af71 	bne.w	8005122 <queues1_execute+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005240:	4603      	mov	r3, r0
 8005242:	4621      	mov	r1, r4
 8005244:	2202      	movs	r2, #2
 8005246:	4628      	mov	r0, r5
 8005248:	f7fc fc22 	bl	8001a90 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800524c:	f1a0 0102 	sub.w	r1, r0, #2
 8005250:	fab1 f181 	clz	r1, r1
 8005254:	0949      	lsrs	r1, r1, #5
 8005256:	2009      	movs	r0, #9
 8005258:	f7fd fb0a 	bl	8002870 <_test_assert>
 800525c:	4606      	mov	r6, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	f47f af5f 	bne.w	8005122 <queues1_execute+0x62>
 8005264:	2720      	movs	r7, #32
 8005266:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800526a:	68a9      	ldr	r1, [r5, #8]
 800526c:	fab1 f181 	clz	r1, r1
 8005270:	0949      	lsrs	r1, r1, #5
 8005272:	200a      	movs	r0, #10
 8005274:	f7fd fafc 	bl	8002870 <_test_assert>
 8005278:	4604      	mov	r4, r0
 800527a:	b110      	cbz	r0, 8005282 <queues1_execute+0x1c2>
 800527c:	f386 8811 	msr	BASEPRI, r6
 8005280:	e74f      	b.n	8005122 <queues1_execute+0x62>
 8005282:	f380 8811 	msr	BASEPRI, r0
 8005286:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 800528a:	4601      	mov	r1, r0
 800528c:	4628      	mov	r0, r5
 800528e:	f7fc fbb7 	bl	8001a00 <chIQPutI>
  chIQResetI(&iq);
 8005292:	4628      	mov	r0, r5
 8005294:	f7fc fba4 	bl	80019e0 <chIQResetI>
 8005298:	f384 8811 	msr	BASEPRI, r4
 800529c:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80052a0:	68a9      	ldr	r1, [r5, #8]
 80052a2:	fab1 f181 	clz	r1, r1
 80052a6:	0949      	lsrs	r1, r1, #5
 80052a8:	200b      	movs	r0, #11
 80052aa:	f7fd fae1 	bl	8002870 <_test_assert>
 80052ae:	4606      	mov	r6, r0
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f47f af63 	bne.w	800517c <queues1_execute+0xbc>
 80052b6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <queues1_execute+0x25c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80052bc:	f8d8 0000 	ldr.w	r0, [r8]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <queues1_execute+0x260>)
 80052c4:	6892      	ldr	r2, [r2, #8]
 80052c6:	9600      	str	r6, [sp, #0]
 80052c8:	3201      	adds	r2, #1
 80052ca:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80052ce:	f7fb fb57 	bl	8000980 <chThdCreateStatic>
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <queues1_execute+0x264>)
 80052d4:	6018      	str	r0, [r3, #0]
 80052d6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 80052da:	68a9      	ldr	r1, [r5, #8]
 80052dc:	fab1 f181 	clz	r1, r1
 80052e0:	0949      	lsrs	r1, r1, #5
 80052e2:	200c      	movs	r0, #12
 80052e4:	f7fd fac4 	bl	8002870 <_test_assert>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d1c7      	bne.n	800527c <queues1_execute+0x1bc>
 80052ec:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80052f0:	f7fd fb2e 	bl	8002950 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80052f4:	4628      	mov	r0, r5
 80052f6:	210a      	movs	r1, #10
 80052f8:	f7fc fba2 	bl	8001a40 <chIQGetTimeout>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	4259      	negs	r1, r3
 8005300:	4159      	adcs	r1, r3
 8005302:	200d      	movs	r0, #13
}
 8005304:	b002      	add	sp, #8
 8005306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800530a:	f7fd bab1 	b.w	8002870 <_test_assert>
 800530e:	bf00      	nop
 8005310:	20000894 	.word	0x20000894
 8005314:	08006954 	.word	0x08006954
 8005318:	08006260 	.word	0x08006260
 800531c:	200008b8 	.word	0x200008b8
 8005320:	08005041 	.word	0x08005041
 8005324:	20001460 	.word	0x20001460
 8005328:	f3af 8000 	nop.w
 800532c:	f3af 8000 	nop.w

08005330 <queues2_execute>:

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
}

static void queues2_execute(void) {
 8005330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005334:	2320      	movs	r3, #32
 8005336:	b083      	sub	sp, #12
 8005338:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800533c:	4b85      	ldr	r3, [pc, #532]	; (8005554 <queues2_execute+0x224>)
 800533e:	6999      	ldr	r1, [r3, #24]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	4291      	cmp	r1, r2
 8005344:	d05d      	beq.n	8005402 <queues2_execute+0xd2>
 8005346:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8005348:	2001      	movs	r0, #1
 800534a:	f7fd fa91 	bl	8002870 <_test_assert>
 800534e:	bbb8      	cbnz	r0, 80053c0 <queues2_execute+0x90>
 8005350:	f380 8811 	msr	BASEPRI, r0
 8005354:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8005356:	4d7f      	ldr	r5, [pc, #508]	; (8005554 <queues2_execute+0x224>)
 8005358:	4621      	mov	r1, r4
 800535a:	3401      	adds	r4, #1
 800535c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005360:	4628      	mov	r0, r5
 8005362:	b2e4      	uxtb	r4, r4
 8005364:	f7fc fbf4 	bl	8001b50 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005368:	2c45      	cmp	r4, #69	; 0x45
 800536a:	d1f4      	bne.n	8005356 <queues2_execute+0x26>
 800536c:	2620      	movs	r6, #32
 800536e:	f386 8811 	msr	BASEPRI, r6
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8005372:	68a9      	ldr	r1, [r5, #8]
 8005374:	fab1 f181 	clz	r1, r1
 8005378:	0949      	lsrs	r1, r1, #5
 800537a:	2002      	movs	r0, #2
 800537c:	f7fd fa78 	bl	8002870 <_test_assert>
 8005380:	4607      	mov	r7, r0
 8005382:	b9e8      	cbnz	r0, 80053c0 <queues2_execute+0x90>
 8005384:	f380 8811 	msr	BASEPRI, r0
 8005388:	2404      	movs	r4, #4
 800538a:	4681      	mov	r9, r0
 800538c:	f04f 0820 	mov.w	r8, #32
 8005390:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8005394:	4d6f      	ldr	r5, [pc, #444]	; (8005554 <queues2_execute+0x224>)
 8005396:	4628      	mov	r0, r5
 8005398:	f7fc fc02 	bl	8001ba0 <chOQGetI>
 800539c:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 80053a0:	b2c0      	uxtb	r0, r0
 80053a2:	f7fd fa55 	bl	8002850 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 80053a6:	3c01      	subs	r4, #1
 80053a8:	d1f0      	bne.n	800538c <queues2_execute+0x5c>
 80053aa:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80053ae:	696a      	ldr	r2, [r5, #20]
 80053b0:	69ab      	ldr	r3, [r5, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d02a      	beq.n	800540c <queues2_execute+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 80053b6:	4639      	mov	r1, r7
 80053b8:	2003      	movs	r0, #3
 80053ba:	f7fd fa59 	bl	8002870 <_test_assert>
 80053be:	b128      	cbz	r0, 80053cc <queues2_execute+0x9c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80053c6:	b003      	add	sp, #12
 80053c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053cc:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 80053d0:	4961      	ldr	r1, [pc, #388]	; (8005558 <queues2_execute+0x228>)
 80053d2:	2004      	movs	r0, #4
 80053d4:	f7fd fa64 	bl	80028a0 <_test_assert_sequence>
 80053d8:	4604      	mov	r4, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1f3      	bne.n	80053c6 <queues2_execute+0x96>
 80053de:	2620      	movs	r6, #32
 80053e0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 80053e4:	4d5b      	ldr	r5, [pc, #364]	; (8005554 <queues2_execute+0x224>)
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fc fbda 	bl	8001ba0 <chOQGetI>
 80053ec:	3003      	adds	r0, #3
 80053ee:	bf14      	ite	ne
 80053f0:	2100      	movne	r1, #0
 80053f2:	2101      	moveq	r1, #1
 80053f4:	2005      	movs	r0, #5
 80053f6:	f7fd fa3b 	bl	8002870 <_test_assert>
 80053fa:	b160      	cbz	r0, 8005416 <queues2_execute+0xe6>
 80053fc:	f384 8811 	msr	BASEPRI, r4
 8005400:	e7e1      	b.n	80053c6 <queues2_execute+0x96>
 8005402:	6899      	ldr	r1, [r3, #8]
 8005404:	3100      	adds	r1, #0
 8005406:	bf18      	it	ne
 8005408:	2101      	movne	r1, #1
 800540a:	e79d      	b.n	8005348 <queues2_execute+0x18>
 800540c:	68af      	ldr	r7, [r5, #8]
 800540e:	3700      	adds	r7, #0
 8005410:	bf18      	it	ne
 8005412:	2701      	movne	r7, #1
 8005414:	e7cf      	b.n	80053b6 <queues2_execute+0x86>
 8005416:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 800541a:	4f50      	ldr	r7, [pc, #320]	; (800555c <queues2_execute+0x22c>)
 800541c:	687c      	ldr	r4, [r7, #4]
 800541e:	4603      	mov	r3, r0
 8005420:	4621      	mov	r1, r4
 8005422:	2208      	movs	r2, #8
 8005424:	4628      	mov	r0, r5
 8005426:	f7fc fbdb 	bl	8001be0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 800542a:	f1a0 0104 	sub.w	r1, r0, #4
 800542e:	fab1 f181 	clz	r1, r1
 8005432:	0949      	lsrs	r1, r1, #5
 8005434:	2006      	movs	r0, #6
 8005436:	f7fd fa1b 	bl	8002870 <_test_assert>
 800543a:	4680      	mov	r8, r0
 800543c:	2800      	cmp	r0, #0
 800543e:	d1c2      	bne.n	80053c6 <queues2_execute+0x96>
 8005440:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8005444:	68a9      	ldr	r1, [r5, #8]
 8005446:	fab1 f181 	clz	r1, r1
 800544a:	0949      	lsrs	r1, r1, #5
 800544c:	2007      	movs	r0, #7
 800544e:	f7fd fa0f 	bl	8002870 <_test_assert>
 8005452:	4681      	mov	r9, r0
 8005454:	b110      	cbz	r0, 800545c <queues2_execute+0x12c>
 8005456:	f388 8811 	msr	BASEPRI, r8
 800545a:	e7b4      	b.n	80053c6 <queues2_execute+0x96>
 800545c:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005460:	4b3f      	ldr	r3, [pc, #252]	; (8005560 <queues2_execute+0x230>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005462:	6838      	ldr	r0, [r7, #0]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <queues2_execute+0x234>)
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	f8cd 9000 	str.w	r9, [sp]
 800546e:	3201      	adds	r2, #1
 8005470:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005474:	f7fb fa84 	bl	8000980 <chThdCreateStatic>
 8005478:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <queues2_execute+0x238>)
 800547a:	6018      	str	r0, [r3, #0]
 800547c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8005480:	68e9      	ldr	r1, [r5, #12]
 8005482:	692b      	ldr	r3, [r5, #16]
 8005484:	68aa      	ldr	r2, [r5, #8]
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	1a99      	subs	r1, r3, r2
 800548a:	f1a1 0104 	sub.w	r1, r1, #4
 800548e:	fab1 f181 	clz	r1, r1
 8005492:	0949      	lsrs	r1, r1, #5
 8005494:	2008      	movs	r0, #8
 8005496:	f7fd f9eb 	bl	8002870 <_test_assert>
 800549a:	4607      	mov	r7, r0
 800549c:	b110      	cbz	r0, 80054a4 <queues2_execute+0x174>
 800549e:	f389 8811 	msr	BASEPRI, r9
 80054a2:	e790      	b.n	80053c6 <queues2_execute+0x96>
 80054a4:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80054a8:	f7fd fa52 	bl	8002950 <test_wait_threads>
 80054ac:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
 80054b0:	4628      	mov	r0, r5
 80054b2:	f7fc fb3d 	bl	8001b30 <chOQResetI>
 80054b6:	f387 8811 	msr	BASEPRI, r7
 80054ba:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 80054be:	f105 0108 	add.w	r1, r5, #8
 80054c2:	c90e      	ldmia	r1, {r1, r2, r3}
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	1a59      	subs	r1, r3, r1
 80054c8:	fab1 f181 	clz	r1, r1
 80054cc:	0949      	lsrs	r1, r1, #5
 80054ce:	2009      	movs	r0, #9
 80054d0:	f7fd f9ce 	bl	8002870 <_test_assert>
 80054d4:	4603      	mov	r3, r0
 80054d6:	b110      	cbz	r0, 80054de <queues2_execute+0x1ae>
 80054d8:	f387 8811 	msr	BASEPRI, r7
 80054dc:	e773      	b.n	80053c6 <queues2_execute+0x96>
 80054de:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80054e2:	2202      	movs	r2, #2
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f7fc fb7a 	bl	8001be0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80054ec:	3802      	subs	r0, #2
 80054ee:	4241      	negs	r1, r0
 80054f0:	4141      	adcs	r1, r0
 80054f2:	200a      	movs	r0, #10
 80054f4:	f7fd f9bc 	bl	8002870 <_test_assert>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f47f af63 	bne.w	80053c6 <queues2_execute+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005500:	4621      	mov	r1, r4
 8005502:	2202      	movs	r2, #2
 8005504:	4628      	mov	r0, r5
 8005506:	f7fc fb6b 	bl	8001be0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800550a:	1e82      	subs	r2, r0, #2
 800550c:	4251      	negs	r1, r2
 800550e:	4151      	adcs	r1, r2
 8005510:	200b      	movs	r0, #11
 8005512:	f7fd f9ad 	bl	8002870 <_test_assert>
 8005516:	2800      	cmp	r0, #0
 8005518:	f47f af55 	bne.w	80053c6 <queues2_execute+0x96>
 800551c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8005520:	68a9      	ldr	r1, [r5, #8]
 8005522:	fab1 f181 	clz	r1, r1
 8005526:	0949      	lsrs	r1, r1, #5
 8005528:	200c      	movs	r0, #12
 800552a:	f7fd f9a1 	bl	8002870 <_test_assert>
 800552e:	2800      	cmp	r0, #0
 8005530:	f47f af46 	bne.w	80053c0 <queues2_execute+0x90>
 8005534:	2100      	movs	r1, #0
 8005536:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800553a:	220a      	movs	r2, #10
 800553c:	4805      	ldr	r0, [pc, #20]	; (8005554 <queues2_execute+0x224>)
 800553e:	f7fc fb07 	bl	8001b50 <chOQPutTimeout>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	4259      	negs	r1, r3
 8005546:	4159      	adcs	r1, r3
 8005548:	200d      	movs	r0, #13
}
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8005550:	f7fd b98e 	b.w	8002870 <_test_assert>
 8005554:	20000870 	.word	0x20000870
 8005558:	08006954 	.word	0x08006954
 800555c:	08006260 	.word	0x08006260
 8005560:	200008b8 	.word	0x200008b8
 8005564:	08005081 	.word	0x08005081
 8005568:	20001460 	.word	0x20001460
 800556c:	f3af 8000 	nop.w

08005570 <sys2_execute>:
 8005570:	2320      	movs	r3, #32
 8005572:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005576:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005578:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800557a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800557e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005580:	2300      	movs	r3, #0
 8005582:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005586:	b662      	cpsie	i
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	f3af 8000 	nop.w

08005590 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8005590:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005592:	2320      	movs	r3, #32
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	2400      	movs	r4, #0
 800559a:	f384 8811 	msr	BASEPRI, r4
 800559e:	f383 8811 	msr	BASEPRI, r3
  chSysLockFromISR();
  chSysUnlockFromISR();

  /* Reentrant case.*/
  chSysLockFromISR();
  sts = chSysGetStatusAndLockX();
 80055a2:	f7fa ffbd 	bl	8000520 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 80055a6:	f7fa ffcb 	bl	8000540 <chSysRestoreStatusX>
 80055aa:	f384 8811 	msr	BASEPRI, r4
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <sys3_execute>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	2420      	movs	r4, #32
 80055b4:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80055b8:	2001      	movs	r0, #1
 80055ba:	f7fa ff11 	bl	80003e0 <chSysIntegrityCheckI>
 80055be:	2300      	movs	r3, #0
 80055c0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 80055c4:	f080 0101 	eor.w	r1, r0, #1
 80055c8:	b2c9      	uxtb	r1, r1
 80055ca:	2001      	movs	r0, #1
 80055cc:	f7fd f950 	bl	8002870 <_test_assert>
 80055d0:	b100      	cbz	r0, 80055d4 <sys3_execute+0x24>
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	4605      	mov	r5, r0
 80055d6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80055da:	2002      	movs	r0, #2
 80055dc:	f7fa ff00 	bl	80003e0 <chSysIntegrityCheckI>
 80055e0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 80055e4:	f080 0101 	eor.w	r1, r0, #1
 80055e8:	b2c9      	uxtb	r1, r1
 80055ea:	2002      	movs	r0, #2
 80055ec:	f7fd f940 	bl	8002870 <_test_assert>
 80055f0:	4605      	mov	r5, r0
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d1ed      	bne.n	80055d2 <sys3_execute+0x22>
 80055f6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80055fa:	2004      	movs	r0, #4
 80055fc:	f7fa fef0 	bl	80003e0 <chSysIntegrityCheckI>
 8005600:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8005604:	f080 0101 	eor.w	r1, r0, #1
 8005608:	b2c9      	uxtb	r1, r1
 800560a:	2003      	movs	r0, #3
 800560c:	f7fd f930 	bl	8002870 <_test_assert>
 8005610:	4605      	mov	r5, r0
 8005612:	2800      	cmp	r0, #0
 8005614:	d1dd      	bne.n	80055d2 <sys3_execute+0x22>
 8005616:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 800561a:	2008      	movs	r0, #8
 800561c:	f7fa fee0 	bl	80003e0 <chSysIntegrityCheckI>
 8005620:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8005624:	f080 0101 	eor.w	r1, r0, #1
 8005628:	b2c9      	uxtb	r1, r1
 800562a:	2004      	movs	r0, #4
}
 800562c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8005630:	f7fd b91e 	b.w	8002870 <_test_assert>
 8005634:	f3af 8000 	nop.w
 8005638:	f3af 8000 	nop.w
 800563c:	f3af 8000 	nop.w

08005640 <sys1_execute>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8005640:	b510      	push	{r4, lr}
 8005642:	b086      	sub	sp, #24
  syssts_t sts;
  virtual_timer_t vt;

  /* Testing normal case.*/
  sts = chSysGetStatusAndLockX();
 8005644:	f7fa ff6c 	bl	8000520 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8005648:	f7fa ff7a 	bl	8000540 <chSysRestoreStatusX>
 800564c:	2420      	movs	r4, #32
 800564e:	f384 8811 	msr	BASEPRI, r4

  /* Reentrant case.*/
  chSysLock();
  sts = chSysGetStatusAndLockX();
 8005652:	f7fa ff65 	bl	8000520 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8005656:	f7fa ff73 	bl	8000540 <chSysRestoreStatusX>
 800565a:	2300      	movs	r3, #0
 800565c:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8005660:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8005664:	b90b      	cbnz	r3, 800566a <sys1_execute+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005666:	f384 8811 	msr	BASEPRI, r4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800566a:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 800566e:	b913      	cbnz	r3, 8005676 <sys1_execute+0x36>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005670:	2320      	movs	r3, #32
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	2300      	movs	r3, #0
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	2220      	movs	r2, #32
 800567e:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8005682:	f3ef 8212 	mrs	r2, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8005686:	b10a      	cbz	r2, 800568c <sys1_execute+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005688:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800568c:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 8005690:	b113      	cbz	r3, 8005698 <sys1_execute+0x58>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005692:	2300      	movs	r3, #0
 8005694:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	2320      	movs	r3, #32
 800569e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80056a2:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 80056a4:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80056a6:	b113      	cbz	r3, 80056ae <sys1_execute+0x6e>
    chVTDoResetI(vtp);
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fa ffa9 	bl	8000600 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80056ae:	4620      	mov	r0, r4
 80056b0:	2300      	movs	r3, #0
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <sys1_execute+0xa4>)
 80056b4:	2101      	movs	r1, #1
 80056b6:	f7fa ff63 	bl	8000580 <chVTDoSetI>
 80056ba:	2400      	movs	r4, #0
 80056bc:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 80056c0:	200a      	movs	r0, #10
 80056c2:	f7fb f9cd 	bl	8000a60 <chThdSleep>
 80056c6:	2320      	movs	r3, #32
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	9904      	ldr	r1, [sp, #16]
 80056ce:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80056d2:	fab1 f181 	clz	r1, r1
 80056d6:	0949      	lsrs	r1, r1, #5
 80056d8:	2001      	movs	r0, #1
 80056da:	f7fd f8c9 	bl	8002870 <_test_assert>
}
 80056de:	b006      	add	sp, #24
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	08005591 	.word	0x08005591
 80056e8:	f3af 8000 	nop.w
 80056ec:	f3af 8000 	nop.w

080056f0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	f3af 8000 	nop.w
 80056f8:	f3af 8000 	nop.w
 80056fc:	f3af 8000 	nop.w

08005700 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8005700:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8005702:	482f      	ldr	r0, [pc, #188]	; (80057c0 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8005704:	4c2f      	ldr	r4, [pc, #188]	; (80057c4 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8005706:	f7fd f86b 	bl	80027e0 <test_print>
  test_printn(sizeof(ch_system_t));
 800570a:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800570e:	f7fd f837 	bl	8002780 <test_printn>
  test_println(" bytes");
 8005712:	4620      	mov	r0, r4
 8005714:	f7fd f87c 	bl	8002810 <test_println>
  test_print("--- Thread: ");
 8005718:	482b      	ldr	r0, [pc, #172]	; (80057c8 <bmk13_execute+0xc8>)
 800571a:	f7fd f861 	bl	80027e0 <test_print>
  test_printn(sizeof(thread_t));
 800571e:	2044      	movs	r0, #68	; 0x44
 8005720:	f7fd f82e 	bl	8002780 <test_printn>
  test_println(" bytes");
 8005724:	4620      	mov	r0, r4
 8005726:	f7fd f873 	bl	8002810 <test_println>
  test_print("--- Timer : ");
 800572a:	4828      	ldr	r0, [pc, #160]	; (80057cc <bmk13_execute+0xcc>)
 800572c:	f7fd f858 	bl	80027e0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8005730:	2014      	movs	r0, #20
 8005732:	f7fd f825 	bl	8002780 <test_printn>
  test_println(" bytes");
 8005736:	4620      	mov	r0, r4
 8005738:	f7fd f86a 	bl	8002810 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800573c:	4824      	ldr	r0, [pc, #144]	; (80057d0 <bmk13_execute+0xd0>)
 800573e:	f7fd f84f 	bl	80027e0 <test_print>
  test_printn(sizeof(semaphore_t));
 8005742:	200c      	movs	r0, #12
 8005744:	f7fd f81c 	bl	8002780 <test_printn>
  test_println(" bytes");
 8005748:	4620      	mov	r0, r4
 800574a:	f7fd f861 	bl	8002810 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800574e:	4821      	ldr	r0, [pc, #132]	; (80057d4 <bmk13_execute+0xd4>)
 8005750:	f7fd f846 	bl	80027e0 <test_print>
  test_printn(sizeof(event_source_t));
 8005754:	2004      	movs	r0, #4
 8005756:	f7fd f813 	bl	8002780 <test_printn>
  test_println(" bytes");
 800575a:	4620      	mov	r0, r4
 800575c:	f7fd f858 	bl	8002810 <test_println>
  test_print("--- EventL: ");
 8005760:	481d      	ldr	r0, [pc, #116]	; (80057d8 <bmk13_execute+0xd8>)
 8005762:	f7fd f83d 	bl	80027e0 <test_print>
  test_printn(sizeof(event_listener_t));
 8005766:	2014      	movs	r0, #20
 8005768:	f7fd f80a 	bl	8002780 <test_printn>
  test_println(" bytes");
 800576c:	4620      	mov	r0, r4
 800576e:	f7fd f84f 	bl	8002810 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8005772:	481a      	ldr	r0, [pc, #104]	; (80057dc <bmk13_execute+0xdc>)
 8005774:	f7fd f834 	bl	80027e0 <test_print>
  test_printn(sizeof(mutex_t));
 8005778:	2010      	movs	r0, #16
 800577a:	f7fd f801 	bl	8002780 <test_printn>
  test_println(" bytes");
 800577e:	4620      	mov	r0, r4
 8005780:	f7fd f846 	bl	8002810 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8005784:	4816      	ldr	r0, [pc, #88]	; (80057e0 <bmk13_execute+0xe0>)
 8005786:	f7fd f82b 	bl	80027e0 <test_print>
  test_printn(sizeof(condition_variable_t));
 800578a:	2008      	movs	r0, #8
 800578c:	f7fc fff8 	bl	8002780 <test_printn>
  test_println(" bytes");
 8005790:	4620      	mov	r0, r4
 8005792:	f7fd f83d 	bl	8002810 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8005796:	4813      	ldr	r0, [pc, #76]	; (80057e4 <bmk13_execute+0xe4>)
 8005798:	f7fd f822 	bl	80027e0 <test_print>
  test_printn(sizeof(io_queue_t));
 800579c:	2024      	movs	r0, #36	; 0x24
 800579e:	f7fc ffef 	bl	8002780 <test_printn>
  test_println(" bytes");
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7fd f834 	bl	8002810 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80057a8:	480f      	ldr	r0, [pc, #60]	; (80057e8 <bmk13_execute+0xe8>)
 80057aa:	f7fd f819 	bl	80027e0 <test_print>
  test_printn(sizeof(mailbox_t));
 80057ae:	2028      	movs	r0, #40	; 0x28
 80057b0:	f7fc ffe6 	bl	8002780 <test_printn>
  test_println(" bytes");
 80057b4:	4620      	mov	r0, r4
#endif
}
 80057b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80057ba:	f7fd b829 	b.w	8002810 <test_println>
 80057be:	bf00      	nop
 80057c0:	08006b40 	.word	0x08006b40
 80057c4:	08006b50 	.word	0x08006b50
 80057c8:	08006b58 	.word	0x08006b58
 80057cc:	08006b68 	.word	0x08006b68
 80057d0:	08006b78 	.word	0x08006b78
 80057d4:	08006b88 	.word	0x08006b88
 80057d8:	08006b98 	.word	0x08006b98
 80057dc:	08006ba8 	.word	0x08006ba8
 80057e0:	08006bb8 	.word	0x08006bb8
 80057e4:	08006bc8 	.word	0x08006bc8
 80057e8:	08006bd8 	.word	0x08006bd8
 80057ec:	f3af 8000 	nop.w

080057f0 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 80057f0:	b510      	push	{r4, lr}
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80057f2:	f7fb ffa5 	bl	8001740 <chMsgWait>
 80057f6:	6b04      	ldr	r4, [r0, #48]	; 0x30
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
 80057f8:	4621      	mov	r1, r4
 80057fa:	f7fb ffc1 	bl	8001780 <chMsgRelease>
  } while (msg);
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d1f7      	bne.n	80057f2 <thread2+0x2>
}
 8005802:	bd10      	pop	{r4, pc}
 8005804:	f3af 8000 	nop.w
 8005808:	f3af 8000 	nop.w
 800580c:	f3af 8000 	nop.w

08005810 <bmk6_execute>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <bmk6_execute+0x58>)

  uint32_t n = 0;
  void *wap = wa[0];
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <bmk6_execute+0x5c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() + 1;
 800581e:	689d      	ldr	r5, [r3, #8]
 8005820:	4f13      	ldr	r7, [pc, #76]	; (8005870 <bmk6_execute+0x60>)
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8005822:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
 8005824:	f7fd f8ac 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800582c:	f7fd f8b8 	bl	80029a0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8005830:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8005832:	3501      	adds	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8005834:	4626      	mov	r6, r4
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <bmk6_execute+0x64>)
 8005838:	9600      	str	r6, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005840:	4640      	mov	r0, r8
 8005842:	f7fb f89d 	bl	8000980 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005846:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 8005848:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f3      	beq.n	8005836 <bmk6_execute+0x26>
  test_print("--- Score : ");
 800584e:	480a      	ldr	r0, [pc, #40]	; (8005878 <bmk6_execute+0x68>)
 8005850:	f7fc ffc6 	bl	80027e0 <test_print>
  test_printn(n);
 8005854:	4620      	mov	r0, r4
 8005856:	f7fc ff93 	bl	8002780 <test_printn>
  test_println(" threads/S");
 800585a:	4808      	ldr	r0, [pc, #32]	; (800587c <bmk6_execute+0x6c>)
}
 800585c:	b002      	add	sp, #8
 800585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8005862:	f7fc bfd5 	b.w	8002810 <test_println>
 8005866:	bf00      	nop
 8005868:	200008b8 	.word	0x200008b8
 800586c:	08006260 	.word	0x08006260
 8005870:	20001445 	.word	0x20001445
 8005874:	08005a81 	.word	0x08005a81
 8005878:	08006be8 	.word	0x08006be8
 800587c:	08006bf8 	.word	0x08006bf8

08005880 <msg_loop_test>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8005884:	f7fd f87c 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800588c:	f7fd f888 	bl	80029a0 <test_start_timer>
 8005890:	4e07      	ldr	r6, [pc, #28]	; (80058b0 <msg_loop_test+0x30>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8005892:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8005894:	2101      	movs	r1, #1
 8005896:	4628      	mov	r0, r5
 8005898:	f7fb ff32 	bl	8001700 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800589c:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800589e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f7      	beq.n	8005894 <msg_loop_test+0x14>
  (void)chMsgSend(tp, 0);
 80058a4:	4628      	mov	r0, r5
 80058a6:	2100      	movs	r1, #0
 80058a8:	f7fb ff2a 	bl	8001700 <chMsgSend>
  return n;
}
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	20001445 	.word	0x20001445
 80058b4:	f3af 8000 	nop.w
 80058b8:	f3af 8000 	nop.w
 80058bc:	f3af 8000 	nop.w

080058c0 <bmk1_execute>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80058c0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <bmk1_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80058c4:	4a13      	ldr	r2, [pc, #76]	; (8005914 <bmk1_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	6810      	ldr	r0, [r2, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <bmk1_execute+0x58>)
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80058ce:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80058d0:	2100      	movs	r1, #0
 80058d2:	3a01      	subs	r2, #1
 80058d4:	9100      	str	r1, [sp, #0]
 80058d6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80058da:	f7fb f851 	bl	8000980 <chThdCreateStatic>
 80058de:	4b0f      	ldr	r3, [pc, #60]	; (800591c <bmk1_execute+0x5c>)
 80058e0:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80058e2:	f7ff ffcd 	bl	8005880 <msg_loop_test>
 80058e6:	4604      	mov	r4, r0
  test_wait_threads();
 80058e8:	f7fd f832 	bl	8002950 <test_wait_threads>
  test_print("--- Score : ");
 80058ec:	480c      	ldr	r0, [pc, #48]	; (8005920 <bmk1_execute+0x60>)
 80058ee:	f7fc ff77 	bl	80027e0 <test_print>
  test_printn(n);
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7fc ff44 	bl	8002780 <test_printn>
  test_print(" msgs/S, ");
 80058f8:	480a      	ldr	r0, [pc, #40]	; (8005924 <bmk1_execute+0x64>)
 80058fa:	f7fc ff71 	bl	80027e0 <test_print>
  test_printn(n << 1);
 80058fe:	0060      	lsls	r0, r4, #1
 8005900:	f7fc ff3e 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005904:	4808      	ldr	r0, [pc, #32]	; (8005928 <bmk1_execute+0x68>)
}
 8005906:	b002      	add	sp, #8
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800590c:	f7fc bf80 	b.w	8002810 <test_println>
 8005910:	200008b8 	.word	0x200008b8
 8005914:	08006260 	.word	0x08006260
 8005918:	080057f1 	.word	0x080057f1
 800591c:	20001460 	.word	0x20001460
 8005920:	08006be8 	.word	0x08006be8
 8005924:	08006c04 	.word	0x08006c04
 8005928:	08006c10 	.word	0x08006c10
 800592c:	f3af 8000 	nop.w

08005930 <bmk2_execute>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8005930:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <bmk2_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <bmk2_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	6810      	ldr	r0, [r2, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <bmk2_execute+0x58>)
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 800593e:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8005940:	2100      	movs	r1, #0
 8005942:	3201      	adds	r2, #1
 8005944:	9100      	str	r1, [sp, #0]
 8005946:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800594a:	f7fb f819 	bl	8000980 <chThdCreateStatic>
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <bmk2_execute+0x5c>)
 8005950:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8005952:	f7ff ff95 	bl	8005880 <msg_loop_test>
 8005956:	4604      	mov	r4, r0
  test_wait_threads();
 8005958:	f7fc fffa 	bl	8002950 <test_wait_threads>
  test_print("--- Score : ");
 800595c:	480c      	ldr	r0, [pc, #48]	; (8005990 <bmk2_execute+0x60>)
 800595e:	f7fc ff3f 	bl	80027e0 <test_print>
  test_printn(n);
 8005962:	4620      	mov	r0, r4
 8005964:	f7fc ff0c 	bl	8002780 <test_printn>
  test_print(" msgs/S, ");
 8005968:	480a      	ldr	r0, [pc, #40]	; (8005994 <bmk2_execute+0x64>)
 800596a:	f7fc ff39 	bl	80027e0 <test_print>
  test_printn(n << 1);
 800596e:	0060      	lsls	r0, r4, #1
 8005970:	f7fc ff06 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005974:	4808      	ldr	r0, [pc, #32]	; (8005998 <bmk2_execute+0x68>)
}
 8005976:	b002      	add	sp, #8
 8005978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800597c:	f7fc bf48 	b.w	8002810 <test_println>
 8005980:	200008b8 	.word	0x200008b8
 8005984:	08006260 	.word	0x08006260
 8005988:	080057f1 	.word	0x080057f1
 800598c:	20001460 	.word	0x20001460
 8005990:	08006be8 	.word	0x08006be8
 8005994:	08006c04 	.word	0x08006c04
 8005998:	08006c10 	.word	0x08006c10
 800599c:	f3af 8000 	nop.w

080059a0 <bmk3_execute>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80059a4:	4f2c      	ldr	r7, [pc, #176]	; (8005a58 <bmk3_execute+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80059a6:	4e2d      	ldr	r6, [pc, #180]	; (8005a5c <bmk3_execute+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6830      	ldr	r0, [r6, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <bmk3_execute+0xc0>)
 80059b0:	4c2c      	ldr	r4, [pc, #176]	; (8005a64 <bmk3_execute+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80059b2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005a74 <bmk3_execute+0xd4>
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80059b6:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80059b8:	2500      	movs	r5, #0
 80059ba:	3201      	adds	r2, #1
 80059bc:	9500      	str	r5, [sp, #0]
 80059be:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80059c2:	f7fa ffdd 	bl	8000980 <chThdCreateStatic>
 80059c6:	69ba      	ldr	r2, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80059c8:	6873      	ldr	r3, [r6, #4]
 80059ca:	6892      	ldr	r2, [r2, #8]
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80059cc:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80059ce:	3a02      	subs	r2, #2
 80059d0:	9500      	str	r5, [sp, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80059d8:	4643      	mov	r3, r8
 80059da:	f7fa ffd1 	bl	8000980 <chThdCreateStatic>
 80059de:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80059e0:	68b3      	ldr	r3, [r6, #8]
 80059e2:	6892      	ldr	r2, [r2, #8]

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80059e4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80059e6:	3a03      	subs	r2, #3
 80059e8:	9500      	str	r5, [sp, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80059f0:	4643      	mov	r3, r8
 80059f2:	f7fa ffc5 	bl	8000980 <chThdCreateStatic>
 80059f6:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80059f8:	68f3      	ldr	r3, [r6, #12]
 80059fa:	6892      	ldr	r2, [r2, #8]
static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80059fc:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80059fe:	3a04      	subs	r2, #4
 8005a00:	9500      	str	r5, [sp, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005a08:	4643      	mov	r3, r8
 8005a0a:	f7fa ffb9 	bl	8000980 <chThdCreateStatic>
 8005a0e:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8005a10:	6933      	ldr	r3, [r6, #16]
 8005a12:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8005a14:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8005a16:	3a05      	subs	r2, #5
 8005a18:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	9500      	str	r5, [sp, #0]
 8005a20:	4643      	mov	r3, r8
 8005a22:	f7fa ffad 	bl	8000980 <chThdCreateStatic>
 8005a26:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	f7ff ff29 	bl	8005880 <msg_loop_test>
 8005a2e:	4604      	mov	r4, r0
  test_wait_threads();
 8005a30:	f7fc ff8e 	bl	8002950 <test_wait_threads>
  test_print("--- Score : ");
 8005a34:	480c      	ldr	r0, [pc, #48]	; (8005a68 <bmk3_execute+0xc8>)
 8005a36:	f7fc fed3 	bl	80027e0 <test_print>
  test_printn(n);
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7fc fea0 	bl	8002780 <test_printn>
  test_print(" msgs/S, ");
 8005a40:	480a      	ldr	r0, [pc, #40]	; (8005a6c <bmk3_execute+0xcc>)
 8005a42:	f7fc fecd 	bl	80027e0 <test_print>
  test_printn(n << 1);
 8005a46:	0060      	lsls	r0, r4, #1
 8005a48:	f7fc fe9a 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005a4c:	4808      	ldr	r0, [pc, #32]	; (8005a70 <bmk3_execute+0xd0>)
}
 8005a4e:	b002      	add	sp, #8
 8005a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8005a54:	f7fc bedc 	b.w	8002810 <test_println>
 8005a58:	200008b8 	.word	0x200008b8
 8005a5c:	08006260 	.word	0x08006260
 8005a60:	080057f1 	.word	0x080057f1
 8005a64:	20001460 	.word	0x20001460
 8005a68:	08006be8 	.word	0x08006be8
 8005a6c:	08006c04 	.word	0x08006c04
 8005a70:	08006c10 	.word	0x08006c10
 8005a74:	08005a81 	.word	0x08005a81
 8005a78:	f3af 8000 	nop.w
 8005a7c:	f3af 8000 	nop.w

08005a80 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8005a80:	f7fb b846 	b.w	8000b10 <chThdExit>
 8005a84:	f3af 8000 	nop.w
 8005a88:	f3af 8000 	nop.w
 8005a8c:	f3af 8000 	nop.w

08005a90 <bmk4_execute>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8005a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005a94:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <bmk4_execute+0xa0>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005a96:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <bmk4_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	6810      	ldr	r0, [r2, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <bmk4_execute+0xa8>)
 8005aa0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005b48 <bmk4_execute+0xb8>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8005aa4:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	3201      	adds	r2, #1
 8005aaa:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005aae:	9500      	str	r5, [sp, #0]
 8005ab0:	f7fa ff66 	bl	8000980 <chThdCreateStatic>
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <bmk4_execute+0xac>)
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8005aba:	f7fc ff61 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ac2:	f7fc ff6d 	bl	80029a0 <test_start_timer>
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8005ac6:	46aa      	mov	sl, r5
 8005ac8:	f04f 0820 	mov.w	r8, #32
 8005acc:	2720      	movs	r7, #32
 8005ace:	f388 8811 	msr	BASEPRI, r8
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7fa fe73 	bl	80007c0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8005ada:	4620      	mov	r0, r4
 8005adc:	2100      	movs	r1, #0
 8005ade:	f7fa fe6f 	bl	80007c0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	f7fa fe6b 	bl	80007c0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8005aea:	4620      	mov	r0, r4
 8005aec:	2100      	movs	r1, #0
 8005aee:	f7fa fe67 	bl	80007c0 <chSchWakeupS>
 8005af2:	2600      	movs	r6, #0
 8005af4:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005af8:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8005afc:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0e4      	beq.n	8005acc <bmk4_execute+0x3c>
 8005b02:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8005b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7fa fe58 	bl	80007c0 <chSchWakeupS>
 8005b10:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 8005b14:	f7fc ff1c 	bl	8002950 <test_wait_threads>
  test_print("--- Score : ");
 8005b18:	4809      	ldr	r0, [pc, #36]	; (8005b40 <bmk4_execute+0xb0>)
 8005b1a:	f7fc fe61 	bl	80027e0 <test_print>
  test_printn(n * 2);
 8005b1e:	0068      	lsls	r0, r5, #1
 8005b20:	f7fc fe2e 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005b24:	4807      	ldr	r0, [pc, #28]	; (8005b44 <bmk4_execute+0xb4>)
}
 8005b26:	b002      	add	sp, #8
 8005b28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8005b2c:	f7fc be70 	b.w	8002810 <test_println>
 8005b30:	200008b8 	.word	0x200008b8
 8005b34:	08006260 	.word	0x08006260
 8005b38:	08005b51 	.word	0x08005b51
 8005b3c:	20001460 	.word	0x20001460
 8005b40:	08006be8 	.word	0x08006be8
 8005b44:	08006c10 	.word	0x08006c10
 8005b48:	20001445 	.word	0x20001445
 8005b4c:	f3af 8000 	nop.w

08005b50 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b50:	4a07      	ldr	r2, [pc, #28]	; (8005b70 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8005b52:	b510      	push	{r4, lr}
 8005b54:	2320      	movs	r3, #32
 8005b56:	6994      	ldr	r4, [r2, #24]
 8005b58:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	f7fa fdef 	bl	8000740 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8005b62:	6a23      	ldr	r3, [r4, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f9      	beq.n	8005b5c <thread4+0xc>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	200008b8 	.word	0x200008b8
 8005b74:	f3af 8000 	nop.w
 8005b78:	f3af 8000 	nop.w
 8005b7c:	f3af 8000 	nop.w

08005b80 <bmk5_execute>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8005b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <bmk5_execute+0x5c>)

  uint32_t n = 0;
  void *wap = wa[0];
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <bmk5_execute+0x60>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() - 1;
 8005b8e:	689d      	ldr	r5, [r3, #8]
 8005b90:	4f14      	ldr	r7, [pc, #80]	; (8005be4 <bmk5_execute+0x64>)
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8005b92:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
 8005b94:	f7fc fef4 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b9c:	f7fc ff00 	bl	80029a0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 8005ba0:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8005ba2:	3d01      	subs	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8005ba4:	4626      	mov	r6, r4
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <bmk5_execute+0x68>)
 8005ba8:	9600      	str	r6, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	f7fa fee5 	bl	8000980 <chThdCreateStatic>
 8005bb6:	f7fa ffb3 	bl	8000b20 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005bba:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8005bbc:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f1      	beq.n	8005ba6 <bmk5_execute+0x26>
  test_print("--- Score : ");
 8005bc2:	480a      	ldr	r0, [pc, #40]	; (8005bec <bmk5_execute+0x6c>)
 8005bc4:	f7fc fe0c 	bl	80027e0 <test_print>
  test_printn(n);
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7fc fdd9 	bl	8002780 <test_printn>
  test_println(" threads/S");
 8005bce:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <bmk5_execute+0x70>)
}
 8005bd0:	b002      	add	sp, #8
 8005bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8005bd6:	f7fc be1b 	b.w	8002810 <test_println>
 8005bda:	bf00      	nop
 8005bdc:	200008b8 	.word	0x200008b8
 8005be0:	08006260 	.word	0x08006260
 8005be4:	20001445 	.word	0x20001445
 8005be8:	08005a81 	.word	0x08005a81
 8005bec:	08006be8 	.word	0x08006be8
 8005bf0:	08006bf8 	.word	0x08006bf8
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	f3af 8000 	nop.w
 8005bfc:	f3af 8000 	nop.w

08005c00 <bmk7_execute>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005c04:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8005d08 <bmk7_execute+0x108>
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8005c08:	4f37      	ldr	r7, [pc, #220]	; (8005ce8 <bmk7_execute+0xe8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005c0a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005c0e:	6838      	ldr	r0, [r7, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	4b36      	ldr	r3, [pc, #216]	; (8005cec <bmk7_execute+0xec>)
 8005c14:	4e36      	ldr	r6, [pc, #216]	; (8005cf0 <bmk7_execute+0xf0>)
 8005c16:	4d37      	ldr	r5, [pc, #220]	; (8005cf4 <bmk7_execute+0xf4>)
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8005c18:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8005c1a:	2400      	movs	r4, #0
 8005c1c:	3205      	adds	r2, #5
 8005c1e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005c22:	9400      	str	r4, [sp, #0]
 8005c24:	f7fa feac 	bl	8000980 <chThdCreateStatic>
 8005c28:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6892      	ldr	r2, [r2, #8]
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8005c30:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8005c32:	3204      	adds	r2, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <bmk7_execute+0xec>)
 8005c3c:	9400      	str	r4, [sp, #0]
 8005c3e:	f7fa fe9f 	bl	8000980 <chThdCreateStatic>
 8005c42:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6892      	ldr	r2, [r2, #8]

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8005c4a:	6070      	str	r0, [r6, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8005c4c:	3203      	adds	r2, #3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <bmk7_execute+0xec>)
 8005c56:	9400      	str	r4, [sp, #0]
 8005c58:	f7fa fe92 	bl	8000980 <chThdCreateStatic>
 8005c5c:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6892      	ldr	r2, [r2, #8]
static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8005c64:	60b0      	str	r0, [r6, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8005c66:	3202      	adds	r2, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <bmk7_execute+0xec>)
 8005c70:	9400      	str	r4, [sp, #0]
 8005c72:	f7fa fe85 	bl	8000980 <chThdCreateStatic>
 8005c76:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8005c7e:	60f0      	str	r0, [r6, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8005c80:	3201      	adds	r2, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <bmk7_execute+0xec>)
 8005c8a:	9400      	str	r4, [sp, #0]
 8005c8c:	f7fa fe78 	bl	8000980 <chThdCreateStatic>
 8005c90:	6130      	str	r0, [r6, #16]

  n = 0;
  test_wait_tick();
 8005c92:	f7fc fe75 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c9a:	f7fc fe81 	bl	80029a0 <test_start_timer>
  do {
    chSemReset(&sem1, 0);
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4815      	ldr	r0, [pc, #84]	; (8005cf8 <bmk7_execute+0xf8>)
 8005ca2:	f7fb f8b5 	bl	8000e10 <chSemReset>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005ca6:	782b      	ldrb	r3, [r5, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8005ca8:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f7      	beq.n	8005c9e <bmk7_execute+0x9e>
  test_terminate_threads();
 8005cae:	f7fc fe3f 	bl	8002930 <test_terminate_threads>
  chSemReset(&sem1, 0);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4810      	ldr	r0, [pc, #64]	; (8005cf8 <bmk7_execute+0xf8>)
 8005cb6:	f7fb f8ab 	bl	8000e10 <chSemReset>
  test_wait_threads();
 8005cba:	f7fc fe49 	bl	8002950 <test_wait_threads>

  test_print("--- Score : ");
 8005cbe:	480f      	ldr	r0, [pc, #60]	; (8005cfc <bmk7_execute+0xfc>)
 8005cc0:	f7fc fd8e 	bl	80027e0 <test_print>
  test_printn(n);
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7fc fd5b 	bl	8002780 <test_printn>
  test_print(" reschedules/S, ");
 8005cca:	480d      	ldr	r0, [pc, #52]	; (8005d00 <bmk7_execute+0x100>)
 8005ccc:	f7fc fd88 	bl	80027e0 <test_print>
  test_printn(n * 6);
 8005cd0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8005cd4:	0040      	lsls	r0, r0, #1
 8005cd6:	f7fc fd53 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005cda:	480a      	ldr	r0, [pc, #40]	; (8005d04 <bmk7_execute+0x104>)
}
 8005cdc:	b002      	add	sp, #8
 8005cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8005ce2:	f7fc bd95 	b.w	8002810 <test_println>
 8005ce6:	bf00      	nop
 8005ce8:	08006260 	.word	0x08006260
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	20001460 	.word	0x20001460
 8005cf4:	20001445 	.word	0x20001445
 8005cf8:	20001538 	.word	0x20001538
 8005cfc:	08006be8 	.word	0x08006be8
 8005d00:	08006c1c 	.word	0x08006c1c
 8005d04:	08006c10 	.word	0x08006c10
 8005d08:	200008b8 	.word	0x200008b8
 8005d0c:	f3af 8000 	nop.w

08005d10 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8005d10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005d12:	4c06      	ldr	r4, [pc, #24]	; (8005d2c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005d14:	69a3      	ldr	r3, [r4, #24]

  (void)p;
  while (!chThdShouldTerminateX())
 8005d16:	7f5b      	ldrb	r3, [r3, #29]
 8005d18:	075a      	lsls	r2, r3, #29
 8005d1a:	d406      	bmi.n	8005d2a <thread3+0x1a>
    chSemWait(&sem1);
 8005d1c:	4804      	ldr	r0, [pc, #16]	; (8005d30 <thread3+0x20>)
 8005d1e:	f7fb f887 	bl	8000e30 <chSemWait>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8005d24:	7f5b      	ldrb	r3, [r3, #29]
 8005d26:	075b      	lsls	r3, r3, #29
 8005d28:	d5f8      	bpl.n	8005d1c <thread3+0xc>
 8005d2a:	bd10      	pop	{r4, pc}
 8005d2c:	200008b8 	.word	0x200008b8
 8005d30:	20001538 	.word	0x20001538
 8005d34:	f3af 8000 	nop.w
 8005d38:	f3af 8000 	nop.w
 8005d3c:	f3af 8000 	nop.w

08005d40 <bmk7_setup>:
    chSemWait(&sem1);
}

static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
 8005d40:	2100      	movs	r1, #0
 8005d42:	4801      	ldr	r0, [pc, #4]	; (8005d48 <bmk7_setup+0x8>)
 8005d44:	f7fb b844 	b.w	8000dd0 <chSemObjectInit>
 8005d48:	20001538 	.word	0x20001538
 8005d4c:	f3af 8000 	nop.w

08005d50 <bmk11_setup>:
 * a second of continuous operations.
 */

static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
 8005d50:	2101      	movs	r1, #1
 8005d52:	4801      	ldr	r0, [pc, #4]	; (8005d58 <bmk11_setup+0x8>)
 8005d54:	f7fb b83c 	b.w	8000dd0 <chSemObjectInit>
 8005d58:	20001538 	.word	0x20001538
 8005d5c:	f3af 8000 	nop.w

08005d60 <bmk8_execute>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8005d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d64:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8005d66:	ac04      	add	r4, sp, #16
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005d68:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005e38 <bmk8_execute+0xd8>
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005d6c:	4f2d      	ldr	r7, [pc, #180]	; (8005e24 <bmk8_execute+0xc4>)
 8005d6e:	4e2e      	ldr	r6, [pc, #184]	; (8005e28 <bmk8_execute+0xc8>)
 8005d70:	4d2e      	ldr	r5, [pc, #184]	; (8005e2c <bmk8_execute+0xcc>)
}

static void bmk8_execute(void) {
  uint32_t n;

  n = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8005d78:	f7fc fe02 	bl	8002980 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005d7c:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005d80:	6838      	ldr	r0, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	9400      	str	r4, [sp, #0]
 8005d86:	4633      	mov	r3, r6
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005d8e:	f7fa fdf7 	bl	8000980 <chThdCreateStatic>
 8005d92:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005d9a:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	9400      	str	r4, [sp, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005da6:	4633      	mov	r3, r6
 8005da8:	f7fa fdea 	bl	8000980 <chThdCreateStatic>
 8005dac:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6892      	ldr	r2, [r2, #8]

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005db4:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005db6:	3a01      	subs	r2, #1
 8005db8:	9400      	str	r4, [sp, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005dc0:	4633      	mov	r3, r6
 8005dc2:	f7fa fddd 	bl	8000980 <chThdCreateStatic>
 8005dc6:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6892      	ldr	r2, [r2, #8]
  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005dce:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	9400      	str	r4, [sp, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005dda:	4633      	mov	r3, r6
 8005ddc:	f7fa fdd0 	bl	8000980 <chThdCreateStatic>
 8005de0:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6892      	ldr	r2, [r2, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005de8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8005dea:	3a01      	subs	r2, #1
 8005dec:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005df0:	9400      	str	r4, [sp, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	4633      	mov	r3, r6
 8005df6:	f7fa fdc3 	bl	8000980 <chThdCreateStatic>
 8005dfa:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8005dfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e00:	f7fa fe2e 	bl	8000a60 <chThdSleep>
  test_terminate_threads();
 8005e04:	f7fc fd94 	bl	8002930 <test_terminate_threads>
  test_wait_threads();
 8005e08:	f7fc fda2 	bl	8002950 <test_wait_threads>

  test_print("--- Score : ");
 8005e0c:	4808      	ldr	r0, [pc, #32]	; (8005e30 <bmk8_execute+0xd0>)
 8005e0e:	f7fc fce7 	bl	80027e0 <test_print>
  test_printn(n);
 8005e12:	9803      	ldr	r0, [sp, #12]
 8005e14:	f7fc fcb4 	bl	8002780 <test_printn>
  test_println(" ctxswc/S");
 8005e18:	4806      	ldr	r0, [pc, #24]	; (8005e34 <bmk8_execute+0xd4>)
 8005e1a:	f7fc fcf9 	bl	8002810 <test_println>
}
 8005e1e:	b004      	add	sp, #16
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	08006260 	.word	0x08006260
 8005e28:	08005e41 	.word	0x08005e41
 8005e2c:	20001460 	.word	0x20001460
 8005e30:	08006be8 	.word	0x08006be8
 8005e34:	08006c10 	.word	0x08006c10
 8005e38:	200008b8 	.word	0x200008b8
 8005e3c:	f3af 8000 	nop.w

08005e40 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d09      	ldr	r5, [pc, #36]	; (8005e68 <thread8+0x28>)
 8005e44:	4604      	mov	r4, r0

  do {
    chThdYield();
 8005e46:	f7fa fe2b 	bl	8000aa0 <chThdYield>
    chThdYield();
 8005e4a:	f7fa fe29 	bl	8000aa0 <chThdYield>
    chThdYield();
 8005e4e:	f7fa fe27 	bl	8000aa0 <chThdYield>
    chThdYield();
 8005e52:	f7fa fe25 	bl	8000aa0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8005e56:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005e58:	69aa      	ldr	r2, [r5, #24]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	6023      	str	r3, [r4, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8005e5e:	7f53      	ldrb	r3, [r2, #29]
 8005e60:	075b      	lsls	r3, r3, #29
 8005e62:	d5f0      	bpl.n	8005e46 <thread8+0x6>
}
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	bf00      	nop
 8005e68:	200008b8 	.word	0x200008b8
 8005e6c:	f3af 8000 	nop.w

08005e70 <bmk9_execute>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	b082      	sub	sp, #8
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
 8005e74:	2400      	movs	r4, #0
 8005e76:	4623      	mov	r3, r4
 8005e78:	2210      	movs	r2, #16
 8005e7a:	4923      	ldr	r1, [pc, #140]	; (8005f08 <bmk9_execute+0x98>)
 8005e7c:	4823      	ldr	r0, [pc, #140]	; (8005f0c <bmk9_execute+0x9c>)
 8005e7e:	9400      	str	r4, [sp, #0]
 8005e80:	f7fb fd9e 	bl	80019c0 <chIQObjectInit>
  n = 0;
  test_wait_tick();
 8005e84:	f7fc fd7c 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e8c:	f7fc fd88 	bl	80029a0 <test_start_timer>
 8005e90:	4e1f      	ldr	r6, [pc, #124]	; (8005f10 <bmk9_execute+0xa0>)
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8005e92:	4625      	mov	r5, r4
 8005e94:	2320      	movs	r3, #32
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	481b      	ldr	r0, [pc, #108]	; (8005f0c <bmk9_execute+0x9c>)
 8005e9e:	f7fb fdaf 	bl	8001a00 <chIQPutI>
    chIQPutI(&iq, 1);
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4819      	ldr	r0, [pc, #100]	; (8005f0c <bmk9_execute+0x9c>)
 8005ea6:	f7fb fdab 	bl	8001a00 <chIQPutI>
    chIQPutI(&iq, 2);
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4817      	ldr	r0, [pc, #92]	; (8005f0c <bmk9_execute+0x9c>)
 8005eae:	f7fb fda7 	bl	8001a00 <chIQPutI>
    chIQPutI(&iq, 3);
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	4815      	ldr	r0, [pc, #84]	; (8005f0c <bmk9_execute+0x9c>)
 8005eb6:	f7fb fda3 	bl	8001a00 <chIQPutI>
 8005eba:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8005ebe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ec2:	4812      	ldr	r0, [pc, #72]	; (8005f0c <bmk9_execute+0x9c>)
 8005ec4:	f7fb fdbc 	bl	8001a40 <chIQGetTimeout>
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ecc:	480f      	ldr	r0, [pc, #60]	; (8005f0c <bmk9_execute+0x9c>)
 8005ece:	f7fb fdb7 	bl	8001a40 <chIQGetTimeout>
 8005ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ed6:	480d      	ldr	r0, [pc, #52]	; (8005f0c <bmk9_execute+0x9c>)
 8005ed8:	f7fb fdb2 	bl	8001a40 <chIQGetTimeout>
 8005edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ee0:	480a      	ldr	r0, [pc, #40]	; (8005f0c <bmk9_execute+0x9c>)
 8005ee2:	f7fb fdad 	bl	8001a40 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005ee6:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8005ee8:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0d2      	beq.n	8005e94 <bmk9_execute+0x24>
  test_print("--- Score : ");
 8005eee:	4809      	ldr	r0, [pc, #36]	; (8005f14 <bmk9_execute+0xa4>)
 8005ef0:	f7fc fc76 	bl	80027e0 <test_print>
  test_printn(n * 4);
 8005ef4:	00a0      	lsls	r0, r4, #2
 8005ef6:	f7fc fc43 	bl	8002780 <test_printn>
  test_println(" bytes/S");
 8005efa:	4807      	ldr	r0, [pc, #28]	; (8005f18 <bmk9_execute+0xa8>)
}
 8005efc:	b002      	add	sp, #8
 8005efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8005f02:	f7fc bc85 	b.w	8002810 <test_println>
 8005f06:	bf00      	nop
 8005f08:	20001504 	.word	0x20001504
 8005f0c:	200014e0 	.word	0x200014e0
 8005f10:	20001445 	.word	0x20001445
 8005f14:	08006be8 	.word	0x08006be8
 8005f18:	08006c30 	.word	0x08006c30
 8005f1c:	f3af 8000 	nop.w

08005f20 <bmk10_execute>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8005f22:	f7fc fd2d 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f2a:	f7fc fd39 	bl	80029a0 <test_start_timer>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8005f2e:	2400      	movs	r4, #0
 8005f30:	4f14      	ldr	r7, [pc, #80]	; (8005f84 <bmk10_execute+0x64>)

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8005f32:	4626      	mov	r6, r4
 8005f34:	2520      	movs	r5, #32
 8005f36:	f385 8811 	msr	BASEPRI, r5
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <bmk10_execute+0x68>)
 8005f3e:	4813      	ldr	r0, [pc, #76]	; (8005f8c <bmk10_execute+0x6c>)
 8005f40:	2101      	movs	r1, #1
 8005f42:	f7fa fb1d 	bl	8000580 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8005f46:	2300      	movs	r3, #0
 8005f48:	4a0f      	ldr	r2, [pc, #60]	; (8005f88 <bmk10_execute+0x68>)
 8005f4a:	4811      	ldr	r0, [pc, #68]	; (8005f90 <bmk10_execute+0x70>)
 8005f4c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005f50:	f7fa fb16 	bl	8000580 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8005f54:	480d      	ldr	r0, [pc, #52]	; (8005f8c <bmk10_execute+0x6c>)
 8005f56:	f7fa fb53 	bl	8000600 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8005f5a:	480d      	ldr	r0, [pc, #52]	; (8005f90 <bmk10_execute+0x70>)
 8005f5c:	f7fa fb50 	bl	8000600 <chVTDoResetI>
 8005f60:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005f64:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8005f66:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0e4      	beq.n	8005f36 <bmk10_execute+0x16>
  test_print("--- Score : ");
 8005f6c:	4809      	ldr	r0, [pc, #36]	; (8005f94 <bmk10_execute+0x74>)
 8005f6e:	f7fc fc37 	bl	80027e0 <test_print>
  test_printn(n * 2);
 8005f72:	0060      	lsls	r0, r4, #1
 8005f74:	f7fc fc04 	bl	8002780 <test_printn>
  test_println(" timers/S");
 8005f78:	4807      	ldr	r0, [pc, #28]	; (8005f98 <bmk10_execute+0x78>)
}
 8005f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8005f7e:	f7fc bc47 	b.w	8002810 <test_println>
 8005f82:	bf00      	nop
 8005f84:	20001445 	.word	0x20001445
 8005f88:	080056f1 	.word	0x080056f1
 8005f8c:	20001544 	.word	0x20001544
 8005f90:	20001524 	.word	0x20001524
 8005f94:	08006be8 	.word	0x08006be8
 8005f98:	08006c3c 	.word	0x08006c3c
 8005f9c:	f3af 8000 	nop.w

08005fa0 <bmk11_execute>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8005fa0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8005fa2:	f7fc fced 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8005fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005faa:	f7fc fcf9 	bl	80029a0 <test_start_timer>
 8005fae:	4d14      	ldr	r5, [pc, #80]	; (8006000 <bmk11_execute+0x60>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8005fb0:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8005fb2:	4814      	ldr	r0, [pc, #80]	; (8006004 <bmk11_execute+0x64>)
 8005fb4:	f7fa ff3c 	bl	8000e30 <chSemWait>
    chSemSignal(&sem1);
 8005fb8:	4812      	ldr	r0, [pc, #72]	; (8006004 <bmk11_execute+0x64>)
 8005fba:	f7fa ffa9 	bl	8000f10 <chSemSignal>
    chSemWait(&sem1);
 8005fbe:	4811      	ldr	r0, [pc, #68]	; (8006004 <bmk11_execute+0x64>)
 8005fc0:	f7fa ff36 	bl	8000e30 <chSemWait>
    chSemSignal(&sem1);
 8005fc4:	480f      	ldr	r0, [pc, #60]	; (8006004 <bmk11_execute+0x64>)
 8005fc6:	f7fa ffa3 	bl	8000f10 <chSemSignal>
    chSemWait(&sem1);
 8005fca:	480e      	ldr	r0, [pc, #56]	; (8006004 <bmk11_execute+0x64>)
 8005fcc:	f7fa ff30 	bl	8000e30 <chSemWait>
    chSemSignal(&sem1);
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <bmk11_execute+0x64>)
 8005fd2:	f7fa ff9d 	bl	8000f10 <chSemSignal>
    chSemWait(&sem1);
 8005fd6:	480b      	ldr	r0, [pc, #44]	; (8006004 <bmk11_execute+0x64>)
 8005fd8:	f7fa ff2a 	bl	8000e30 <chSemWait>
    chSemSignal(&sem1);
 8005fdc:	4809      	ldr	r0, [pc, #36]	; (8006004 <bmk11_execute+0x64>)
 8005fde:	f7fa ff97 	bl	8000f10 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005fe2:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8005fe4:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0e3      	beq.n	8005fb2 <bmk11_execute+0x12>
  test_print("--- Score : ");
 8005fea:	4807      	ldr	r0, [pc, #28]	; (8006008 <bmk11_execute+0x68>)
 8005fec:	f7fc fbf8 	bl	80027e0 <test_print>
  test_printn(n * 4);
 8005ff0:	00a0      	lsls	r0, r4, #2
 8005ff2:	f7fc fbc5 	bl	8002780 <test_printn>
  test_println(" wait+signal/S");
 8005ff6:	4805      	ldr	r0, [pc, #20]	; (800600c <bmk11_execute+0x6c>)
}
 8005ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8005ffc:	f7fc bc08 	b.w	8002810 <test_println>
 8006000:	20001445 	.word	0x20001445
 8006004:	20001538 	.word	0x20001538
 8006008:	08006be8 	.word	0x08006be8
 800600c:	08006c48 	.word	0x08006c48

08006010 <bmk12_execute>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8006010:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8006012:	f7fc fcb5 	bl	8002980 <test_wait_tick>
  test_start_timer(1000);
 8006016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800601a:	f7fc fcc1 	bl	80029a0 <test_start_timer>
 800601e:	4d14      	ldr	r5, [pc, #80]	; (8006070 <bmk12_execute+0x60>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8006020:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8006022:	4814      	ldr	r0, [pc, #80]	; (8006074 <bmk12_execute+0x64>)
 8006024:	f7fb f864 	bl	80010f0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8006028:	4812      	ldr	r0, [pc, #72]	; (8006074 <bmk12_execute+0x64>)
 800602a:	f7fb f889 	bl	8001140 <chMtxUnlock>
    chMtxLock(&mtx1);
 800602e:	4811      	ldr	r0, [pc, #68]	; (8006074 <bmk12_execute+0x64>)
 8006030:	f7fb f85e 	bl	80010f0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8006034:	480f      	ldr	r0, [pc, #60]	; (8006074 <bmk12_execute+0x64>)
 8006036:	f7fb f883 	bl	8001140 <chMtxUnlock>
    chMtxLock(&mtx1);
 800603a:	480e      	ldr	r0, [pc, #56]	; (8006074 <bmk12_execute+0x64>)
 800603c:	f7fb f858 	bl	80010f0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8006040:	480c      	ldr	r0, [pc, #48]	; (8006074 <bmk12_execute+0x64>)
 8006042:	f7fb f87d 	bl	8001140 <chMtxUnlock>
    chMtxLock(&mtx1);
 8006046:	480b      	ldr	r0, [pc, #44]	; (8006074 <bmk12_execute+0x64>)
 8006048:	f7fb f852 	bl	80010f0 <chMtxLock>
    chMtxUnlock(&mtx1);
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <bmk12_execute+0x64>)
 800604e:	f7fb f877 	bl	8001140 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8006052:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8006054:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0e3      	beq.n	8006022 <bmk12_execute+0x12>
  test_print("--- Score : ");
 800605a:	4807      	ldr	r0, [pc, #28]	; (8006078 <bmk12_execute+0x68>)
 800605c:	f7fc fbc0 	bl	80027e0 <test_print>
  test_printn(n * 4);
 8006060:	00a0      	lsls	r0, r4, #2
 8006062:	f7fc fb8d 	bl	8002780 <test_printn>
  test_println(" lock+unlock/S");
 8006066:	4805      	ldr	r0, [pc, #20]	; (800607c <bmk12_execute+0x6c>)
}
 8006068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 800606c:	f7fc bbd0 	b.w	8002810 <test_println>
 8006070:	20001445 	.word	0x20001445
 8006074:	20001514 	.word	0x20001514
 8006078:	08006be8 	.word	0x08006be8
 800607c:	08006c58 	.word	0x08006c58

08006080 <bmk12_setup>:
 * a second of continuous operations.
 */

static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <bmk12_setup+0x8>)
 8006082:	f7fa bfc5 	b.w	8001010 <chMtxObjectInit>
 8006086:	bf00      	nop
 8006088:	20001514 	.word	0x20001514
 800608c:	f3af 8000 	nop.w

08006090 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8006090:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <Thread1+0x28>)
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <Thread1+0x2c>)
 8006096:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOC, 13);       /* Orange.  */
 8006098:	4c09      	ldr	r4, [pc, #36]	; (80060c0 <Thread1+0x30>)
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80060a0:	462e      	mov	r6, r5
 80060a2:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(1000);
 80060a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80060a8:	f7fa fcda 	bl	8000a60 <chThdSleep>
    palClearPad(GPIOC, 13);     /* Orange.  */
 80060ac:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(1000);
 80060ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80060b2:	f7fa fcd5 	bl	8000a60 <chThdSleep>
 80060b6:	e7f4      	b.n	80060a2 <Thread1+0x12>
 80060b8:	200008b8 	.word	0x200008b8
 80060bc:	08006ec0 	.word	0x08006ec0
 80060c0:	40020800 	.word	0x40020800
 80060c4:	f3af 8000 	nop.w
 80060c8:	f3af 8000 	nop.w
 80060cc:	f3af 8000 	nop.w

080060d0 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 80060d0:	b500      	push	{lr}
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 80060d2:	4c18      	ldr	r4, [pc, #96]	; (8006134 <main+0x64>)
}

/*
 * Application entry point.
 */
int main(void) {
 80060d4:	b083      	sub	sp, #12
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 80060d6:	f7fb ff7b 	bl	8001fd0 <halInit>
  chSysInit();
 80060da:	f7fa f929 	bl	8000330 <chSysInit>

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
 80060de:	2100      	movs	r1, #0
 80060e0:	4815      	ldr	r0, [pc, #84]	; (8006138 <main+0x68>)
 80060e2:	f7fc f80d 	bl	8002100 <sdStart>
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80060e6:	4620      	mov	r0, r4
 80060e8:	f240 3282 	movw	r2, #898	; 0x382
 80060ec:	2104      	movs	r1, #4
 80060ee:	f7fc f9bf 	bl	8002470 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 80060f2:	4620      	mov	r0, r4
 80060f4:	f240 3282 	movw	r2, #898	; 0x382
 80060f8:	2108      	movs	r1, #8
 80060fa:	f7fc f9b9 	bl	8002470 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL);
 80060fe:	2201      	movs	r2, #1
 8006100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006104:	480d      	ldr	r0, [pc, #52]	; (800613c <main+0x6c>)
 8006106:	f7fc f9b3 	bl	8002470 <_pal_lld_setgroupmode>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800610a:	2300      	movs	r3, #0
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <main+0x70>)
 8006112:	480c      	ldr	r0, [pc, #48]	; (8006144 <main+0x74>)
 8006114:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8006118:	f7fa fc32 	bl	8000980 <chThdCreateStatic>
 800611c:	e003      	b.n	8006126 <main+0x56>
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
      TestThread(&SD2);
    chThdSleepMilliseconds(500);
 800611e:	f241 3088 	movw	r0, #5000	; 0x1388
 8006122:	f7fa fc9d 	bl	8000a60 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	07db      	lsls	r3, r3, #31
 800612a:	d5f8      	bpl.n	800611e <main+0x4e>
      TestThread(&SD2);
 800612c:	4802      	ldr	r0, [pc, #8]	; (8006138 <main+0x68>)
 800612e:	f7fc fc5f 	bl	80029f0 <TestThread>
 8006132:	e7f4      	b.n	800611e <main+0x4e>
 8006134:	40020000 	.word	0x40020000
 8006138:	20000ab8 	.word	0x20000ab8
 800613c:	40020800 	.word	0x40020800
 8006140:	08006091 	.word	0x08006091
 8006144:	20001558 	.word	0x20001558
 8006148:	f3af 8000 	nop.w
 800614c:	f3af 8000 	nop.w
 8006150:	656c6469 	.word	0x656c6469
	...

08006160 <ch_debug>:
 8006160:	6e69616d 18011600 08440404 1814100c     main......D.....
 8006170:	1e1d1c00 00000000 00000000 00000000     ................

08006180 <vmt>:
 8006180:	08002061 08002041 080020a1 08002081     a ..A ... ... ..
 8006190:	08002091 08002071 08002051 08002031     . ..q ..Q ..1 ..

080061a0 <default_config>:
 80061a0:	00009600 40000000 00000000 00000000     .......@........

080061b0 <pal_default_config>:
 80061b0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80061c0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 80061d0:	00000240 ffffffff 55114515 0000ffff     @........E.U....
 80061e0:	04000000 00000040 02208001 00000000     ....@..... .....
 80061f0:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8006200:	00060600 55000100 00000000 ffffffff     .......U........
 8006210:	00555055 00000fff 00000000 00000000     UPU.............
 8006220:	00000040 00000000 ffffffff 00000000     @...............
 8006230:	0000ffff 00000000 00000000 00000000     ................
 8006240:	00000000 0000000f 00000000 00000003     ................
	...

08006260 <wa>:
 8006260:	20000b30 20000d00 20000ed0 200010a0     0.. ... ... ... 
 8006270:	20001270 00000000 00000000 00000000     p.. ............

08006280 <patterns>:
 8006280:	08006ad0 080064e0 080065c0 08006730     .j...d...e..0g..
 8006290:	08006790 080067a0 080067e0 08006890     .g...g...g...h..
 80062a0:	08006900 080069e0 080069f0 08006e50     .i...i...i..Pn..
	...
 80062c0:	00000a0d 202a2a2a 6e72654b 203a6c65     ....*** Kernel: 
 80062d0:	20202020 00002020 202a2a2a 706d6f43           ..*** Comp
 80062e0:	64656c69 2020203a 00002020 202a2a2a     iled:     ..*** 
 80062f0:	706d6f43 72656c69 2020203a 00002020     Compiler:     ..
 8006300:	202a2a2a 68637241 63657469 65727574     *** Architecture
 8006310:	0000203a 202a2a2a 65726f43 72615620     : ..*** Core Var
 8006320:	746e6169 0000203a 202a2a2a 74726f50     iant: ..*** Port
 8006330:	666e4920 20203a6f 00002020 202a2a2a      Info:    ..*** 
 8006340:	74616c50 6d726f66 2020203a 00002020     Platform:     ..
 8006350:	202a2a2a 74736554 616f4220 203a6472     *** Test Board: 
 8006360:	00002020 202d2d2d 74736554 73614320       ..--- Test Cas
 8006370:	00002065 00002820 202d2d2d 75736552     e .. (..--- Resu
 8006380:	203a746c 4c494146 20455255 00002328     lt: FAILURE (#..
 8006390:	00005b20 616e6946 6572206c 746c7573      [..Final result
 80063a0:	0000203a 202a2a2a 62696843 2f534f69     : ..*** ChibiOS/
 80063b0:	74205452 20747365 74697573 00000065     RT test suite...
 80063c0:	002a2a2a 00000029 0000295d 202d2d2d     ***.)...])..--- 
 80063d0:	75736552 203a746c 43435553 00535345     Result: SUCCESS.
 80063e0:	4c494146 00455255 2e302e33 00000030     FAILURE.3.0.0...
 80063f0:	20766f4e 32203631 20353130 3331202d     Nov 16 2015 - 13
 8006400:	3a33353a 00003731 20434347 2e322e35     :53:17..GCC 5.2.
 8006410:	00000030 764d5241 454d2d37 00000000     0...ARMv7-ME....
 8006420:	74726f43 4d2d7865 00004634 61766441     Cortex-M4F..Adva
 8006430:	6465636e 72656b20 206c656e 65646f6d     nced kernel mode
 8006440:	00000000 334d5453 30344632 20437831     ....STM32F401xC 
 8006450:	68676948 72655020 6d726f66 65636e61     High Performance
 8006460:	74697720 53442068 6e612050 50462064      with DSP and FP
 8006470:	00000055 694d5453 656f7263 7463656c     U...STMicroelect
 8006480:	696e6f72 53207363 32334d54 31303446     ronics STM32F401
 8006490:	69442d43 766f6373 00797265 00000000     C-Discovery.....

080064a0 <testthd1>:
 80064a0:	08006560 00000000 00000000 08002d11     `e...........-..

080064b0 <testthd2>:
 80064b0:	08006544 00000000 00000000 08002df1     De...........-..

080064c0 <testthd3>:
 80064c0:	08006528 00000000 00000000 08002ed1     (e..............

080064d0 <testthd4>:
 80064d0:	08006518 00000000 00000000 08003001     .e...........0..

080064e0 <patternthd>:
 80064e0:	080064a0 080064b0 080064c0 080064d0     .d...d...d...d..
	...
 8006500:	00000044 00000043 00000042 00000041     D...C...B...A...
 8006510:	44434241 00000045 65726854 2c736461     ABCDE...Threads,
 8006520:	6c656420 00737961 65726854 2c736461      delays.Threads,
 8006530:	69727020 7469726f 68632079 65676e61      priority change
 8006540:	00000000 65726854 2c736461 716e6520     ....Threads, enq
 8006550:	69756575 7420676e 20747365 00003223     ueuing test #2..
 8006560:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 8006570:	7420676e 20747365 00003123 00000000     ng test #1......

08006580 <testsem1>:
 8006580:	08006638 08003261 00000000 080030a1     8f..a2.......0..

08006590 <testsem2>:
 8006590:	08006624 08003251 00000000 080032a1     $f..Q2.......2..

080065a0 <testsem3>:
 80065a0:	08006604 08003241 00000000 08003401     .f..A2.......4..

080065b0 <testsem4>:
 80065b0:	080065e0 00000000 00000000 080034d1     .e...........4..

080065c0 <patternsem>:
 80065c0:	08006580 08006590 080065a0 080065b0     .e...e...e...e..
	...
 80065e0:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 80065f0:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 8006600:	00000000 616d6553 726f6870 202c7365     ....Semaphores, 
 8006610:	6d6f7461 73206369 616e6769 61772d6c     atomic signal-wa
 8006620:	00007469 616d6553 726f6870 202c7365     it..Semaphores, 
 8006630:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 8006640:	202c7365 75716e65 6e697565 00000067     es, enqueuing...

08006650 <testmtx5>:
 8006650:	080066d8 08003761 00000000 08003a31     .f..a7......1:..

08006660 <testmtx6>:
 8006660:	080066c0 08003c31 00000000 08003af1     .f..1<.......:..

08006670 <testmtx7>:
 8006670:	080066a8 08003c11 00000000 08003c71     .f...<......q<..

08006680 <testmtx8>:
 8006680:	08006694 08003c41 00000000 08003d31     .f..A<......1=..
 8006690:	00434241 646e6f43 2c726156 6f6f6220     ABC.CondVar, boo
 80066a0:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 80066b0:	6f726220 61636461 74207473 00747365      broadcast test.
 80066c0:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 80066d0:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 80066e0:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 80066f0:	69727020 7469726f 65722079 6e727574      priority return
 8006700:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 8006710:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 8006720:	74736574 00000000 00000000 00000000     test............

08006730 <patternmtx>:
 8006730:	08006750 08006760 08006650 08006660     Pg..`g..Pf..`f..
 8006740:	08006670 08006680 00000000 00000000     pf...f..........

08006750 <testmtx1>:
 8006750:	08006704 08003771 00000000 08003621     .g..q7......!6..

08006760 <testmtx4>:
 8006760:	080066e8 08003741 00000000 080037c1     .f..A7.......7..

08006770 <testmsg1>:
 8006770:	08006780 00000000 00000000 08003e11     .g...........>..
 8006780:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..

08006790 <patternmsg>:
 8006790:	08006770 00000000 00000000 00000000     pg..............

080067a0 <patternmbox>:
 80067a0:	080067d0 00000000 00000000 00000000     .g..............
 80067b0:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 80067c0:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.

080067d0 <testmbox1>:
 80067d0:	080067b0 08004491 00000000 08003eb1     .g...D.......>..

080067e0 <patternevt>:
 80067e0:	08006860 080067f0 08006880 00000000     `h...g...h......

080067f0 <testevt2>:
 80067f0:	08006814 08004581 00000000 080045a1     .h...E.......E..
 8006800:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 8006810:	00000000 6e657645 202c7374 74696177     ....Events, wait
 8006820:	646e6120 6f726220 61636461 00007473      and broadcast..
 8006830:	6e657645 202c7374 69676572 61727473     Events, registra
 8006840:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 8006850:	00000068 00000000 00000000 00000000     h...............

08006860 <testevt1>:
 8006860:	08006830 08004591 00000000 080044e1     0h...E.......D..

08006870 <evhndl>:
 8006870:	080044d1 080044c1 080044b1 00000000     .D...D...D......

08006880 <testevt3>:
 8006880:	08006800 08004571 00000000 08004881     .h..qE.......H..

08006890 <patternheap>:
 8006890:	080068d0 00000000 00000000 00000000     .h..............
 80068a0:	70616548 6c61202c 61636f6c 6e6f6974     Heap, allocation
 80068b0:	646e6120 61726620 6e656d67 69746174      and fragmentati
 80068c0:	74206e6f 00747365 00000000 00000000     on test.........

080068d0 <testheap1>:
 80068d0:	080068a0 08004b71 00000000 08004921     .h..qK......!I..
 80068e0:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 80068f0:	2f657565 75716564 00657565 00000000     eue/dequeue.....

08006900 <patternpools>:
 8006900:	08006910 00000000 00000000 00000000     .i..............

08006910 <testpools1>:
 8006910:	080068e0 08004ba1 00000000 08004bb1     .h...K.......K..

08006920 <testdyn1>:
 8006920:	080069b4 08004da1 00000000 08004c71     .i...M......qL..

08006930 <testdyn2>:
 8006930:	08006984 08004eb1 00000000 08004db1     .i...N.......M..

08006940 <testdyn3>:
 8006940:	0800695c 08004d81 00000000 08004ef1     \i...M.......N..
 8006950:	00004241 44434241 00000000 616e7944     AB..ABCD....Dyna
 8006960:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 8006970:	61207972 7220646e 72656665 65636e65     ry and reference
 8006980:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 8006990:	6874202c 64616572 72632073 69746165     , threads creati
 80069a0:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 80069b0:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 80069c0:	6874202c 64616572 72632073 69746165     , threads creati
 80069d0:	66206e6f 206d6f72 70616568 00000000     on from heap....

080069e0 <patterndyn>:
 80069e0:	08006920 08006930 08006940 00000000      i..0i..@i......

080069f0 <patternqueues>:
 80069f0:	08006a40 08006a00 00000000 00000000     @j...j..........

08006a00 <testqueues2>:
 8006a00:	08006a10 08005091 00000000 08005331     .j...P......1S..
 8006a10:	75657551 202c7365 7074756f 71207475     Queues, output q
 8006a20:	65756575 00000073 75657551 202c7365     ueues...Queues, 
 8006a30:	75706e69 75712074 73657565 00000000     input queues....

08006a40 <testqueues1>:
 8006a40:	08006a28 08005051 00000000 080050c1     (j..QP.......P..

08006a50 <testsys1>:
 8006a50:	08006ab0 00000000 00000000 08005641     .j..........AV..

08006a60 <testsys2>:
 8006a60:	08006a94 00000000 00000000 08005571     .j..........qU..

08006a70 <testsys3>:
 8006a70:	08006a80 00000000 00000000 080055b1     .j...........U..
 8006a80:	74737953 202c6d65 65746e69 74697267     System, integrit
 8006a90:	00000079 74737953 202c6d65 65746e69     y...System, inte
 8006aa0:	70757272 68207374 6c646e61 00676e69     rrupts handling.
 8006ab0:	74737953 202c6d65 74697263 6c616369     System, critical
 8006ac0:	6e6f7a20 00007365 00000000 00000000      zones..........

08006ad0 <patternsys>:
 8006ad0:	08006a50 08006a60 08006a70 00000000     Pj..`j..pj......

08006ae0 <testbmk8>:
 8006ae0:	08006d10 00000000 00000000 08005d61     .m..........a]..

08006af0 <testbmk1>:
 8006af0:	08006df0 00000000 00000000 080058c1     .m...........X..

08006b00 <testbmk2>:
 8006b00:	08006dd8 00000000 00000000 08005931     .m..........1Y..

08006b10 <testbmk3>:
 8006b10:	08006dc0 00000000 00000000 080059a1     .m...........Y..

08006b20 <testbmk4>:
 8006b20:	08006da4 00000000 00000000 08005a91     .m...........Z..

08006b30 <testbmk13>:
 8006b30:	08006c68 00000000 00000000 08005701     hl...........W..
 8006b40:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 8006b50:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 8006b60:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 8006b70:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 8006b80:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 8006b90:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 8006ba0:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 8006bb0:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 8006bc0:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 8006bd0:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 8006be0:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 8006bf0:	203a2065 00000000 72687420 73646165     e : .... threads
 8006c00:	0000532f 67736d20 2c532f73 00000020     /S.. msgs/S, ...
 8006c10:	78746320 2f637773 00000053 73657220      ctxswc/S... res
 8006c20:	64656863 73656c75 202c532f 00000000     chedules/S, ....
 8006c30:	74796220 532f7365 00000000 6d697420      bytes/S.... tim
 8006c40:	2f737265 00000053 69617720 69732b74     ers/S... wait+si
 8006c50:	6c616e67 0000532f 636f6c20 6e752b6b     gnal/S.. lock+un
 8006c60:	6b636f6c 0000532f 636e6542 72616d68     lock/S..Benchmar
 8006c70:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 8006c80:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 8006c90:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 8006ca0:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 8006cb0:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 8006cc0:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 8006cd0:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 8006ce0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 8006cf0:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 8006d00:	68742073 67756f72 74757068 00000000     s throughput....
 8006d10:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 8006d20:	626f7220 63206e69 65746e6f 73207478      robin context s
 8006d30:	63746977 676e6968 00000000 636e6542     witching....Benc
 8006d40:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 8006d50:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 8006d60:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 8006d70:	61657268 202c7364 61657263 6f206574     hreads, create o
 8006d80:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 8006d90:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 8006da0:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 8006db0:	65746e6f 73207478 63746977 00000068     ontext switch...
 8006dc0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8006dd0:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 8006de0:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 8006df0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8006e00:	20736567 00003123 00000000 00000000     ges #1..........

08006e10 <testbmk9>:
 8006e10:	08006cec 00000000 00000000 08005e71     .l..........q^..

08006e20 <testbmk10>:
 8006e20:	08006cc8 00000000 00000000 08005f21     .l..........!_..

08006e30 <testbmk11>:
 8006e30:	08006ca4 08005d51 00000000 08005fa1     .l..Q]......._..

08006e40 <testbmk12>:
 8006e40:	08006c84 08006081 00000000 08006011     .l...`.......`..

08006e50 <patternbmk>:
 8006e50:	08006af0 08006b00 08006b10 08006b20     .j...k...k.. k..
 8006e60:	08006e90 08006ea0 08006eb0 08006ae0     .n...n...n...j..
 8006e70:	08006e10 08006e20 08006e30 08006e40     .n.. n..0n..@n..
 8006e80:	08006b30 00000000 00000000 00000000     0k..............

08006e90 <testbmk5>:
 8006e90:	08006d84 00000000 00000000 08005b81     .m...........[..

08006ea0 <testbmk6>:
 8006ea0:	08006d64 00000000 00000000 08005811     dm...........X..

08006eb0 <testbmk7>:
 8006eb0:	08006d3c 08005d41 00000000 08005c01     <m..A].......\..
 8006ec0:	6e696c62 0072656b                       blinker.
