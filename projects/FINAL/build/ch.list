
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	482e      	ldr	r0, [pc, #184]	; (800027c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f240 0000 	movw	r0, #0
 80001de:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001e2:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001ea:	6008      	str	r0, [r1, #0]
 80001ec:	f04f 0000 	mov.w	r0, #0
 80001f0:	eee1 0a10 	vmsr	fpscr, r0
 80001f4:	f64e 713c 	movw	r1, #61244	; 0xef3c
 80001f8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001fc:	6008      	str	r0, [r1, #0]
 80001fe:	2006      	movs	r0, #6
 8000200:	f380 8814 	msr	CONTROL, r0
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	f002 fa4a 	bl	80026a0 <__early_init>
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <endfiniloop+0xa>)
 800020e:	491d      	ldr	r1, [pc, #116]	; (8000284 <endfiniloop+0xe>)
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <endfiniloop+0x12>)

08000212 <msloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <msloop>
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <endfiniloop+0x16>)
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <endfiniloop+0x6>)

08000220 <psloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <psloop>
 800022a:	4919      	ldr	r1, [pc, #100]	; (8000290 <endfiniloop+0x1a>)
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <endfiniloop+0x1e>)
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <endfiniloop+0x22>)

08000230 <dloop>:
 8000230:	429a      	cmp	r2, r3
 8000232:	bf3e      	ittt	cc
 8000234:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000238:	f842 0b04 	strcc.w	r0, [r2], #4
 800023c:	e7f8      	bcc.n	8000230 <dloop>
 800023e:	2000      	movs	r0, #0
 8000240:	4916      	ldr	r1, [pc, #88]	; (800029c <endfiniloop+0x26>)
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <endfiniloop+0x2a>)

08000244 <bloop>:
 8000244:	4291      	cmp	r1, r2
 8000246:	bf3c      	itt	cc
 8000248:	f841 0b04 	strcc.w	r0, [r1], #4
 800024c:	e7fa      	bcc.n	8000244 <bloop>
 800024e:	f000 fcf7 	bl	8000c40 <__late_init>
 8000252:	4c14      	ldr	r4, [pc, #80]	; (80002a4 <endfiniloop+0x2e>)
 8000254:	4d14      	ldr	r5, [pc, #80]	; (80002a8 <endfiniloop+0x32>)

08000256 <initloop>:
 8000256:	42ac      	cmp	r4, r5
 8000258:	da03      	bge.n	8000262 <endinitloop>
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
 800025e:	4788      	blx	r1
 8000260:	e7f9      	b.n	8000256 <initloop>

08000262 <endinitloop>:
 8000262:	f002 fd75 	bl	8002d50 <main>
 8000266:	4c11      	ldr	r4, [pc, #68]	; (80002ac <endfiniloop+0x36>)
 8000268:	4d11      	ldr	r5, [pc, #68]	; (80002b0 <endfiniloop+0x3a>)

0800026a <finiloop>:
 800026a:	42ac      	cmp	r4, r5
 800026c:	da03      	bge.n	8000276 <endfiniloop>
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000272:	4788      	blx	r1
 8000274:	e7f9      	b.n	800026a <finiloop>

08000276 <endfiniloop>:
 8000276:	f000 bceb 	b.w	8000c50 <__default_exit>
 800027a:	0000      	.short	0x0000
 800027c:	20000800 	.word	0x20000800
 8000280:	55555555 	.word	0x55555555
 8000284:	20000000 	.word	0x20000000
 8000288:	20000400 	.word	0x20000400
 800028c:	20000400 	.word	0x20000400
 8000290:	08004698 	.word	0x08004698
 8000294:	20000800 	.word	0x20000800
 8000298:	20000c34 	.word	0x20000c34
 800029c:	20000c38 	.word	0x20000c38
 80002a0:	20001960 	.word	0x20001960
 80002a4:	080001c0 	.word	0x080001c0
 80002a8:	080001c0 	.word	0x080001c0
 80002ac:	080001c0 	.word	0x080001c0
 80002b0:	080001c0 	.word	0x080001c0
	...

080002c0 <_port_switch>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	ed2d 8a10 	vpush	{s16-s31}
 80002c8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002cc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80002d0:	ecbd 8a10 	vpop	{s16-s31}
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d8 <_port_thread_start>:
 80002d8:	2300      	movs	r3, #0
 80002da:	f383 8811 	msr	BASEPRI, r3
 80002de:	4628      	mov	r0, r5
 80002e0:	47a0      	blx	r4
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 ff84 	bl	80011f0 <chThdExit>

080002e8 <_port_switch_from_isr>:
 80002e8:	f000 fef2 	bl	80010d0 <chSchDoReschedule>

080002ec <_port_exit_from_isr>:
 80002ec:	df00      	svc	0
 80002ee:	e7fe      	b.n	80002ee <_port_exit_from_isr+0x2>

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f092 0f00 	teq	r2, #0
 80005da:	bf14      	ite	ne
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e720      	b.n	8000434 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aedc 	beq.w	80003e2 <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6c1      	b.n	80003e2 <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>
	...

08000a90 <__gedf2>:
 8000a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a94:	e006      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__ledf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	e002      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__cmpdf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aba:	d01b      	beq.n	8000af4 <__cmpdf2+0x54>
 8000abc:	b001      	add	sp, #4
 8000abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac2:	bf0c      	ite	eq
 8000ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac8:	ea91 0f03 	teqne	r1, r3
 8000acc:	bf02      	ittt	eq
 8000ace:	ea90 0f02 	teqeq	r0, r2
 8000ad2:	2000      	moveq	r0, #0
 8000ad4:	4770      	bxeq	lr
 8000ad6:	f110 0f00 	cmn.w	r0, #0
 8000ada:	ea91 0f03 	teq	r1, r3
 8000ade:	bf58      	it	pl
 8000ae0:	4299      	cmppl	r1, r3
 8000ae2:	bf08      	it	eq
 8000ae4:	4290      	cmpeq	r0, r2
 8000ae6:	bf2c      	ite	cs
 8000ae8:	17d8      	asrcs	r0, r3, #31
 8000aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aee:	f040 0001 	orr.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__cmpdf2+0x64>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d107      	bne.n	8000b14 <__cmpdf2+0x74>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d1d6      	bne.n	8000abc <__cmpdf2+0x1c>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d0d3      	beq.n	8000abc <__cmpdf2+0x1c>
 8000b14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdrcmple>:
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4662      	mov	r2, ip
 8000b22:	468c      	mov	ip, r1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4663      	mov	r3, ip
 8000b28:	e000      	b.n	8000b2c <__aeabi_cdcmpeq>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdcmpeq>:
 8000b2c:	b501      	push	{r0, lr}
 8000b2e:	f7ff ffb7 	bl	8000aa0 <__cmpdf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf48      	it	mi
 8000b36:	f110 0f00 	cmnmi.w	r0, #0
 8000b3a:	bd01      	pop	{r0, pc}

08000b3c <__aeabi_dcmpeq>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff fff4 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b44:	bf0c      	ite	eq
 8000b46:	2001      	moveq	r0, #1
 8000b48:	2000      	movne	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmplt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffea 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmple>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffe0 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpge>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffce 	bl	8000b1c <__aeabi_cdrcmple>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpgt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffc4 	bl	8000b1c <__aeabi_cdrcmple>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	f3af 8000 	nop.w
 8000c4c:	f3af 8000 	nop.w

08000c50 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000c50:	e7fe      	b.n	8000c50 <__default_exit>
 8000c52:	bf00      	nop
 8000c54:	f3af 8000 	nop.w
 8000c58:	f3af 8000 	nop.w
 8000c5c:	f3af 8000 	nop.w

08000c60 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000c60:	e7fe      	b.n	8000c60 <_unhandled_exception>
 8000c62:	bf00      	nop
 8000c64:	f3af 8000 	nop.w
 8000c68:	f3af 8000 	nop.w
 8000c6c:	f3af 8000 	nop.w

08000c70 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000c70:	e7fe      	b.n	8000c70 <_idle_thread>
 8000c72:	bf00      	nop
 8000c74:	f3af 8000 	nop.w
 8000c78:	f3af 8000 	nop.w
 8000c7c:	f3af 8000 	nop.w

08000c80 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c84:	4821      	ldr	r0, [pc, #132]	; (8000d0c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000c88:	2400      	movs	r4, #0
 8000c8a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c8e:	4e20      	ldr	r6, [pc, #128]	; (8000d10 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000c90:	4d20      	ldr	r5, [pc, #128]	; (8000d14 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000c92:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000c96:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000c98:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	68f2      	ldr	r2, [r6, #12]
 8000c9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ca2:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ca4:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	2610      	movs	r6, #16
 8000cae:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	77de      	strb	r6, [r3, #31]
 8000cb4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000cb8:	f000 f942 	bl	8000f40 <_scheduler_init>
  _vt_init();
 8000cbc:	f000 f878 	bl	8000db0 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000cc0:	f000 fb06 	bl	80012d0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000cc4:	f000 fc94 	bl	80015f0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000cc8:	f000 fcca 	bl	8001660 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000ccc:	4628      	mov	r0, r5
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	f000 fa06 	bl	80010e0 <_thread_init>
 8000cd4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000cd8:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000cda:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000cdc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000cde:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000ce2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	490c      	ldr	r1, [pc, #48]	; (8000d18 <chSysInit+0x98>)
 8000ce8:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000cea:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000cee:	9400      	str	r4, [sp, #0]
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <chSysInit+0x9c>)
 8000cf2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000cf6:	f000 fa13 	bl	8001120 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <chSysInit+0xa0>)
 8000cfc:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 8000cfe:	b003      	add	sp, #12
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	05fa0300 	.word	0x05fa0300
 8000d0c:	e0001000 	.word	0xe0001000
 8000d10:	e000edf0 	.word	0xe000edf0
 8000d14:	20000c68 	.word	0x20000c68
 8000d18:	080043d0 	.word	0x080043d0
 8000d1c:	08000c71 	.word	0x08000c71
 8000d20:	080043c0 	.word	0x080043c0
 8000d24:	f3af 8000 	nop.w
 8000d28:	f3af 8000 	nop.w
 8000d2c:	f3af 8000 	nop.w

08000d30 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000d34:	4d1b      	ldr	r5, [pc, #108]	; (8000da4 <chSysTimerHandlerI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d36:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000d3a:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000d3c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d40:	68a3      	ldr	r3, [r4, #8]
 8000d42:	1a42      	subs	r2, r0, r1
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f105 091c 	add.w	r9, r5, #28
 8000d4a:	d31a      	bcc.n	8000d82 <chSysTimerHandlerI+0x52>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000d4c:	2600      	movs	r6, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d4e:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d52:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000d54:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000d58:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000d5a:	454a      	cmp	r2, r9
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000d5c:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d5e:	f8c2 9004 	str.w	r9, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000d62:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000d64:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000d66:	d018      	beq.n	8000d9a <chSysTimerHandlerI+0x6a>
 8000d68:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000d6c:	6920      	ldr	r0, [r4, #16]
 8000d6e:	47d0      	blx	sl
 8000d70:	f388 8811 	msr	BASEPRI, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000d74:	69ec      	ldr	r4, [r5, #28]
 8000d76:	6a78      	ldr	r0, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000d78:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000d7a:	68a3      	ldr	r3, [r4, #8]
 8000d7c:	1a42      	subs	r2, r0, r1
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d9e7      	bls.n	8000d52 <chSysTimerHandlerI+0x22>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000d82:	454c      	cmp	r4, r9
 8000d84:	d00c      	beq.n	8000da0 <chSysTimerHandlerI+0x70>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000d86:	440b      	add	r3, r1
 8000d88:	1a1b      	subs	r3, r3, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	bf98      	it	ls
 8000d8e:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000d90:	4418      	add	r0, r3
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 8000d92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d96:	f000 bce3 	b.w	8001760 <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000d9a:	f000 fcd9 	bl	8001750 <stStopAlarm>
 8000d9e:	e7e3      	b.n	8000d68 <chSysTimerHandlerI+0x38>
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	20000c38 	.word	0x20000c38
 8000da8:	f3af 8000 	nop.w
 8000dac:	f3af 8000 	nop.w

08000db0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000db6:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000dba:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000dbc:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000dbe:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000dc0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000dc2:	621a      	str	r2, [r3, #32]
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000c38 	.word	0x20000c38
 8000dcc:	f3af 8000 	nop.w

08000dd0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000dd2:	4e1c      	ldr	r6, [pc, #112]	; (8000e44 <chVTDoSetI+0x74>)
 8000dd4:	4634      	mov	r4, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000dd6:	2901      	cmp	r1, #1
 8000dd8:	bf98      	it	ls
 8000dda:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ddc:	f854 7f1c 	ldr.w	r7, [r4, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000de0:	6103      	str	r3, [r0, #16]
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000de6:	42a7      	cmp	r7, r4
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000de8:	4605      	mov	r5, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000dea:	60c2      	str	r2, [r0, #12]
 8000dec:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000dee:	d01e      	beq.n	8000e2e <chVTDoSetI+0x5e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000df0:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000df2:	68bb      	ldr	r3, [r7, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000df4:	4408      	add	r0, r1
 8000df6:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d315      	bcc.n	8000e28 <chVTDoSetI+0x58>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8000dfc:	69f3      	ldr	r3, [r6, #28]
  while (p->vt_delta < delta) {
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	4294      	cmp	r4, r2
 8000e02:	d904      	bls.n	8000e0e <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000e04:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000e06:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	42a2      	cmp	r2, r4
 8000e0c:	d3fa      	bcc.n	8000e04 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000e12:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000e14:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 8000e16:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 8000e18:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000e1a:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000e20:	1b14      	subs	r4, r2, r4
 8000e22:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e24:	6271      	str	r1, [r6, #36]	; 0x24
 8000e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000e28:	f000 fc9a 	bl	8001760 <stSetAlarm>
 8000e2c:	e7e6      	b.n	8000dfc <chVTDoSetI+0x2c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000e2e:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 8000e30:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8000e32:	6235      	str	r5, [r6, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 8000e34:	4408      	add	r0, r1
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000e36:	602f      	str	r7, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000e38:	606f      	str	r7, [r5, #4]
      vtp->vt_delta = delay;
 8000e3a:	60a9      	str	r1, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 8000e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000e40:	f000 bc7e 	b.w	8001740 <stStartAlarm>
 8000e44:	20000c38 	.word	0x20000c38
 8000e48:	f3af 8000 	nop.w
 8000e4c:	f3af 8000 	nop.w

08000e50 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <chVTDoResetI+0x70>)
 8000e52:	69da      	ldr	r2, [r3, #28]
 8000e54:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000e56:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000e58:	d010      	beq.n	8000e7c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000e5a:	6841      	ldr	r1, [r0, #4]
 8000e5c:	6802      	ldr	r2, [r0, #0]
 8000e5e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000e60:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000e62:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000e64:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000e66:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000e68:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8000e6a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000e6c:	d003      	beq.n	8000e76 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000e6e:	6883      	ldr	r3, [r0, #8]
 8000e70:	6891      	ldr	r1, [r2, #8]
 8000e72:	440b      	add	r3, r1
 8000e74:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e7a:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	6811      	ldr	r1, [r2, #0]
 8000e80:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000e84:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000e86:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000e88:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 8000e8a:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000e8c:	d013      	beq.n	8000eb6 <chVTDoResetI+0x66>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000e8e:	6892      	ldr	r2, [r2, #8]
 8000e90:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000e92:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000e94:	1883      	adds	r3, r0, r2
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9a:	608b      	str	r3, [r1, #8]
 8000e9c:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000e9e:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d9e8      	bls.n	8000e76 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000ea4:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000ea6:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000ea8:	bf98      	it	ls
 8000eaa:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000eac:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000eb2:	f000 bc55 	b.w	8001760 <stSetAlarm>
 8000eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000eba:	f000 bc49 	b.w	8001750 <stStopAlarm>
 8000ebe:	bf00      	nop
 8000ec0:	20000c38 	.word	0x20000c38
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	f3af 8000 	nop.w

08000ed0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000ed0:	b410      	push	{r4}
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000ed8:	7f03      	ldrb	r3, [r0, #28]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d80e      	bhi.n	8000efc <wakeup+0x2c>
 8000ede:	e8df f003 	tbb	[pc, r3]
 8000ee2:	0d27      	.short	0x0d27
 8000ee4:	0408230d 	.word	0x0408230d
 8000ee8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000eea:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000eec:	6893      	ldr	r3, [r2, #8]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000ef2:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000ef6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000ef8:	6802      	ldr	r2, [r0, #0]
 8000efa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f00:	2200      	movs	r2, #0
 8000f02:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000f06:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f08:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000f0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	428a      	cmp	r2, r1
 8000f10:	d2fb      	bcs.n	8000f0a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000f16:	6003      	str	r3, [r0, #0]
 8000f18:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000f1a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000f1c:	6058      	str	r0, [r3, #4]
 8000f1e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f26:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000f28:	6a03      	ldr	r3, [r0, #32]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    break;
 8000f2e:	e7e5      	b.n	8000efc <wakeup+0x2c>
 8000f30:	2300      	movs	r3, #0
 8000f32:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	20000c38 	.word	0x20000c38

08000f40 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000f42:	2200      	movs	r2, #0
 8000f44:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000f46:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8000f48:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8000f4a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	4770      	bx	lr
 8000f50:	20000c38 	.word	0x20000c38
 8000f54:	f3af 8000 	nop.w
 8000f58:	f3af 8000 	nop.w
 8000f5c:	f3af 8000 	nop.w

08000f60 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f60:	2200      	movs	r2, #0
 8000f62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000f66:	b410      	push	{r4}
 8000f68:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f6a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000f6c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	428a      	cmp	r2, r1
 8000f72:	d2fb      	bcs.n	8000f6c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000f78:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000f7a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000f7c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000f7e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000c38 	.word	0x20000c38
 8000f8c:	f3af 8000 	nop.w

08000f90 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <chSchGoSleepS+0x20>)
 8000f92:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f94:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000f96:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000f98:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 8000f9a:	6810      	ldr	r0, [r2, #0]
 8000f9c:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000f9e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000fa0:	6043      	str	r3, [r0, #4]
 8000fa2:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000fa4:	4610      	mov	r0, r2
}
 8000fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000faa:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000fac:	f7ff b988 	b.w	80002c0 <_port_switch>
 8000fb0:	20000c38 	.word	0x20000c38
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	f3af 8000 	nop.w

08000fc0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000fc0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000fc2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000fc4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000fc6:	d012      	beq.n	8000fee <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000fc8:	4c0c      	ldr	r4, [pc, #48]	; (8000ffc <chSchGoSleepTimeoutS+0x3c>)
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <chSchGoSleepTimeoutS+0x40>)
 8000fcc:	69a3      	ldr	r3, [r4, #24]
 8000fce:	4605      	mov	r5, r0
 8000fd0:	a801      	add	r0, sp, #4
 8000fd2:	f7ff fefd 	bl	8000dd0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f7ff ffda 	bl	8000f90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000fdc:	9b04      	ldr	r3, [sp, #16]
 8000fde:	b113      	cbz	r3, 8000fe6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8000fe0:	a801      	add	r0, sp, #4
 8000fe2:	f7ff ff35 	bl	8000e50 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000fe6:	69a3      	ldr	r3, [r4, #24]
}
 8000fe8:	6a18      	ldr	r0, [r3, #32]
 8000fea:	b007      	add	sp, #28
 8000fec:	bd30      	pop	{r4, r5, pc}
 8000fee:	4c03      	ldr	r4, [pc, #12]	; (8000ffc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000ff0:	f7ff ffce 	bl	8000f90 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8000ff4:	69a3      	ldr	r3, [r4, #24]
}
 8000ff6:	6a18      	ldr	r0, [r3, #32]
 8000ff8:	b007      	add	sp, #28
 8000ffa:	bd30      	pop	{r4, r5, pc}
 8000ffc:	20000c38 	.word	0x20000c38
 8001000:	08000ed1 	.word	0x08000ed1
 8001004:	f3af 8000 	nop.w
 8001008:	f3af 8000 	nop.w
 800100c:	f3af 8000 	nop.w

08001010 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001012:	b470      	push	{r4, r5, r6}
 8001014:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001016:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001018:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800101a:	68a8      	ldr	r0, [r5, #8]
 800101c:	68a1      	ldr	r1, [r4, #8]
 800101e:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001020:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001024:	d80b      	bhi.n	800103e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001026:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001028:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	4291      	cmp	r1, r2
 800102e:	d9fb      	bls.n	8001028 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001034:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001036:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001038:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800103a:	bc70      	pop	{r4, r5, r6}
 800103c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800103e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001040:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8001042:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001044:	6891      	ldr	r1, [r2, #8]
 8001046:	4288      	cmp	r0, r1
 8001048:	d9fb      	bls.n	8001042 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800104a:	6850      	ldr	r0, [r2, #4]
 800104c:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800104e:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001050:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001052:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8001054:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001056:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8001058:	4629      	mov	r1, r5
 800105a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800105c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800105e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001060:	f7ff b92e 	b.w	80002c0 <_port_switch>
 8001064:	20000c38 	.word	0x20000c38
 8001068:	f3af 8000 	nop.w
 800106c:	f3af 8000 	nop.w

08001070 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <chSchIsPreemptionRequired+0x14>)
 8001072:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 8001074:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8001076:	6890      	ldr	r0, [r2, #8]
 8001078:	689b      	ldr	r3, [r3, #8]
#endif
}
 800107a:	4298      	cmp	r0, r3
 800107c:	bf94      	ite	ls
 800107e:	2000      	movls	r0, #0
 8001080:	2001      	movhi	r0, #1
 8001082:	4770      	bx	lr
 8001084:	20000c38 	.word	0x20000c38
 8001088:	f3af 8000 	nop.w
 800108c:	f3af 8000 	nop.w

08001090 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001092:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8001094:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001096:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001098:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800109a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800109c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800109e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80010a0:	7701      	strb	r1, [r0, #28]
 80010a2:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80010a4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80010a6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80010a8:	7725      	strb	r5, [r4, #28]
 80010aa:	e000      	b.n	80010ae <chSchDoRescheduleAhead+0x1e>
 80010ac:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d8fb      	bhi.n	80010ac <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80010b8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80010ba:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80010bc:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80010be:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80010c0:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80010c2:	f7ff b8fd 	b.w	80002c0 <_port_switch>
 80010c6:	bf00      	nop
 80010c8:	20000c38 	.word	0x20000c38
 80010cc:	f3af 8000 	nop.w

080010d0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80010d0:	f7ff bfde 	b.w	8001090 <chSchDoRescheduleAhead>
 80010d4:	f3af 8000 	nop.w
 80010d8:	f3af 8000 	nop.w
 80010dc:	f3af 8000 	nop.w

080010e0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010e2:	4c0d      	ldr	r4, [pc, #52]	; (8001118 <_thread_init+0x38>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80010e4:	63c1      	str	r1, [r0, #60]	; 0x3c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010e6:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80010e8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80010ea:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80010ec:	f100 0128 	add.w	r1, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80010f0:	f04f 0e02 	mov.w	lr, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80010f4:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80010f6:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010fa:	6145      	str	r5, [r0, #20]
 80010fc:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80010fe:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001102:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001104:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001106:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001108:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800110a:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800110c:	6128      	str	r0, [r5, #16]
 800110e:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001110:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001112:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001114:	62c1      	str	r1, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001118:	20000c38 	.word	0x20000c38
 800111c:	f3af 8000 	nop.w

08001120 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001122:	4604      	mov	r4, r0
 8001124:	2620      	movs	r6, #32
 8001126:	f386 8811 	msr	BASEPRI, r6

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800112a:	3964      	subs	r1, #100	; 0x64
 800112c:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800112e:	4e13      	ldr	r6, [pc, #76]	; (800117c <chThdCreateStatic+0x5c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001130:	4d13      	ldr	r5, [pc, #76]	; (8001180 <chThdCreateStatic+0x60>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001132:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001134:	60c1      	str	r1, [r0, #12]
 8001136:	640b      	str	r3, [r1, #64]	; 0x40
 8001138:	9b06      	ldr	r3, [sp, #24]
 800113a:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800113c:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800113e:	660d      	str	r5, [r1, #96]	; 0x60
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001140:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001144:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001146:	7703      	strb	r3, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001148:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800114a:	f100 0328 	add.w	r3, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800114e:	6082      	str	r2, [r0, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001150:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001152:	6106      	str	r6, [r0, #16]
 8001154:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001156:	63c2      	str	r2, [r0, #60]	; 0x3c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001158:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800115a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800115c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800115e:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001160:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001162:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001164:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001168:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800116a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800116c:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800116e:	f7ff ff4f 	bl	8001010 <chSchWakeupS>
 8001172:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8001176:	4620      	mov	r0, r4
 8001178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117a:	bf00      	nop
 800117c:	20000c38 	.word	0x20000c38
 8001180:	080002d9 	.word	0x080002d9
 8001184:	f3af 8000 	nop.w
 8001188:	f3af 8000 	nop.w
 800118c:	f3af 8000 	nop.w

08001190 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001190:	b508      	push	{r3, lr}
 8001192:	4601      	mov	r1, r0
 8001194:	2320      	movs	r3, #32
 8001196:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800119a:	2008      	movs	r0, #8
 800119c:	f7ff ff10 	bl	8000fc0 <chSchGoSleepTimeoutS>
 80011a0:	2300      	movs	r3, #0
 80011a2:	f383 8811 	msr	BASEPRI, r3
 80011a6:	bd08      	pop	{r3, pc}
 80011a8:	f3af 8000 	nop.w
 80011ac:	f3af 8000 	nop.w

080011b0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80011b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <chThdExitS+0x3c>)
 80011b4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80011b6:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 80011b8:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80011ba:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80011be:	429d      	cmp	r5, r3
 80011c0:	d007      	beq.n	80011d2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff feca 	bl	8000f60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80011ce:	42ab      	cmp	r3, r5
 80011d0:	d1f7      	bne.n	80011c2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80011d2:	7f63      	ldrb	r3, [r4, #29]
 80011d4:	079b      	lsls	r3, r3, #30
 80011d6:	d104      	bne.n	80011e2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80011d8:	6963      	ldr	r3, [r4, #20]
 80011da:	6922      	ldr	r2, [r4, #16]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	6922      	ldr	r2, [r4, #16]
 80011e0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80011e2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80011e8:	f7ff bed2 	b.w	8000f90 <chSchGoSleepS>
 80011ec:	20000c38 	.word	0x20000c38

080011f0 <chThdExit>:
 80011f0:	2320      	movs	r3, #32
 80011f2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80011f6:	f7ff bfdb 	b.w	80011b0 <chThdExitS>
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w

08001200 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001200:	6803      	ldr	r3, [r0, #0]
 8001202:	b12b      	cbz	r3, 8001210 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001204:	2200      	movs	r2, #0
 8001206:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001208:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800120a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800120c:	f7ff bea8 	b.w	8000f60 <chSchReadyI>
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	f3af 8000 	nop.w
 800121c:	f3af 8000 	nop.w

08001220 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001220:	b169      	cbz	r1, 800123e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001224:	b410      	push	{r4}
 8001226:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001228:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800122a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800122c:	2004      	movs	r0, #4
 800122e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001232:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001234:	6053      	str	r3, [r2, #4]
}
 8001236:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800123a:	f7ff bec1 	b.w	8000fc0 <chSchGoSleepTimeoutS>
}
 800123e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001242:	4770      	bx	lr
 8001244:	20000c38 	.word	0x20000c38
 8001248:	f3af 8000 	nop.w
 800124c:	f3af 8000 	nop.w

08001250 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001250:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001252:	4290      	cmp	r0, r2
 8001254:	d00a      	beq.n	800126c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001256:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001258:	6814      	ldr	r4, [r2, #0]
 800125a:	6004      	str	r4, [r0, #0]
 800125c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800125e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001260:	6211      	str	r1, [r2, #32]
  (void) chSchReadyI(tp);
 8001262:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001268:	f7ff be7a 	b.w	8000f60 <chSchReadyI>
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <chTMStartMeasurementX+0x8>)
 8001272:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001274:	6083      	str	r3, [r0, #8]
 8001276:	4770      	bx	lr
 8001278:	e0001000 	.word	0xe0001000
 800127c:	f3af 8000 	nop.w

08001280 <chTMStopMeasurementX>:
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001282:	4910      	ldr	r1, [pc, #64]	; (80012c4 <chTMStopMeasurementX+0x44>)
 8001284:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001286:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001288:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800128a:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800128c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800128e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001290:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001298:	18e4      	adds	r4, r4, r3
 800129a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800129e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 80012a0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80012a2:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80012a4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80012a6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 80012aa:	d805      	bhi.n	80012b8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 80012ac:	6802      	ldr	r2, [r0, #0]
 80012ae:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 80012b0:	bf38      	it	cc
 80012b2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80012b4:	bcf0      	pop	{r4, r5, r6, r7}
 80012b6:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80012b8:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e0001000 	.word	0xe0001000
 80012c4:	20000c38 	.word	0x20000c38
 80012c8:	f3af 8000 	nop.w
 80012cc:	f3af 8000 	nop.w

080012d0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80012d0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012d2:	4c0c      	ldr	r4, [pc, #48]	; (8001304 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80012d4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012d6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80012dc:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80012de:	2600      	movs	r6, #0
 80012e0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012e2:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80012e4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 80012e6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 80012e8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80012ea:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80012ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80012f0:	f7ff ffbe 	bl	8001270 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80012f4:	4668      	mov	r0, sp
 80012f6:	f7ff ffc3 	bl	8001280 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80012fe:	b006      	add	sp, #24
 8001300:	bdd0      	pop	{r4, r6, r7, pc}
 8001302:	bf00      	nop
 8001304:	20000c38 	.word	0x20000c38
 8001308:	f3af 8000 	nop.w
 800130c:	f3af 8000 	nop.w

08001310 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001310:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001312:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001314:	6040      	str	r0, [r0, #4]
 8001316:	6083      	str	r3, [r0, #8]
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w

08001320 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001320:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001322:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001324:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001326:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001328:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800132a:	d009      	beq.n	8001340 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800132c:	2a0b      	cmp	r2, #11
 800132e:	d000      	beq.n	8001332 <chEvtSignalI+0x12>
 8001330:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001332:	6a03      	ldr	r3, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001334:	438b      	bics	r3, r1
 8001336:	d1fb      	bne.n	8001330 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 800133c:	f7ff be10 	b.w	8000f60 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001340:	6a03      	ldr	r3, [r0, #32]
 8001342:	4219      	tst	r1, r3
 8001344:	d1f8      	bne.n	8001338 <chEvtSignalI+0x18>
 8001346:	4770      	bx	lr
 8001348:	f3af 8000 	nop.w
 800134c:	f3af 8000 	nop.w

08001350 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001350:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001352:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001354:	42a0      	cmp	r0, r4
 8001356:	d00f      	beq.n	8001378 <chEvtBroadcastFlagsI+0x28>
 8001358:	4606      	mov	r6, r0
 800135a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800135c:	68e3      	ldr	r3, [r4, #12]
 800135e:	432b      	orrs	r3, r5
 8001360:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001362:	b115      	cbz	r5, 800136a <chEvtBroadcastFlagsI+0x1a>
 8001364:	6922      	ldr	r2, [r4, #16]
 8001366:	4213      	tst	r3, r2
 8001368:	d003      	beq.n	8001372 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800136a:	68a1      	ldr	r1, [r4, #8]
 800136c:	6860      	ldr	r0, [r4, #4]
 800136e:	f7ff ffd7 	bl	8001320 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001372:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001374:	42a6      	cmp	r6, r4
 8001376:	d1f1      	bne.n	800135c <chEvtBroadcastFlagsI+0xc>
 8001378:	bd70      	pop	{r4, r5, r6, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w

08001380 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 8001380:	b430      	push	{r4, r5}
 8001382:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8001384:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001386:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001388:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800138a:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800138c:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800138e:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001390:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001392:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8001394:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8001396:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001398:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800139a:	bc30      	pop	{r4, r5}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80013a0:	6983      	ldr	r3, [r0, #24]
 80013a2:	6942      	ldr	r2, [r0, #20]
 80013a4:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6883      	ldr	r3, [r0, #8]
 80013aa:	d00f      	beq.n	80013cc <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80013ac:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 80013ae:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80013b0:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 80013b2:	6144      	str	r4, [r0, #20]
 80013b4:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 80013b6:	6942      	ldr	r2, [r0, #20]
 80013b8:	6903      	ldr	r3, [r0, #16]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d301      	bcc.n	80013c2 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 80013be:	68c3      	ldr	r3, [r0, #12]
 80013c0:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 80013c2:	2100      	movs	r1, #0
 80013c4:	f7ff ff44 	bl	8001250 <chThdDequeueNextI>

  return Q_OK;
 80013c8:	2000      	movs	r0, #0
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ed      	beq.n	80013ac <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 80013d0:	f06f 0003 	mvn.w	r0, #3
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	f3af 8000 	nop.w
 80013dc:	f3af 8000 	nop.w

080013e0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	2320      	movs	r3, #32
 80013e4:	460e      	mov	r6, r1
 80013e6:	4604      	mov	r4, r0
 80013e8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80013ec:	69c3      	ldr	r3, [r0, #28]
 80013ee:	b12b      	cbz	r3, 80013fc <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 80013f0:	4798      	blx	r3
 80013f2:	e003      	b.n	80013fc <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80013f4:	f7ff ff14 	bl	8001220 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80013f8:	2800      	cmp	r0, #0
 80013fa:	db15      	blt.n	8001428 <chIQGetTimeout+0x48>
 80013fc:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80013fe:	4631      	mov	r1, r6
 8001400:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001402:	2d00      	cmp	r5, #0
 8001404:	d0f6      	beq.n	80013f4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001406:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001408:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800140a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800140c:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800140e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
 8001412:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001414:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001416:	bf28      	it	cs
 8001418:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800141a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800141c:	bf28      	it	cs
 800141e:	61a3      	strcs	r3, [r4, #24]
 8001420:	2300      	movs	r3, #0
 8001422:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	bf00      	nop

08001430 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	4604      	mov	r4, r0
 8001436:	b083      	sub	sp, #12
 8001438:	4689      	mov	r9, r1
 800143a:	4693      	mov	fp, r2
 800143c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800143e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001442:	2720      	movs	r7, #32
 8001444:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001448:	2600      	movs	r6, #0
 800144a:	9701      	str	r7, [sp, #4]
 800144c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800144e:	f1b8 0f00 	cmp.w	r8, #0
 8001452:	d005      	beq.n	8001460 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001454:	4620      	mov	r0, r4
 8001456:	47c0      	blx	r8
 8001458:	e002      	b.n	8001460 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800145a:	f7ff fee1 	bl	8001220 <chThdEnqueueTimeoutS>
 800145e:	b9d8      	cbnz	r0, 8001498 <chIQReadTimeout+0x68>
 8001460:	68a7      	ldr	r7, [r4, #8]
 8001462:	4629      	mov	r1, r5
 8001464:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001466:	2f00      	cmp	r7, #0
 8001468:	d0f7      	beq.n	800145a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800146a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800146c:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 800146e:	1c51      	adds	r1, r2, #1
 8001470:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001472:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001474:	7813      	ldrb	r3, [r2, #0]
 8001476:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800147a:	6923      	ldr	r3, [r4, #16]
 800147c:	69a2      	ldr	r2, [r4, #24]
 800147e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001480:	bf24      	itt	cs
 8001482:	68e3      	ldrcs	r3, [r4, #12]
 8001484:	61a3      	strcs	r3, [r4, #24]
 8001486:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800148a:	3601      	adds	r6, #1
    if (--n == 0U) {
 800148c:	45b3      	cmp	fp, r6
 800148e:	d005      	beq.n	800149c <chIQReadTimeout+0x6c>
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	f383 8811 	msr	BASEPRI, r3
 8001496:	e7da      	b.n	800144e <chIQReadTimeout+0x1e>
 8001498:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800149c:	4630      	mov	r0, r6
 800149e:	b003      	add	sp, #12
 80014a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014a4:	f3af 8000 	nop.w
 80014a8:	f3af 8000 	nop.w
 80014ac:	f3af 8000 	nop.w

080014b0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 80014b0:	b430      	push	{r4, r5}
 80014b2:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80014b4:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80014b6:	188d      	adds	r5, r1, r2
 80014b8:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80014ba:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80014bc:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80014be:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 80014c0:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 80014c2:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 80014c4:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80014c6:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 80014c8:	bc30      	pop	{r4, r5}
 80014ca:	4770      	bx	lr
 80014cc:	f3af 8000 	nop.w

080014d0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	4604      	mov	r4, r0
 80014d4:	460f      	mov	r7, r1
 80014d6:	4616      	mov	r6, r2
 80014d8:	2320      	movs	r3, #32
 80014da:	f383 8811 	msr	BASEPRI, r3
 80014de:	e003      	b.n	80014e8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80014e0:	f7ff fe9e 	bl	8001220 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80014e4:	2800      	cmp	r0, #0
 80014e6:	db18      	blt.n	800151a <chOQPutTimeout+0x4a>
 80014e8:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80014ea:	4631      	mov	r1, r6
 80014ec:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d0f6      	beq.n	80014e0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80014f2:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80014f4:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80014fa:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 80014fc:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80014fe:	6923      	ldr	r3, [r4, #16]
 8001500:	6962      	ldr	r2, [r4, #20]
 8001502:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001504:	bf24      	itt	cs
 8001506:	68e3      	ldrcs	r3, [r4, #12]
 8001508:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800150a:	69e3      	ldr	r3, [r4, #28]
 800150c:	b10b      	cbz	r3, 8001512 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800150e:	4620      	mov	r0, r4
 8001510:	4798      	blx	r3
 8001512:	2000      	movs	r0, #0
 8001514:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800151a:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001520 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8001520:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001522:	6982      	ldr	r2, [r0, #24]
 8001524:	6943      	ldr	r3, [r0, #20]
 8001526:	4293      	cmp	r3, r2
 8001528:	6883      	ldr	r3, [r0, #8]
 800152a:	d00e      	beq.n	800154a <chOQGetI+0x2a>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800152c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800152e:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001530:	3301      	adds	r3, #1
 8001532:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 8001534:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001536:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001538:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800153a:	d301      	bcc.n	8001540 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 800153c:	68c3      	ldr	r3, [r0, #12]
 800153e:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8001540:	2100      	movs	r1, #0
 8001542:	f7ff fe85 	bl	8001250 <chThdDequeueNextI>

  return (msg_t)b;
 8001546:	4620      	mov	r0, r4
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ee      	beq.n	800152c <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 800154e:	f06f 0002 	mvn.w	r0, #2
 8001552:	bd38      	pop	{r3, r4, r5, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	f3af 8000 	nop.w
 800155c:	f3af 8000 	nop.w

08001560 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001564:	b083      	sub	sp, #12
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	4616      	mov	r6, r2
 800156c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800156e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001572:	f04f 0920 	mov.w	r9, #32
 8001576:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800157a:	2700      	movs	r7, #0
 800157c:	46ba      	mov	sl, r7
 800157e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001580:	f105 0b01 	add.w	fp, r5, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001584:	1e59      	subs	r1, r3, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001586:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001588:	b1fb      	cbz	r3, 80015ca <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800158a:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800158c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	6161      	str	r1, [r4, #20]
 8001592:	7829      	ldrb	r1, [r5, #0]
 8001594:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	6961      	ldr	r1, [r4, #20]
 800159a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800159c:	bf24      	itt	cs
 800159e:	68e3      	ldrcs	r3, [r4, #12]
 80015a0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 80015a2:	f1b8 0f00 	cmp.w	r8, #0
 80015a6:	d000      	beq.n	80015aa <chOQWriteTimeout+0x4a>
      nfy(oqp);
 80015a8:	47c0      	blx	r8
 80015aa:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80015ae:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80015b0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80015b4:	d013      	beq.n	80015de <chOQWriteTimeout+0x7e>
 80015b6:	f389 8811 	msr	BASEPRI, r9
 80015ba:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80015bc:	465d      	mov	r5, fp
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80015be:	1e59      	subs	r1, r3, #1
    *oqp->q_wrptr++ = *bp++;
 80015c0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80015c4:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1df      	bne.n	800158a <chOQWriteTimeout+0x2a>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80015ca:	9901      	ldr	r1, [sp, #4]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fe26 	bl	8001220 <chThdEnqueueTimeoutS>
 80015d4:	9b00      	ldr	r3, [sp, #0]
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d0d1      	beq.n	800157e <chOQWriteTimeout+0x1e>
 80015da:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80015de:	4638      	mov	r0, r7
 80015e0:	b003      	add	sp, #12
 80015e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e6:	bf00      	nop
 80015e8:	f3af 8000 	nop.w
 80015ec:	f3af 8000 	nop.w

080015f0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80015f6:	4907      	ldr	r1, [pc, #28]	; (8001614 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80015f8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80015fc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001600:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20001967 	.word	0x20001967
 800160c:	20010000 	.word	0x20010000
 8001610:	20000e14 	.word	0x20000e14
 8001614:	20000e10 	.word	0x20000e10
 8001618:	f3af 8000 	nop.w
 800161c:	f3af 8000 	nop.w

08001620 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001620:	b410      	push	{r4}
 8001622:	2320      	movs	r3, #32
 8001624:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001628:	4c09      	ldr	r4, [pc, #36]	; (8001650 <chCoreAlloc+0x30>)
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <chCoreAlloc+0x34>)
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001630:	1dc3      	adds	r3, r0, #7
 8001632:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001636:	1a89      	subs	r1, r1, r2
 8001638:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800163a:	bf9d      	ittte	ls
 800163c:	189b      	addls	r3, r3, r2
 800163e:	6023      	strls	r3, [r4, #0]

  return p;
 8001640:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001642:	2000      	movhi	r0, #0
 8001644:	2300      	movs	r3, #0
 8001646:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800164a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000e14 	.word	0x20000e14
 8001654:	20000e10 	.word	0x20000e10
 8001658:	f3af 8000 	nop.w
 800165c:	f3af 8000 	nop.w

08001660 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <_heap_init+0x14>)
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_heap_init+0x18>)
 8001664:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001666:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800166e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001670:	f7ff be4e 	b.w	8001310 <chMtxObjectInit>
 8001674:	20000e18 	.word	0x20000e18
 8001678:	08001621 	.word	0x08001621
 800167c:	f3af 8000 	nop.w

08001680 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <SVC_Handler+0x1c>)
 8001682:	6853      	ldr	r3, [r2, #4]
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800168a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800168e:	3368      	adds	r3, #104	; 0x68
 8001690:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001694:	2300      	movs	r3, #0
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	4770      	bx	lr
 800169c:	e000ef30 	.word	0xe000ef30

080016a0 <_port_irq_epilogue>:
 80016a0:	2320      	movs	r3, #32
 80016a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <_port_irq_epilogue+0x50>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80016ae:	d102      	bne.n	80016b6 <_port_irq_epilogue+0x16>
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 80016b6:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80016b8:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80016bc:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80016c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80016cc:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80016d0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 80016d4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80016d8:	f7ff fcca 	bl	8001070 <chSchIsPreemptionRequired>
 80016dc:	b118      	cbz	r0, 80016e6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <_port_irq_epilogue+0x58>)
 80016e0:	f844 3c50 	str.w	r3, [r4, #-80]
 80016e4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <_port_irq_epilogue+0x5c>)
 80016e8:	f844 3c50 	str.w	r3, [r4, #-80]
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	e000ef30 	.word	0xe000ef30
 80016f8:	080002e9 	.word	0x080002e9
 80016fc:	080002ec 	.word	0x080002ec

08001700 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001700:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001702:	f000 fb2d 	bl	8001d60 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <halInit+0x24>)
 8001708:	f000 fd92 	bl	8002230 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 800170c:	f000 f830 	bl	8001770 <adcInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8001710:	f000 f8a6 	bl	8001860 <sdInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8001714:	f000 f8fc 	bl	8001910 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001718:	f000 ffca 	bl	80026b0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800171c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001720:	f000 b806 	b.w	8001730 <stInit>
 8001724:	080044e0 	.word	0x080044e0
 8001728:	f3af 8000 	nop.w
 800172c:	f3af 8000 	nop.w

08001730 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8001730:	f000 bbce 	b.w	8001ed0 <st_lld_init>
 8001734:	f3af 8000 	nop.w
 8001738:	f3af 8000 	nop.w
 800173c:	f3af 8000 	nop.w

08001740 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8001744:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001746:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001748:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800174a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	4770      	bx	lr

08001750 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w

08001760 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001764:	6358      	str	r0, [r3, #52]	; 0x34
 8001766:	4770      	bx	lr
 8001768:	f3af 8000 	nop.w
 800176c:	f3af 8000 	nop.w

08001770 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8001770:	f000 bcae 	b.w	80020d0 <adc_lld_init>
 8001774:	f3af 8000 	nop.w
 8001778:	f3af 8000 	nop.w
 800177c:	f3af 8000 	nop.w

08001780 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8001780:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001782:	2201      	movs	r2, #1
 8001784:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8001786:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8001788:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 800178a:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 800178c:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 800178e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001790:	3018      	adds	r0, #24
 8001792:	f7ff bdbd 	b.w	8001310 <chMtxObjectInit>
 8001796:	bf00      	nop
 8001798:	f3af 8000 	nop.w
 800179c:	f3af 8000 	nop.w

080017a0 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 80017a0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80017a2:	2320      	movs	r3, #32
 80017a4:	4604      	mov	r4, r0
 80017a6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 80017aa:	6041      	str	r1, [r0, #4]
  adc_lld_start(adcp);
 80017ac:	f000 fcb0 	bl	8002110 <adc_lld_start>
  adcp->state = ADC_READY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	7023      	strb	r3, [r4, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	f3af 8000 	nop.w

080017c0 <adcStartConversion>:
 * @api
 */
void adcStartConversion(ADCDriver *adcp,
                        const ADCConversionGroup *grpp,
                        adcsample_t *samples,
                        size_t depth) {
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	2520      	movs	r5, #32
 80017c4:	f385 8811 	msr	BASEPRI, r5
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 80017c8:	2503      	movs	r5, #3
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 80017ca:	60c3      	str	r3, [r0, #12]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 80017cc:	6082      	str	r2, [r0, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 80017ce:	6101      	str	r1, [r0, #16]
  adcp->state    = ADC_ACTIVE;
 80017d0:	7005      	strb	r5, [r0, #0]
  adc_lld_start_conversion(adcp);
 80017d2:	f000 fcd5 	bl	8002180 <adc_lld_start_conversion>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	bd38      	pop	{r3, r4, r5, pc}
 80017de:	bf00      	nop

080017e0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80017e0:	300c      	adds	r0, #12
 80017e2:	f7ff be25 	b.w	8001430 <chIQReadTimeout>
 80017e6:	bf00      	nop
 80017e8:	f3af 8000 	nop.w
 80017ec:	f3af 8000 	nop.w

080017f0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80017f0:	300c      	adds	r0, #12
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f6:	f7ff be1b 	b.w	8001430 <chIQReadTimeout>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w

08001800 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001800:	3030      	adds	r0, #48	; 0x30
 8001802:	f7ff bead 	b.w	8001560 <chOQWriteTimeout>
 8001806:	bf00      	nop
 8001808:	f3af 8000 	nop.w
 800180c:	f3af 8000 	nop.w

08001810 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001810:	3030      	adds	r0, #48	; 0x30
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001816:	f7ff bea3 	b.w	8001560 <chOQWriteTimeout>
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w

08001820 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001820:	300c      	adds	r0, #12
 8001822:	f7ff bddd 	b.w	80013e0 <chIQGetTimeout>
 8001826:	bf00      	nop
 8001828:	f3af 8000 	nop.w
 800182c:	f3af 8000 	nop.w

08001830 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001830:	300c      	adds	r0, #12
 8001832:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001836:	f7ff bdd3 	b.w	80013e0 <chIQGetTimeout>
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w

08001840 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001840:	3030      	adds	r0, #48	; 0x30
 8001842:	f7ff be45 	b.w	80014d0 <chOQPutTimeout>
 8001846:	bf00      	nop
 8001848:	f3af 8000 	nop.w
 800184c:	f3af 8000 	nop.w

08001850 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001850:	3030      	adds	r0, #48	; 0x30
 8001852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001856:	f7ff be3b 	b.w	80014d0 <chOQPutTimeout>
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w

08001860 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8001860:	f000 be66 	b.w	8002530 <sd_lld_init>
 8001864:	f3af 8000 	nop.w
 8001868:	f3af 8000 	nop.w
 800186c:	f3af 8000 	nop.w

08001870 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001870:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001874:	4604      	mov	r4, r0
 8001876:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 8001878:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800187c:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800187e:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001880:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001882:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001884:	6060      	str	r0, [r4, #4]
 8001886:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800188a:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800188e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001890:	2210      	movs	r2, #16
 8001892:	f7ff fd75 	bl	8001380 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001896:	9400      	str	r4, [sp, #0]
 8001898:	462b      	mov	r3, r5
 800189a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800189e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80018a2:	2210      	movs	r2, #16
 80018a4:	f7ff fe04 	bl	80014b0 <chOQObjectInit>
}
 80018a8:	b002      	add	sp, #8
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	080043f0 	.word	0x080043f0

080018b0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80018b0:	b510      	push	{r4, lr}
 80018b2:	2320      	movs	r3, #32
 80018b4:	4604      	mov	r4, r0
 80018b6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 80018ba:	f000 fe49 	bl	8002550 <sd_lld_start>
  sdp->state = SD_READY;
 80018be:	2302      	movs	r3, #2
 80018c0:	7223      	strb	r3, [r4, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w

080018d0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80018d0:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80018d2:	6943      	ldr	r3, [r0, #20]
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80018d8:	b13b      	cbz	r3, 80018ea <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80018da:	4629      	mov	r1, r5
 80018dc:	f104 000c 	add.w	r0, r4, #12
 80018e0:	f7ff fd5e 	bl	80013a0 <chIQPutI>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	db0b      	blt.n	8001900 <sdIncomingDataI+0x30>
 80018e8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80018ea:	2104      	movs	r1, #4
 80018ec:	4408      	add	r0, r1
 80018ee:	f7ff fd2f 	bl	8001350 <chEvtBroadcastFlagsI>
 80018f2:	4629      	mov	r1, r5
 80018f4:	f104 000c 	add.w	r0, r4, #12
 80018f8:	f7ff fd52 	bl	80013a0 <chIQPutI>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	daf3      	bge.n	80018e8 <sdIncomingDataI+0x18>
 8001900:	1d20      	adds	r0, r4, #4
 8001902:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 8001904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001908:	f7ff bd22 	b.w	8001350 <chEvtBroadcastFlagsI>
 800190c:	f3af 8000 	nop.w

08001910 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001910:	f000 beae 	b.w	8002670 <uart_lld_init>
 8001914:	f3af 8000 	nop.w
 8001918:	f3af 8000 	nop.w
 800191c:	f3af 8000 	nop.w

08001920 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 8001920:	2300      	movs	r3, #0
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 8001922:	2201      	movs	r2, #1
 8001924:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 8001926:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 8001928:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800192a:	6043      	str	r3, [r0, #4]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop

08001930 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001930:	0943      	lsrs	r3, r0, #5
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	b410      	push	{r4}
 8001936:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800193a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800193e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8001942:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001946:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8001948:	f000 001f 	and.w	r0, r0, #31
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8001952:	b2c9      	uxtb	r1, r1
 8001954:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8001958:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800195c:	6018      	str	r0, [r3, #0]
}
 800195e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	f3af 8000 	nop.w
 8001968:	f3af 8000 	nop.w
 800196c:	f3af 8000 	nop.w

08001970 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8001970:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800197c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800197e:	6813      	ldr	r3, [r2, #0]
 8001980:	b10b      	cbz	r3, 8001986 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001982:	6850      	ldr	r0, [r2, #4]
 8001984:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800198a:	f7ff be89 	b.w	80016a0 <_port_irq_epilogue>
 800198e:	bf00      	nop
 8001990:	40026000 	.word	0x40026000
 8001994:	20000e38 	.word	0x20000e38
 8001998:	f3af 8000 	nop.w
 800199c:	f3af 8000 	nop.w

080019a0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80019a2:	4809      	ldr	r0, [pc, #36]	; (80019c8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80019a4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80019a6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80019a8:	0989      	lsrs	r1, r1, #6
 80019aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 80019ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 80019b0:	018c      	lsls	r4, r1, #6
 80019b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80019b4:	b10a      	cbz	r2, 80019ba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80019b6:	68c0      	ldr	r0, [r0, #12]
 80019b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80019ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80019be:	f7ff be6f 	b.w	80016a0 <_port_irq_epilogue>
 80019c2:	bf00      	nop
 80019c4:	40026000 	.word	0x40026000
 80019c8:	20000e38 	.word	0x20000e38
 80019cc:	f3af 8000 	nop.w

080019d0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80019d4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 80019d6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80019d8:	0c09      	lsrs	r1, r1, #16
 80019da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 80019de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 80019e0:	040c      	lsls	r4, r1, #16
 80019e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80019e4:	b10a      	cbz	r2, 80019ea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80019e6:	6940      	ldr	r0, [r0, #20]
 80019e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80019ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80019ee:	f7ff be57 	b.w	80016a0 <_port_irq_epilogue>
 80019f2:	bf00      	nop
 80019f4:	40026000 	.word	0x40026000
 80019f8:	20000e38 	.word	0x20000e38
 80019fc:	f3af 8000 	nop.w

08001a00 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001a04:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8001a06:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001a08:	0d89      	lsrs	r1, r1, #22
 8001a0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8001a0e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 8001a10:	058c      	lsls	r4, r1, #22
 8001a12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8001a14:	b10a      	cbz	r2, 8001a1a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8001a16:	69c0      	ldr	r0, [r0, #28]
 8001a18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001a1e:	f7ff be3f 	b.w	80016a0 <_port_irq_epilogue>
 8001a22:	bf00      	nop
 8001a24:	40026000 	.word	0x40026000
 8001a28:	20000e38 	.word	0x20000e38
 8001a2c:	f3af 8000 	nop.w

08001a30 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8001a30:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001a36:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001a38:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001a3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 8001a3e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001a40:	b10a      	cbz	r2, 8001a46 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8001a42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a44:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001a4a:	f7ff be29 	b.w	80016a0 <_port_irq_epilogue>
 8001a4e:	bf00      	nop
 8001a50:	40026000 	.word	0x40026000
 8001a54:	20000e38 	.word	0x20000e38
 8001a58:	f3af 8000 	nop.w
 8001a5c:	f3af 8000 	nop.w

08001a60 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001a64:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001a66:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001a68:	0989      	lsrs	r1, r1, #6
 8001a6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8001a6e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 8001a70:	018c      	lsls	r4, r1, #6
 8001a72:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001a74:	b10a      	cbz	r2, 8001a7a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001a76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001a78:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001a7e:	f7ff be0f 	b.w	80016a0 <_port_irq_epilogue>
 8001a82:	bf00      	nop
 8001a84:	40026000 	.word	0x40026000
 8001a88:	20000e38 	.word	0x20000e38
 8001a8c:	f3af 8000 	nop.w

08001a90 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001a94:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001a96:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001a98:	0c09      	lsrs	r1, r1, #16
 8001a9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8001a9e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 8001aa0:	040c      	lsls	r4, r1, #16
 8001aa2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001aa4:	b10a      	cbz	r2, 8001aaa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001aa6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001aa8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001aae:	f7ff bdf7 	b.w	80016a0 <_port_irq_epilogue>
 8001ab2:	bf00      	nop
 8001ab4:	40026000 	.word	0x40026000
 8001ab8:	20000e38 	.word	0x20000e38
 8001abc:	f3af 8000 	nop.w

08001ac0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001ac4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8001ac6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001ac8:	0d89      	lsrs	r1, r1, #22
 8001aca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 8001ace:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 8001ad0:	058c      	lsls	r4, r1, #22
 8001ad2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8001ad4:	b10a      	cbz	r2, 8001ada <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8001ad6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001ad8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001ade:	f7ff bddf 	b.w	80016a0 <_port_irq_epilogue>
 8001ae2:	bf00      	nop
 8001ae4:	40026000 	.word	0x40026000
 8001ae8:	20000e38 	.word	0x20000e38
 8001aec:	f3af 8000 	nop.w

08001af0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 8001af0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001af6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001af8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001afa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 8001afe:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8001b00:	b10a      	cbz	r2, 8001b06 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8001b02:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001b04:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b0a:	f7ff bdc9 	b.w	80016a0 <_port_irq_epilogue>
 8001b0e:	bf00      	nop
 8001b10:	40026400 	.word	0x40026400
 8001b14:	20000e38 	.word	0x20000e38
 8001b18:	f3af 8000 	nop.w
 8001b1c:	f3af 8000 	nop.w

08001b20 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001b24:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001b26:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001b28:	0989      	lsrs	r1, r1, #6
 8001b2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 8001b2e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 8001b30:	018c      	lsls	r4, r1, #6
 8001b32:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8001b34:	b10a      	cbz	r2, 8001b3a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8001b36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001b38:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b3e:	f7ff bdaf 	b.w	80016a0 <_port_irq_epilogue>
 8001b42:	bf00      	nop
 8001b44:	40026400 	.word	0x40026400
 8001b48:	20000e38 	.word	0x20000e38
 8001b4c:	f3af 8000 	nop.w

08001b50 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001b54:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001b56:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001b58:	0c09      	lsrs	r1, r1, #16
 8001b5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8001b5e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 8001b60:	040c      	lsls	r4, r1, #16
 8001b62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001b64:	b10a      	cbz	r2, 8001b6a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001b66:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001b68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b6e:	f7ff bd97 	b.w	80016a0 <_port_irq_epilogue>
 8001b72:	bf00      	nop
 8001b74:	40026400 	.word	0x40026400
 8001b78:	20000e38 	.word	0x20000e38
 8001b7c:	f3af 8000 	nop.w

08001b80 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001b84:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8001b86:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001b88:	0d89      	lsrs	r1, r1, #22
 8001b8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 8001b8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 8001b90:	058c      	lsls	r4, r1, #22
 8001b92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001b94:	b10a      	cbz	r2, 8001b9a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001b96:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001b98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b9e:	f7ff bd7f 	b.w	80016a0 <_port_irq_epilogue>
 8001ba2:	bf00      	nop
 8001ba4:	40026400 	.word	0x40026400
 8001ba8:	20000e38 	.word	0x20000e38
 8001bac:	f3af 8000 	nop.w

08001bb0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 8001bb0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001bb6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001bb8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001bba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 8001bbe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001bc0:	b10a      	cbz	r2, 8001bc6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001bc2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001bc4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001bca:	f7ff bd69 	b.w	80016a0 <_port_irq_epilogue>
 8001bce:	bf00      	nop
 8001bd0:	40026400 	.word	0x40026400
 8001bd4:	20000e38 	.word	0x20000e38
 8001bd8:	f3af 8000 	nop.w
 8001bdc:	f3af 8000 	nop.w

08001be0 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001be4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001be6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001be8:	0989      	lsrs	r1, r1, #6
 8001bea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8001bee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 8001bf0:	018c      	lsls	r4, r1, #6
 8001bf2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001bf4:	b10a      	cbz	r2, 8001bfa <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001bf6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001bf8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001bfe:	f7ff bd4f 	b.w	80016a0 <_port_irq_epilogue>
 8001c02:	bf00      	nop
 8001c04:	40026400 	.word	0x40026400
 8001c08:	20000e38 	.word	0x20000e38
 8001c0c:	f3af 8000 	nop.w

08001c10 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001c14:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8001c16:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8001c1e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 8001c20:	040c      	lsls	r4, r1, #16
 8001c22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8001c24:	b10a      	cbz	r2, 8001c2a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8001c26:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001c28:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001c2e:	f7ff bd37 	b.w	80016a0 <_port_irq_epilogue>
 8001c32:	bf00      	nop
 8001c34:	40026400 	.word	0x40026400
 8001c38:	20000e38 	.word	0x20000e38
 8001c3c:	f3af 8000 	nop.w

08001c40 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001c44:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8001c46:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001c48:	0d89      	lsrs	r1, r1, #22
 8001c4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 8001c4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 8001c50:	058c      	lsls	r4, r1, #22
 8001c52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001c54:	b10a      	cbz	r2, 8001c5a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001c56:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001c58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001c5e:	f7ff bd1f 	b.w	80016a0 <_port_irq_epilogue>
 8001c62:	bf00      	nop
 8001c64:	40026400 	.word	0x40026400
 8001c68:	20000e38 	.word	0x20000e38
 8001c6c:	f3af 8000 	nop.w

08001c70 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <dmaInit+0x3c>)
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <dmaInit+0x40>)
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <dmaInit+0x44>)
 8001c76:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001c78:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	4c0e      	ldr	r4, [pc, #56]	; (8001cb8 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 8001c7e:	4619      	mov	r1, r3
 8001c80:	e001      	b.n	8001c86 <dmaInit+0x16>
 8001c82:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8001c86:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001c88:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	f102 020c 	add.w	r2, r2, #12
 8001c94:	d1f5      	bne.n	8001c82 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8001c96:	4909      	ldr	r1, [pc, #36]	; (8001cbc <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8001c98:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 8001c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca2:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8001ca4:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8001ca6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8001ca8:	60d3      	str	r3, [r2, #12]
}
 8001caa:	4770      	bx	lr
 8001cac:	20000eb8 	.word	0x20000eb8
 8001cb0:	0800441c 	.word	0x0800441c
 8001cb4:	40026010 	.word	0x40026010
 8001cb8:	20000e38 	.word	0x20000e38
 8001cbc:	40026000 	.word	0x40026000
 8001cc0:	40026400 	.word	0x40026400
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	f3af 8000 	nop.w
 8001ccc:	f3af 8000 	nop.w

08001cd0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8001cd2:	4f1f      	ldr	r7, [pc, #124]	; (8001d50 <dmaStreamAllocate+0x80>)
 8001cd4:	7a46      	ldrb	r6, [r0, #9]
 8001cd6:	683d      	ldr	r5, [r7, #0]
 8001cd8:	2401      	movs	r4, #1
 8001cda:	fa04 fe06 	lsl.w	lr, r4, r6
 8001cde:	ea1e 0f05 	tst.w	lr, r5
 8001ce2:	d131      	bne.n	8001d48 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001ce4:	4c1b      	ldr	r4, [pc, #108]	; (8001d54 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8001ce6:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001cea:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8001cee:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8001cf2:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001cf4:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001cf8:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8001cfc:	d004      	beq.n	8001d08 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 8001cfe:	4c16      	ldr	r4, [pc, #88]	; (8001d58 <dmaStreamAllocate+0x88>)
 8001d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d06:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 8001d08:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8001d0c:	d116      	bne.n	8001d3c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d0e:	6805      	ldr	r5, [r0, #0]
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	f023 031f 	bic.w	r3, r3, #31
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	f013 0401 	ands.w	r4, r3, #1
 8001d1e:	d1fb      	bne.n	8001d18 <dmaStreamAllocate+0x48>
 8001d20:	7a07      	ldrb	r7, [r0, #8]
 8001d22:	6846      	ldr	r6, [r0, #4]
 8001d24:	233d      	movs	r3, #61	; 0x3d
 8001d26:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001d28:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d2a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001d2c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001d2e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8001d30:	b162      	cbz	r2, 8001d4c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8001d32:	7a80      	ldrb	r0, [r0, #10]
 8001d34:	f7ff fdfc 	bl	8001930 <nvicEnableVector>

  return FALSE;
 8001d38:	4620      	mov	r0, r4
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 8001d3c:	4c06      	ldr	r4, [pc, #24]	; (8001d58 <dmaStreamAllocate+0x88>)
 8001d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d44:	6323      	str	r3, [r4, #48]	; 0x30
 8001d46:	e7e2      	b.n	8001d0e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 8001d48:	4620      	mov	r0, r4
 8001d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 8001d4c:	4610      	mov	r0, r2
}
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d50:	20000eb8 	.word	0x20000eb8
 8001d54:	20000e38 	.word	0x20000e38
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	f3af 8000 	nop.w

08001d60 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <hal_lld_init+0x60>)
 8001d62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001d6a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001d6c:	6119      	str	r1, [r3, #16]
 8001d6e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001d70:	6958      	ldr	r0, [r3, #20]
 8001d72:	6159      	str	r1, [r3, #20]
 8001d74:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001d76:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001d78:	4c12      	ldr	r4, [pc, #72]	; (8001dc4 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001d7a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001d7e:	6218      	str	r0, [r3, #32]
 8001d80:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001d82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001d84:	6259      	str	r1, [r3, #36]	; 0x24
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001d88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d8a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d8e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001d96:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001d98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001d9a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001d9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001da2:	d003      	beq.n	8001dac <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001da4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001da8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001daa:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001dae:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001db2:	6853      	ldr	r3, [r2, #4]
 8001db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001db8:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001dba:	f7ff bf59 	b.w	8001c70 <dmaInit>
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	f3af 8000 	nop.w
 8001dcc:	f3af 8000 	nop.w

08001dd0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001dd0:	492c      	ldr	r1, [pc, #176]	; (8001e84 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001dd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001ddc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001dde:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001de0:	680b      	ldr	r3, [r1, #0]
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001de8:	680a      	ldr	r2, [r1, #0]
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <stm32_clock_init+0xb4>)
 8001dec:	0790      	lsls	r0, r2, #30
 8001dee:	d5fb      	bpl.n	8001de8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	f022 0203 	bic.w	r2, r2, #3
 8001df6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	688b      	ldr	r3, [r1, #8]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e02:	f013 030c 	ands.w	r3, r3, #12
 8001e06:	d1fa      	bne.n	8001dfe <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001e08:	6811      	ldr	r1, [r2, #0]
 8001e0a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8001e0e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001e10:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001e1a:	6811      	ldr	r1, [r2, #0]
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e1e:	0389      	lsls	r1, r1, #14
 8001e20:	d5fb      	bpl.n	8001e1a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001e22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001e2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e2c:	4915      	ldr	r1, [pc, #84]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e2e:	0790      	lsls	r0, r2, #30
 8001e30:	d5fb      	bpl.n	8001e2a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <stm32_clock_init+0xbc>)
 8001e34:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001e36:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001e40:	6853      	ldr	r3, [r2, #4]
 8001e42:	0459      	lsls	r1, r3, #17
 8001e44:	d5fc      	bpl.n	8001e40 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001e46:	490f      	ldr	r1, [pc, #60]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e48:	680a      	ldr	r2, [r1, #0]
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e4c:	0192      	lsls	r2, r2, #6
 8001e4e:	d5fb      	bpl.n	8001e48 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001e50:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001e52:	4910      	ldr	r1, [pc, #64]	; (8001e94 <stm32_clock_init+0xc4>)
 8001e54:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001e56:	f240 7102 	movw	r1, #1794	; 0x702
 8001e5a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	f042 0202 	orr.w	r2, r2, #2
 8001e62:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001e64:	461a      	mov	r2, r3
 8001e66:	6893      	ldr	r3, [r2, #8]
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <stm32_clock_init+0xb4>)
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d1f9      	bne.n	8001e66 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001e72:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	644b      	str	r3, [r1, #68]	; 0x44
 8001e7a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	664b      	str	r3, [r1, #100]	; 0x64
 8001e82:	4770      	bx	lr
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	0741540c 	.word	0x0741540c
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	38081000 	.word	0x38081000
 8001e98:	f3af 8000 	nop.w
 8001e9c:	f3af 8000 	nop.w

08001ea0 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	0792      	lsls	r2, r2, #30
 8001ea8:	d401      	bmi.n	8001eae <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001eaa:	f7ff bbf9 	b.w	80016a0 <_port_irq_epilogue>
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001eae:	b510      	push	{r4, lr}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	611c      	str	r4, [r3, #16]
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8001eba:	f7fe ff39 	bl	8000d30 <chSysTimerHandlerI>
 8001ebe:	f384 8811 	msr	BASEPRI, r4
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001ec6:	f7ff bbeb 	b.w	80016a0 <_port_irq_epilogue>
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w

08001ed0 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001ed2:	4810      	ldr	r0, [pc, #64]	; (8001f14 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001ed4:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001ed6:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001ede:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8001ee4:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001ee6:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001ee8:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001eec:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001ef0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001ef4:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001ef6:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001ef8:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001efa:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001efc:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8001efe:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001f02:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001f04:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001f06:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001f08:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8001f0a:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001f0c:	f7ff bd10 	b.w	8001930 <nvicEnableVector>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	e0042000 	.word	0xe0042000
 8001f18:	f3af 8000 	nop.w
 8001f1c:	f3af 8000 	nop.w

08001f20 <adc_lld_serve_rx_interrupt>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001f20:	f011 0f0c 	tst.w	r1, #12
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f28:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001f2a:	d02e      	beq.n	8001f8a <adc_lld_serve_rx_interrupt+0x6a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f2e:	6803      	ldr	r3, [r0, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f022 021f 	bic.w	r2, r2, #31
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	f011 0101 	ands.w	r1, r1, #1
 8001f3e:	d1fb      	bne.n	8001f38 <adc_lld_serve_rx_interrupt+0x18>

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001f40:	6922      	ldr	r2, [r4, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f42:	7a07      	ldrb	r7, [r0, #8]
 8001f44:	6846      	ldr	r6, [r0, #4]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001f46:	6895      	ldr	r5, [r2, #8]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8001f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f4a:	223d      	movs	r2, #61	; 0x3d
 8001f4c:	40ba      	lsls	r2, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001f4e:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f50:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001f52:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001f54:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001f56:	6098      	str	r0, [r3, #8]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001f58:	b145      	cbz	r5, 8001f6c <adc_lld_serve_rx_interrupt+0x4c>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	7023      	strb	r3, [r4, #0]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	47a8      	blx	r5
 8001f62:	7823      	ldrb	r3, [r4, #0]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	bf04      	itt	eq
 8001f68:	2302      	moveq	r3, #2
 8001f6a:	7023      	strbeq	r3, [r4, #0]
 8001f6c:	2500      	movs	r5, #0
 8001f6e:	6125      	str	r5, [r4, #16]
 8001f70:	2320      	movs	r3, #32
 8001f72:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001f76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7a:	f104 0014 	add.w	r0, r4, #20
 8001f7e:	f7ff f93f 	bl	8001200 <chThdResumeI>
 8001f82:	f385 8811 	msr	BASEPRI, r5
 8001f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 8001f8a:	6905      	ldr	r5, [r0, #16]
 8001f8c:	b1a5      	cbz	r5, 8001fb8 <adc_lld_serve_rx_interrupt+0x98>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001f8e:	068a      	lsls	r2, r1, #26
 8001f90:	d510      	bpl.n	8001fb4 <adc_lld_serve_rx_interrupt+0x94>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001f92:	782b      	ldrb	r3, [r5, #0]
 8001f94:	b1db      	cbz	r3, 8001fce <adc_lld_serve_rx_interrupt+0xae>
 8001f96:	686b      	ldr	r3, [r5, #4]
 8001f98:	b173      	cbz	r3, 8001fb8 <adc_lld_serve_rx_interrupt+0x98>
 8001f9a:	68c2      	ldr	r2, [r0, #12]
 8001f9c:	2a01      	cmp	r2, #1
 8001f9e:	d947      	bls.n	8002030 <adc_lld_serve_rx_interrupt+0x110>
 8001fa0:	8869      	ldrh	r1, [r5, #2]
 8001fa2:	6884      	ldr	r4, [r0, #8]
 8001fa4:	0852      	lsrs	r2, r2, #1
 8001fa6:	fb02 f101 	mul.w	r1, r2, r1
 8001faa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8001fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001fb2:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001fb4:	06cb      	lsls	r3, r1, #27
 8001fb6:	d401      	bmi.n	8001fbc <adc_lld_serve_rx_interrupt+0x9c>
 8001fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8001fbc:	686b      	ldr	r3, [r5, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0fa      	beq.n	8001fb8 <adc_lld_serve_rx_interrupt+0x98>
 8001fc2:	68c2      	ldr	r2, [r0, #12]
 8001fc4:	6881      	ldr	r1, [r0, #8]
 8001fc6:	0852      	lsrs	r2, r2, #1
      }
    }
  }
}
 8001fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8001fcc:	4718      	bx	r3
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001fce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001fd0:	6802      	ldr	r2, [r0, #0]
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f023 031f 	bic.w	r3, r3, #31
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f013 0301 	ands.w	r3, r3, #1
 8001fe0:	d1fb      	bne.n	8001fda <adc_lld_serve_rx_interrupt+0xba>
 8001fe2:	7a07      	ldrb	r7, [r0, #8]
 8001fe4:	6846      	ldr	r6, [r0, #4]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001fe6:	686d      	ldr	r5, [r5, #4]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8001fe8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001fea:	213d      	movs	r1, #61	; 0x3d
 8001fec:	40b9      	lsls	r1, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001fee:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001ff0:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 8001ff2:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001ff4:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001ff6:	6090      	str	r0, [r2, #8]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001ff8:	b1ad      	cbz	r5, 8002026 <adc_lld_serve_rx_interrupt+0x106>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	7023      	strb	r3, [r4, #0]
 8001ffe:	68e2      	ldr	r2, [r4, #12]
 8002000:	68a1      	ldr	r1, [r4, #8]
 8002002:	4620      	mov	r0, r4
 8002004:	47a8      	blx	r5
 8002006:	7823      	ldrb	r3, [r4, #0]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d00c      	beq.n	8002026 <adc_lld_serve_rx_interrupt+0x106>
 800200c:	2320      	movs	r3, #32
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f104 0014 	add.w	r0, r4, #20
 8002018:	f7ff f8f2 	bl	8001200 <chThdResumeI>
 800201c:	2300      	movs	r3, #0
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002026:	2202      	movs	r2, #2
 8002028:	2300      	movs	r3, #0
 800202a:	7022      	strb	r2, [r4, #0]
 800202c:	6123      	str	r3, [r4, #16]
 800202e:	e7ed      	b.n	800200c <adc_lld_serve_rx_interrupt+0xec>
 8002030:	6881      	ldr	r1, [r0, #8]
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8002032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8002036:	4718      	bx	r3
 8002038:	f3af 8000 	nop.w
 800203c:	f3af 8000 	nop.w

08002040 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector88) {
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <Vector88+0x7c>)
 8002044:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8002046:	2100      	movs	r1, #0
 8002048:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800204a:	0693      	lsls	r3, r2, #26
 800204c:	d531      	bpl.n	80020b2 <Vector88+0x72>
 800204e:	4c1c      	ldr	r4, [pc, #112]	; (80020c0 <Vector88+0x80>)
 8002050:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002052:	680a      	ldr	r2, [r1, #0]
 8002054:	6853      	ldr	r3, [r2, #4]
 8002056:	b363      	cbz	r3, 80020b2 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8002058:	6925      	ldr	r5, [r4, #16]
 800205a:	b355      	cbz	r5, 80020b2 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f023 031f 	bic.w	r3, r3, #31
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	6813      	ldr	r3, [r2, #0]
 8002066:	f013 0301 	ands.w	r3, r3, #1
 800206a:	d1fb      	bne.n	8002064 <Vector88+0x24>
 800206c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800206e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002070:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8002072:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002074:	4d12      	ldr	r5, [pc, #72]	; (80020c0 <Vector88+0x80>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002076:	213d      	movs	r1, #61	; 0x3d
 8002078:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800207c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800207e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8002080:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8002082:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002084:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8002086:	b146      	cbz	r6, 800209a <Vector88+0x5a>
 8002088:	2305      	movs	r3, #5
 800208a:	702b      	strb	r3, [r5, #0]
 800208c:	4628      	mov	r0, r5
 800208e:	47b0      	blx	r6
 8002090:	782b      	ldrb	r3, [r5, #0]
 8002092:	2b05      	cmp	r3, #5
 8002094:	bf04      	itt	eq
 8002096:	2302      	moveq	r3, #2
 8002098:	702b      	strbeq	r3, [r5, #0]
 800209a:	2500      	movs	r5, #0
 800209c:	6125      	str	r5, [r4, #16]
 800209e:	2320      	movs	r3, #32
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <Vector88+0x84>)
 80020aa:	f7ff f8a9 	bl	8001200 <chThdResumeI>
 80020ae:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 80020b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 80020b6:	f7ff baf3 	b.w	80016a0 <_port_irq_epilogue>
 80020ba:	bf00      	nop
 80020bc:	40012000 	.word	0x40012000
 80020c0:	20000ebc 	.word	0x20000ebc
 80020c4:	20000ed0 	.word	0x20000ed0
 80020c8:	f3af 8000 	nop.w
 80020cc:	f3af 8000 	nop.w

080020d0 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 80020d0:	b510      	push	{r4, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 80020d2:	4c08      	ldr	r4, [pc, #32]	; (80020f4 <adc_lld_init+0x24>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff fb53 	bl	8001780 <adcObjectInit>
  ADCD1.adc = ADC1;
 80020da:	4907      	ldr	r1, [pc, #28]	; (80020f8 <adc_lld_init+0x28>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <adc_lld_init+0x2c>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <adc_lld_init+0x30>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 80020e0:	62a1      	str	r1, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80020e2:	62e2      	str	r2, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80020e4:	6323      	str	r3, [r4, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 80020e6:	2106      	movs	r1, #6
 80020e8:	2012      	movs	r0, #18
}
 80020ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 80020ee:	f7ff bc1f 	b.w	8001930 <nvicEnableVector>
 80020f2:	bf00      	nop
 80020f4:	20000ebc 	.word	0x20000ebc
 80020f8:	40012000 	.word	0x40012000
 80020fc:	080044a0 	.word	0x080044a0
 8002100:	00022c16 	.word	0x00022c16
 8002104:	f3af 8000 	nop.w
 8002108:	f3af 8000 	nop.w
 800210c:	f3af 8000 	nop.w

08002110 <adc_lld_start>:
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8002110:	7803      	ldrb	r3, [r0, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d000      	beq.n	8002118 <adc_lld_start+0x8>
 8002116:	4770      	bx	lr
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <adc_lld_start+0x50>)
 800211a:	4298      	cmp	r0, r3
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
 800211c:	b510      	push	{r4, lr}
 800211e:	4604      	mov	r4, r0

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8002120:	d00d      	beq.n	800213e <adc_lld_start+0x2e>
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002122:	4810      	ldr	r0, [pc, #64]	; (8002164 <adc_lld_start+0x54>)
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8002124:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002126:	6843      	ldr	r3, [r0, #4]
 8002128:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 800212c:	2100      	movs	r1, #0
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
    adcp->adc->CR2 = 0;
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002132:	2401      	movs	r4, #1
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002134:	6043      	str	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8002136:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8002138:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 800213a:	6094      	str	r4, [r2, #8]
 800213c:	bd10      	pop	{r4, pc}
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 800213e:	4603      	mov	r3, r0
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <adc_lld_start+0x58>)
 8002142:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002144:	2106      	movs	r1, #6
 8002146:	f7ff fdc3 	bl	8001cd0 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800214a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      rccEnableADC1(FALSE);
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <adc_lld_start+0x5c>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <adc_lld_start+0x60>)
 8002152:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
 8002154:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6453      	str	r3, [r2, #68]	; 0x44
 800215c:	e7e1      	b.n	8002122 <adc_lld_start+0x12>
 800215e:	bf00      	nop
 8002160:	20000ebc 	.word	0x20000ebc
 8002164:	40012300 	.word	0x40012300
 8002168:	08001f21 	.word	0x08001f21
 800216c:	40023800 	.word	0x40023800
 8002170:	4001204c 	.word	0x4001204c
 8002174:	f3af 8000 	nop.w
 8002178:	f3af 8000 	nop.w
 800217c:	f3af 8000 	nop.w

08002180 <adc_lld_start_conversion>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8002180:	6903      	ldr	r3, [r0, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
 8002182:	6b01      	ldr	r1, [r0, #48]	; 0x30
  if (grpp->circular) {
 8002184:	781a      	ldrb	r2, [r3, #0]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
 8002186:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8002188:	2a00      	cmp	r2, #0
 800218a:	d12b      	bne.n	80021e4 <adc_lld_start_conversion+0x64>
 800218c:	68c2      	ldr	r2, [r0, #12]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800218e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002190:	885c      	ldrh	r4, [r3, #2]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002192:	682d      	ldr	r5, [r5, #0]
 8002194:	6886      	ldr	r6, [r0, #8]
 8002196:	60ee      	str	r6, [r5, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002198:	fb02 f204 	mul.w	r2, r2, r4
 800219c:	606a      	str	r2, [r5, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800219e:	68dc      	ldr	r4, [r3, #12]
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 80021a0:	6029      	str	r1, [r5, #0]
  dmaStreamEnable(adcp->dmastp);
 80021a2:	682e      	ldr	r6, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 80021a4:	6a82      	ldr	r2, [r0, #40]	; 0x28

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 80021a6:	6919      	ldr	r1, [r3, #16]
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 80021a8:	f8d3 e014 	ldr.w	lr, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 80021ac:	699f      	ldr	r7, [r3, #24]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80021ae:	f044 6080 	orr.w	r0, r4, #67108864	; 0x4000000
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 80021b2:	f046 0401 	orr.w	r4, r6, #1
 80021b6:	602c      	str	r4, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 80021b8:	2400      	movs	r4, #0
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 80021ba:	69dd      	ldr	r5, [r3, #28]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 80021bc:	6014      	str	r4, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 80021be:	6a1c      	ldr	r4, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 80021c2:	f8c2 e00c 	str.w	lr, [r2, #12]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80021c6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
 80021ca:	6117      	str	r7, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 80021cc:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 80021ce:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 80021d0:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 80021d2:	004b      	lsls	r3, r1, #1
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80021d4:	6050      	str	r0, [r2, #4]
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 80021d6:	d40d      	bmi.n	80021f4 <adc_lld_start_conversion+0x74>

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 80021d8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80021dc:	f041 0101 	orr.w	r1, r1, #1

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  }
  else
    adcp->adc->CR2 = cr2;
 80021e0:	6091      	str	r1, [r2, #8]
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 80021e4:	68c2      	ldr	r2, [r0, #12]
 80021e6:	2a01      	cmp	r2, #1
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
 80021e8:	bf94      	ite	ls
 80021ea:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
    if (adcp->depth > 1) {
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 80021ee:	f441 7184 	orrhi.w	r1, r1, #264	; 0x108
 80021f2:	e7cc      	b.n	800218e <adc_lld_start_conversion+0xe>

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80021f4:	f021 4380 	bic.w	r3, r1, #1073741824	; 0x40000000
 80021f8:	f023 0302 	bic.w	r3, r3, #2
 80021fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8002200:	f441 7140 	orr.w	r1, r1, #768	; 0x300

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8002204:	f043 0303 	orr.w	r3, r3, #3

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8002208:	f041 0103 	orr.w	r1, r1, #3

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800220c:	6093      	str	r3, [r2, #8]

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800220e:	6091      	str	r1, [r2, #8]
 8002210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	f3af 8000 	nop.w
 800221c:	f3af 8000 	nop.w

08002220 <adcSTM32EnableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8002220:	4a02      	ldr	r2, [pc, #8]	; (800222c <adcSTM32EnableTSVREFE+0xc>)
 8002222:	6853      	ldr	r3, [r2, #4]
 8002224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002228:	6053      	str	r3, [r2, #4]
 800222a:	4770      	bx	lr
 800222c:	40012300 	.word	0x40012300

08002230 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8002230:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002232:	4e3a      	ldr	r6, [pc, #232]	; (800231c <_pal_lld_init+0xec>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002234:	4d3a      	ldr	r5, [pc, #232]	; (8002320 <_pal_lld_init+0xf0>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002236:	6b37      	ldr	r7, [r6, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002238:	4c3a      	ldr	r4, [pc, #232]	; (8002324 <_pal_lld_init+0xf4>)
 800223a:	493b      	ldr	r1, [pc, #236]	; (8002328 <_pal_lld_init+0xf8>)
 800223c:	4a3b      	ldr	r2, [pc, #236]	; (800232c <_pal_lld_init+0xfc>)
 800223e:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <_pal_lld_init+0x100>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002240:	f047 071f 	orr.w	r7, r7, #31
 8002244:	6337      	str	r7, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8002246:	6d37      	ldr	r7, [r6, #80]	; 0x50
 8002248:	f047 071f 	orr.w	r7, r7, #31
 800224c:	6537      	str	r7, [r6, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800224e:	6846      	ldr	r6, [r0, #4]
 8002250:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002252:	6886      	ldr	r6, [r0, #8]
 8002254:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002256:	68c6      	ldr	r6, [r0, #12]
 8002258:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 800225a:	6906      	ldr	r6, [r0, #16]
 800225c:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800225e:	6946      	ldr	r6, [r0, #20]
 8002260:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002262:	6986      	ldr	r6, [r0, #24]
 8002264:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002266:	6806      	ldr	r6, [r0, #0]
 8002268:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800226a:	6a05      	ldr	r5, [r0, #32]
 800226c:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800226e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002270:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002272:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002274:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8002276:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8002278:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800227a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800227c:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800227e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002280:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002282:	69c5      	ldr	r5, [r0, #28]
 8002284:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002286:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002288:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800228a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800228c:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800228e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002290:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8002292:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002294:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002296:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002298:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800229a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800229c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800229e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80022a0:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80022a2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80022a4:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022a6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80022a8:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80022aa:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80022ac:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 80022ae:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80022b0:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80022b2:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80022b4:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80022b6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80022b8:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022ba:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80022bc:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80022be:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80022c0:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022c2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80022c4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80022c6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80022c8:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80022ca:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80022ce:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80022d0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80022d4:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80022d6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022dc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80022de:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80022e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80022e4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 80022e8:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80022ec:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 80022f0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80022f4:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 80022f8:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80022fc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8002300:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002304:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8002308:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800230c:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8002310:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002314:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 8002318:	bcf0      	pop	{r4, r5, r6, r7}
 800231a:	4770      	bx	lr
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	f3af 8000 	nop.w
 8002338:	f3af 8000 	nop.w
 800233c:	f3af 8000 	nop.w

08002340 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 8002344:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002348:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800234c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8002350:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 8002354:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002358:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800235a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800235e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002362:	f04f 0803 	mov.w	r8, #3
 8002366:	e030      	b.n	80023ca <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002368:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800236c:	ea2b 0303 	bic.w	r3, fp, r3
 8002370:	ea43 030a 	orr.w	r3, r3, sl
 8002374:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002376:	6843      	ldr	r3, [r0, #4]
 8002378:	fa09 fa04 	lsl.w	sl, r9, r4
 800237c:	ea23 030a 	bic.w	r3, r3, sl
 8002380:	433b      	orrs	r3, r7
 8002382:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002384:	0063      	lsls	r3, r4, #1
 8002386:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800238a:	fa08 f303 	lsl.w	r3, r8, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	ea0a 0a03 	and.w	sl, sl, r3
 8002394:	ea4a 0a06 	orr.w	sl, sl, r6
 8002398:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800239c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80023a0:	ea03 0a0a 	and.w	sl, r3, sl
 80023a4:	ea4a 0a05 	orr.w	sl, sl, r5
 80023a8:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 80023ac:	f8d0 a000 	ldr.w	sl, [r0]
 80023b0:	ea03 030a 	and.w	r3, r3, sl
 80023b4:	ea43 030e 	orr.w	r3, r3, lr
 80023b8:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 80023ba:	0849      	lsrs	r1, r1, #1
 80023bc:	d019      	beq.n	80023f2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 80023be:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 80023c0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 80023c2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 80023c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80023c8:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80023ca:	f004 0307 	and.w	r3, r4, #7
 80023ce:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 80023d0:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80023d4:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 80023d8:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 80023dc:	d0ed      	beq.n	80023ba <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 80023de:	2c07      	cmp	r4, #7
 80023e0:	d9c2      	bls.n	8002368 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 80023e2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80023e6:	ea2b 0303 	bic.w	r3, fp, r3
 80023ea:	ea43 030a 	orr.w	r3, r3, sl
 80023ee:	6243      	str	r3, [r0, #36]	; 0x24
 80023f0:	e7c1      	b.n	8002376 <_pal_lld_setgroupmode+0x36>
 80023f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	f3af 8000 	nop.w
 80023fc:	f3af 8000 	nop.w

08002400 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <notify1+0xc>)
 8002402:	68d3      	ldr	r3, [r2, #12]
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	60d3      	str	r3, [r2, #12]
 800240a:	4770      	bx	lr
 800240c:	40011000 	.word	0x40011000

08002410 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8002412:	4e43      	ldr	r6, [pc, #268]	; (8002520 <VectorD4+0x110>)
 8002414:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002416:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 8002418:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800241a:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800241c:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800241e:	d44f      	bmi.n	80024c0 <VectorD4+0xb0>
 8002420:	2320      	movs	r3, #32
 8002422:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002426:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800242a:	d108      	bne.n	800243e <VectorD4+0x2e>
 800242c:	e029      	b.n	8002482 <VectorD4+0x72>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800242e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002430:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002432:	d41d      	bmi.n	8002470 <VectorD4+0x60>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002434:	682c      	ldr	r4, [r5, #0]
 8002436:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002438:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800243c:	d021      	beq.n	8002482 <VectorD4+0x72>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800243e:	0723      	lsls	r3, r4, #28
 8002440:	d0f5      	beq.n	800242e <VectorD4+0x1e>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8002442:	f014 0f08 	tst.w	r4, #8
 8002446:	bf0c      	ite	eq
 8002448:	2100      	moveq	r1, #0
 800244a:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800244c:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800244e:	bf48      	it	mi
 8002450:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8002454:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002456:	bf48      	it	mi
 8002458:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800245c:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800245e:	bf48      	it	mi
 8002460:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002464:	482f      	ldr	r0, [pc, #188]	; (8002524 <VectorD4+0x114>)
 8002466:	f7fe ff73 	bl	8001350 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800246a:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800246c:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800246e:	d5e1      	bpl.n	8002434 <VectorD4+0x24>
      sdIncomingDataI(sdp, b);
 8002470:	b2c9      	uxtb	r1, r1
 8002472:	482b      	ldr	r0, [pc, #172]	; (8002520 <VectorD4+0x110>)
 8002474:	f7ff fa2c 	bl	80018d0 <sdIncomingDataI>
    sr = u->SR;
 8002478:	682c      	ldr	r4, [r5, #0]
 800247a:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800247c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002480:	d1dd      	bne.n	800243e <VectorD4+0x2e>
 8002482:	2300      	movs	r3, #0
 8002484:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002488:	0639      	lsls	r1, r7, #24
 800248a:	d501      	bpl.n	8002490 <VectorD4+0x80>
 800248c:	0622      	lsls	r2, r4, #24
 800248e:	d426      	bmi.n	80024de <VectorD4+0xce>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8002490:	0663      	lsls	r3, r4, #25
 8002492:	d511      	bpl.n	80024b8 <VectorD4+0xa8>
 8002494:	2320      	movs	r3, #32
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800249c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800249e:	4820      	ldr	r0, [pc, #128]	; (8002520 <VectorD4+0x110>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d029      	beq.n	80024f8 <VectorD4+0xe8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80024a4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80024a8:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 80024aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80024ae:	60eb      	str	r3, [r5, #12]
 80024b0:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80024b2:	602a      	str	r2, [r5, #0]
 80024b4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80024b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80024bc:	f7ff b8f0 	b.w	80016a0 <_port_irq_epilogue>
 80024c0:	2320      	movs	r3, #32
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ca:	1d30      	adds	r0, r6, #4
 80024cc:	f7fe ff40 	bl	8001350 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 80024d0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	2300      	movs	r3, #0
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	e7a0      	b.n	8002420 <VectorD4+0x10>
 80024de:	2320      	movs	r3, #32
 80024e0:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 80024e4:	4810      	ldr	r0, [pc, #64]	; (8002528 <VectorD4+0x118>)
 80024e6:	f7ff f81b 	bl	8001520 <chOQGetI>
    if (b < Q_OK) {
 80024ea:	2800      	cmp	r0, #0
 80024ec:	db0c      	blt.n	8002508 <VectorD4+0xf8>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80024ee:	6068      	str	r0, [r5, #4]
 80024f0:	2300      	movs	r3, #0
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	e7cb      	b.n	8002490 <VectorD4+0x80>
 80024f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0d2      	beq.n	80024a4 <VectorD4+0x94>
 80024fe:	3004      	adds	r0, #4
 8002500:	2110      	movs	r1, #16
 8002502:	f7fe ff25 	bl	8001350 <chEvtBroadcastFlagsI>
 8002506:	e7cd      	b.n	80024a4 <VectorD4+0x94>
 8002508:	2108      	movs	r1, #8
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <VectorD4+0x114>)
 800250c:	f7fe ff20 	bl	8001350 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002510:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002514:	403b      	ands	r3, r7
 8002516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251a:	60eb      	str	r3, [r5, #12]
 800251c:	e7e8      	b.n	80024f0 <VectorD4+0xe0>
 800251e:	bf00      	nop
 8002520:	20000ef0 	.word	0x20000ef0
 8002524:	20000ef4 	.word	0x20000ef4
 8002528:	20000f20 	.word	0x20000f20
 800252c:	f3af 8000 	nop.w

08002530 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002530:	b510      	push	{r4, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002532:	4c04      	ldr	r4, [pc, #16]	; (8002544 <sd_lld_init+0x14>)
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <sd_lld_init+0x18>)
 8002536:	4620      	mov	r0, r4
 8002538:	2100      	movs	r1, #0
 800253a:	f7ff f999 	bl	8001870 <sdObjectInit>
  SD1.usart = USART1;
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <sd_lld_init+0x1c>)
 8002540:	6763      	str	r3, [r4, #116]	; 0x74
 8002542:	bd10      	pop	{r4, pc}
 8002544:	20000ef0 	.word	0x20000ef0
 8002548:	08002401 	.word	0x08002401
 800254c:	40011000 	.word	0x40011000

08002550 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002550:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 8002552:	4c1f      	ldr	r4, [pc, #124]	; (80025d0 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 8002554:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8002556:	2900      	cmp	r1, #0
 8002558:	bf18      	it	ne
 800255a:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800255c:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800255e:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002560:	d022      	beq.n	80025a8 <sd_lld_start+0x58>
 8002562:	6f6b      	ldr	r3, [r5, #116]	; 0x74
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8002564:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <sd_lld_start+0x84>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02b      	beq.n	80025c2 <sd_lld_start+0x72>
 800256a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800256e:	4293      	cmp	r3, r2
 8002570:	d027      	beq.n	80025c2 <sd_lld_start+0x72>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8002572:	6821      	ldr	r1, [r4, #0]
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <sd_lld_start+0x88>)
 8002576:	fbb2 f2f1 	udiv	r2, r2, r1
 800257a:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800257c:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800257e:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002580:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002582:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002586:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800258a:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800258e:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002592:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002594:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002596:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8002598:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800259a:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800259c:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800259e:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80025a0:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80025a2:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <sd_lld_start+0x8c>)
 80025aa:	4298      	cmp	r0, r3
 80025ac:	d1d9      	bne.n	8002562 <sd_lld_start+0x12>
      rccEnableUSART1(FALSE);
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <sd_lld_start+0x90>)
 80025b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 80025b8:	210c      	movs	r1, #12
 80025ba:	2025      	movs	r0, #37	; 0x25
 80025bc:	f7ff f9b8 	bl	8001930 <nvicEnableVector>
 80025c0:	e7cf      	b.n	8002562 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80025c2:	6821      	ldr	r1, [r4, #0]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <sd_lld_start+0x94>)
 80025c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e7d6      	b.n	800257c <sd_lld_start+0x2c>
 80025ce:	bf00      	nop
 80025d0:	080044d0 	.word	0x080044d0
 80025d4:	40011000 	.word	0x40011000
 80025d8:	0280de80 	.word	0x0280de80
 80025dc:	20000ef0 	.word	0x20000ef0
 80025e0:	40023800 	.word	0x40023800
 80025e4:	0501bd00 	.word	0x0501bd00
 80025e8:	f3af 8000 	nop.w
 80025ec:	f3af 8000 	nop.w

080025f0 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 80025f2:	4e1d      	ldr	r6, [pc, #116]	; (8002668 <VectorD8+0x78>)
 80025f4:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 80025f6:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 80025f8:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80025fa:	6863      	ldr	r3, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80025fc:	f240 130f 	movw	r3, #271	; 0x10f
 8002600:	402b      	ands	r3, r5
 8002602:	b1eb      	cbz	r3, 8002640 <VectorD8+0x50>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 8002604:	6873      	ldr	r3, [r6, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 8002608:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800260c:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 800260e:	b1ba      	cbz	r2, 8002640 <VectorD8+0x50>
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
 8002610:	b2ab      	uxth	r3, r5
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8002612:	f013 0f08 	tst.w	r3, #8
 8002616:	bf0c      	ite	eq
 8002618:	2100      	moveq	r1, #0
 800261a:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 800261c:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 800261e:	bf48      	it	mi
 8002620:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8002624:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8002626:	bf48      	it	mi
 8002628:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 800262c:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 800262e:	bf48      	it	mi
 8002630:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8002634:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8002636:	bf48      	it	mi
 8002638:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <VectorD8+0x78>)
 800263e:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8002640:	066a      	lsls	r2, r5, #25
 8002642:	d50c      	bpl.n	800265e <VectorD8+0x6e>
 8002644:	067b      	lsls	r3, r7, #25
 8002646:	d50a      	bpl.n	800265e <VectorD8+0x6e>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8002648:	6873      	ldr	r3, [r6, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800264c:	f027 0740 	bic.w	r7, r7, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8002650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002654:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002656:	60e7      	str	r7, [r4, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8002658:	b10b      	cbz	r3, 800265e <VectorD8+0x6e>
      uartp->config->txend2_cb(uartp);
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <VectorD8+0x78>)
 800265c:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
}
 800265e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
 8002662:	f7ff b81d 	b.w	80016a0 <_port_irq_epilogue>
 8002666:	bf00      	nop
 8002668:	20000f68 	.word	0x20000f68
 800266c:	f3af 8000 	nop.w

08002670 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8002670:	b510      	push	{r4, lr}
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8002672:	4c07      	ldr	r4, [pc, #28]	; (8002690 <uart_lld_init+0x20>)
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff f953 	bl	8001920 <uartObjectInit>
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <uart_lld_init+0x24>)
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <uart_lld_init+0x28>)
 800267e:	60a2      	str	r2, [r4, #8]
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8002680:	2106      	movs	r1, #6
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8002682:	f103 020c 	add.w	r2, r3, #12
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8002686:	60e1      	str	r1, [r4, #12]
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8002688:	6123      	str	r3, [r4, #16]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 800268a:	6162      	str	r2, [r4, #20]
 800268c:	bd10      	pop	{r4, pc}
 800268e:	bf00      	nop
 8002690:	20000f68 	.word	0x20000f68
 8002694:	0800444c 	.word	0x0800444c
 8002698:	40004400 	.word	0x40004400
 800269c:	f3af 8000 	nop.w

080026a0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 80026a0:	f7ff bb96 	b.w	8001dd0 <stm32_clock_init>
 80026a4:	f3af 8000 	nop.w
 80026a8:	f3af 8000 	nop.w
 80026ac:	f3af 8000 	nop.w

080026b0 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	f3af 8000 	nop.w
 80026b8:	f3af 8000 	nop.w
 80026bc:	f3af 8000 	nop.w

080026c0 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 80026c0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80026c2:	f100 070b 	add.w	r7, r0, #11
 80026c6:	463c      	mov	r4, r7
 80026c8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 80026ca:	fbb1 f6f2 	udiv	r6, r1, r2
 80026ce:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80026d2:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 80026d6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80026d8:	bfc8      	it	gt
 80026da:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 80026e4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 80026e8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80026ea:	2d00      	cmp	r5, #0
 80026ec:	d1ed      	bne.n	80026ca <ch_ltoa+0xa>
 80026ee:	1b3a      	subs	r2, r7, r4
 80026f0:	4402      	add	r2, r0
 80026f2:	e001      	b.n	80026f8 <ch_ltoa+0x38>
 80026f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 80026f8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80026fc:	4290      	cmp	r0, r2
 80026fe:	d1f9      	bne.n	80026f4 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 8002700:	bcf0      	pop	{r4, r5, r6, r7}
 8002702:	4770      	bx	lr
 8002704:	f3af 8000 	nop.w
 8002708:	f3af 8000 	nop.w
 800270c:	f3af 8000 	nop.w

08002710 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	b087      	sub	sp, #28
 8002716:	4616      	mov	r6, r2
 8002718:	f10d 030d 	add.w	r3, sp, #13
 800271c:	aa03      	add	r2, sp, #12
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	4682      	mov	sl, r0
 8002722:	460d      	mov	r5, r1
 8002724:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002726:	f04f 0900 	mov.w	r9, #0
 800272a:	4683      	mov	fp, r0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800272c:	7829      	ldrb	r1, [r5, #0]
 800272e:	1c6a      	adds	r2, r5, #1
    if (c == 0)
 8002730:	b169      	cbz	r1, 800274e <chvprintf+0x3e>
      return n;
    if (c != '%') {
 8002732:	2925      	cmp	r1, #37	; 0x25
 8002734:	d00f      	beq.n	8002756 <chvprintf+0x46>
      chSequentialStreamPut(chp, (uint8_t)c);
 8002736:	f8db 0000 	ldr.w	r0, [fp]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800273a:	4615      	mov	r5, r2
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800273c:	6884      	ldr	r4, [r0, #8]
 800273e:	4658      	mov	r0, fp
 8002740:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8002742:	7829      	ldrb	r1, [r5, #0]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8002744:	f109 0901 	add.w	r9, r9, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8002748:	1c6a      	adds	r2, r5, #1
    if (c == 0)
 800274a:	2900      	cmp	r1, #0
 800274c:	d1f1      	bne.n	8002732 <chvprintf+0x22>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800274e:	4648      	mov	r0, r9
 8002750:	b007      	add	sp, #28
 8002752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002756:	7869      	ldrb	r1, [r5, #1]
 8002758:	292d      	cmp	r1, #45	; 0x2d
 800275a:	bf03      	ittte	eq
 800275c:	78a9      	ldrbeq	r1, [r5, #2]
      fmt++;
 800275e:	1caa      	addeq	r2, r5, #2
      left_align = TRUE;
 8002760:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002764:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002768:	2930      	cmp	r1, #48	; 0x30
 800276a:	bf03      	ittte	eq
 800276c:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 800276e:	3201      	addeq	r2, #1
      filler = '0';
 8002770:	f04f 0830 	moveq.w	r8, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002774:	f04f 0820 	movne.w	r8, #32
 8002778:	1c50      	adds	r0, r2, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800277a:	2700      	movs	r7, #0
 800277c:	e005      	b.n	800278a <chvprintf+0x7a>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 800277e:	7833      	ldrb	r3, [r6, #0]
 8002780:	3604      	adds	r6, #4
 8002782:	7829      	ldrb	r1, [r5, #0]
      else
        break;
      width = width * 10 + c;
 8002784:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8002788:	3001      	adds	r0, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800278a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8002792:	4605      	mov	r5, r0
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8002794:	eb07 0287 	add.w	r2, r7, r7, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002798:	d9f3      	bls.n	8002782 <chvprintf+0x72>
        c -= '0';
      else if (c == '*')
 800279a:	292a      	cmp	r1, #42	; 0x2a
 800279c:	d0ef      	beq.n	800277e <chvprintf+0x6e>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800279e:	292e      	cmp	r1, #46	; 0x2e
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	d043      	beq.n	800282e <chvprintf+0x11e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80027a6:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 80027aa:	2a4c      	cmp	r2, #76	; 0x4c
 80027ac:	d04e      	beq.n	800284c <chvprintf+0x13c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80027ae:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
 80027b2:	2a34      	cmp	r2, #52	; 0x34
 80027b4:	f200 80f8 	bhi.w	80029a8 <chvprintf+0x298>
 80027b8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80027bc:	00f600ed 	.word	0x00f600ed
 80027c0:	00f600f6 	.word	0x00f600f6
 80027c4:	00ed00f6 	.word	0x00ed00f6
 80027c8:	00f600f6 	.word	0x00f600f6
 80027cc:	00f600f6 	.word	0x00f600f6
 80027d0:	00eb00f6 	.word	0x00eb00f6
 80027d4:	00f600f6 	.word	0x00f600f6
 80027d8:	00f600f6 	.word	0x00f600f6
 80027dc:	00b900f6 	.word	0x00b900f6
 80027e0:	00f600f6 	.word	0x00f600f6
 80027e4:	00f6006f 	.word	0x00f6006f
 80027e8:	00f600f6 	.word	0x00f600f6
 80027ec:	00f600f6 	.word	0x00f600f6
 80027f0:	00f600f6 	.word	0x00f600f6
 80027f4:	00f600f6 	.word	0x00f600f6
 80027f8:	00df00f6 	.word	0x00df00f6
 80027fc:	00f600ed 	.word	0x00f600ed
 8002800:	00f600f6 	.word	0x00f600f6
 8002804:	00ed00f6 	.word	0x00ed00f6
 8002808:	00f600f6 	.word	0x00f600f6
 800280c:	00f600f6 	.word	0x00f600f6
 8002810:	00eb00f6 	.word	0x00eb00f6
 8002814:	00f600f6 	.word	0x00f600f6
 8002818:	00bb00f6 	.word	0x00bb00f6
 800281c:	00b900f6 	.word	0x00b900f6
 8002820:	00f600f6 	.word	0x00f600f6
 8002824:	006f      	.short	0x006f
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8002826:	7833      	ldrb	r3, [r6, #0]
 8002828:	3604      	adds	r6, #4
        else
          break;
        precision *= 10;
        precision += c;
 800282a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800282e:	f815 1b01 	ldrb.w	r1, [r5], #1
        if (c >= '0' && c <= '9')
 8002832:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800283a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800283e:	d9f4      	bls.n	800282a <chvprintf+0x11a>
          c -= '0';
        else if (c == '*')
 8002840:	292a      	cmp	r1, #42	; 0x2a
 8002842:	d0f0      	beq.n	8002826 <chvprintf+0x116>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002844:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8002848:	2a4c      	cmp	r2, #76	; 0x4c
 800284a:	d1b0      	bne.n	80027ae <chvprintf+0x9e>
      is_long = TRUE;
      if (*fmt)
 800284c:	782c      	ldrb	r4, [r5, #0]
 800284e:	2c00      	cmp	r4, #0
 8002850:	f000 80aa 	beq.w	80029a8 <chvprintf+0x298>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002854:	f1a4 0244 	sub.w	r2, r4, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002858:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800285a:	2a34      	cmp	r2, #52	; 0x34
 800285c:	f200 80a3 	bhi.w	80029a6 <chvprintf+0x296>
 8002860:	e8df f002 	tbb	[pc, r2]
 8002864:	a1a1a199 	.word	0xa1a1a199
 8002868:	a1a199a1 	.word	0xa1a199a1
 800286c:	97a1a1a1 	.word	0x97a1a1a1
 8002870:	a1a1a1a1 	.word	0xa1a1a1a1
 8002874:	a1a165a1 	.word	0xa1a165a1
 8002878:	a1a1a11b 	.word	0xa1a1a11b
 800287c:	a1a1a1a1 	.word	0xa1a1a1a1
 8002880:	8ba1a1a1 	.word	0x8ba1a1a1
 8002884:	a1a1a199 	.word	0xa1a1a199
 8002888:	a1a199a1 	.word	0xa1a199a1
 800288c:	97a1a1a1 	.word	0x97a1a1a1
 8002890:	67a1a1a1 	.word	0x67a1a1a1
 8002894:	a1a165a1 	.word	0xa1a165a1
 8002898:	1b          	.byte	0x1b
 8002899:	00          	.byte	0x00
 800289a:	2210      	movs	r2, #16
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800289c:	6831      	ldr	r1, [r6, #0]
      p = ch_ltoa(p, l, c);
 800289e:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80028a0:	3604      	adds	r6, #4
      p = ch_ltoa(p, l, c);
 80028a2:	f7ff ff0d 	bl	80026c0 <ch_ltoa>
 80028a6:	ab03      	add	r3, sp, #12
 80028a8:	1ac0      	subs	r0, r0, r3
 80028aa:	1e43      	subs	r3, r0, #1
 80028ac:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80028ae:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80028b0:	1a3f      	subs	r7, r7, r0
 80028b2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      width = 0;
    if (left_align == FALSE)
 80028b6:	f1ba 0f00 	cmp.w	sl, #0
 80028ba:	d15a      	bne.n	8002972 <chvprintf+0x262>
      width = -width;
 80028bc:	f1c7 0a00 	rsb	sl, r7, #0
    if (width < 0) {
 80028c0:	f1ba 0f00 	cmp.w	sl, #0
 80028c4:	d078      	beq.n	80029b8 <chvprintf+0x2a8>
      if (*s == '-' && filler == '0') {
 80028c6:	7821      	ldrb	r1, [r4, #0]
 80028c8:	292d      	cmp	r1, #45	; 0x2d
 80028ca:	d07b      	beq.n	80029c4 <chvprintf+0x2b4>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 80028cc:	4657      	mov	r7, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80028ce:	f8db 3000 	ldr.w	r3, [fp]
 80028d2:	4641      	mov	r1, r8
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4658      	mov	r0, fp
 80028d8:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80028da:	3701      	adds	r7, #1
 80028dc:	d1f7      	bne.n	80028ce <chvprintf+0x1be>
    }
    while (--i >= 0) {
 80028de:	9b00      	ldr	r3, [sp, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	ebca 0909 	rsb	r9, sl, r9
 80028e6:	f6ff af21 	blt.w	800272c <chvprintf+0x1c>
 80028ea:	f8dd a000 	ldr.w	sl, [sp]
      chSequentialStreamPut(chp, (uint8_t)*s++);
 80028ee:	f8db 3000 	ldr.w	r3, [fp]
 80028f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f6:	689b      	ldr	r3, [r3, #8]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80028f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      chSequentialStreamPut(chp, (uint8_t)*s++);
 80028fc:	4658      	mov	r0, fp
 80028fe:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002900:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002904:	d1f3      	bne.n	80028ee <chvprintf+0x1de>
 8002906:	9b00      	ldr	r3, [sp, #0]
 8002908:	f109 0901 	add.w	r9, r9, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	bfa8      	it	ge
 8002910:	4499      	addge	r9, r3
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002912:	2f00      	cmp	r7, #0
 8002914:	f43f af0a 	beq.w	800272c <chvprintf+0x1c>
 8002918:	463c      	mov	r4, r7
      chSequentialStreamPut(chp, (uint8_t)filler);
 800291a:	f8db 3000 	ldr.w	r3, [fp]
 800291e:	4641      	mov	r1, r8
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4658      	mov	r0, fp
 8002924:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002926:	3c01      	subs	r4, #1
 8002928:	d1f7      	bne.n	800291a <chvprintf+0x20a>
 800292a:	44b9      	add	r9, r7
 800292c:	e6fe      	b.n	800272c <chvprintf+0x1c>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 800292e:	220a      	movs	r2, #10
 8002930:	e7b4      	b.n	800289c <chvprintf+0x18c>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002932:	6834      	ldr	r4, [r6, #0]
        s = "(null)";
 8002934:	4a37      	ldr	r2, [pc, #220]	; (8002a14 <chvprintf+0x304>)
 8002936:	2c00      	cmp	r4, #0
 8002938:	bf08      	it	eq
 800293a:	4614      	moveq	r4, r2
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800293c:	3604      	adds	r6, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800293e:	7822      	ldrb	r2, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002940:	2800      	cmp	r0, #0
 8002942:	d04e      	beq.n	80029e2 <chvprintf+0x2d2>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002944:	2a00      	cmp	r2, #0
 8002946:	d050      	beq.n	80029ea <chvprintf+0x2da>
 8002948:	3801      	subs	r0, #1
 800294a:	4622      	mov	r2, r4
 800294c:	e001      	b.n	8002952 <chvprintf+0x242>
 800294e:	1c43      	adds	r3, r0, #1
 8002950:	d004      	beq.n	800295c <chvprintf+0x24c>
 8002952:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002956:	3801      	subs	r0, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f8      	bne.n	800294e <chvprintf+0x23e>
 800295c:	1b10      	subs	r0, r2, r4
 800295e:	1e43      	subs	r3, r0, #1
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002960:	1a3f      	subs	r7, r7, r0
 8002962:	9300      	str	r3, [sp, #0]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002964:	f04f 0820 	mov.w	r8, #32
 8002968:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800296c:	f1ba 0f00 	cmp.w	sl, #0
 8002970:	d0a4      	beq.n	80028bc <chvprintf+0x1ac>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002972:	9b00      	ldr	r3, [sp, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dab8      	bge.n	80028ea <chvprintf+0x1da>
 8002978:	e7cb      	b.n	8002912 <chvprintf+0x202>
 800297a:	9b01      	ldr	r3, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800297c:	6832      	ldr	r2, [r6, #0]
 800297e:	f88d 200c 	strb.w	r2, [sp, #12]
 8002982:	4618      	mov	r0, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	3604      	adds	r6, #4
 8002988:	9300      	str	r3, [sp, #0]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 800298a:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800298e:	ac03      	add	r4, sp, #12
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
 8002990:	e78e      	b.n	80028b0 <chvprintf+0x1a0>
 8002992:	2208      	movs	r2, #8
 8002994:	e782      	b.n	800289c <chvprintf+0x18c>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002996:	6831      	ldr	r1, [r6, #0]
      if (l < 0) {
 8002998:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800299a:	f106 0604 	add.w	r6, r6, #4
      if (l < 0) {
 800299e:	db2f      	blt.n	8002a00 <chvprintf+0x2f0>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80029a0:	a803      	add	r0, sp, #12
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 80029a2:	220a      	movs	r2, #10
 80029a4:	e77d      	b.n	80028a2 <chvprintf+0x192>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80029a6:	4621      	mov	r1, r4
 80029a8:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80029aa:	f88d 100c 	strb.w	r1, [sp, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80029b4:	ac03      	add	r4, sp, #12
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
      break;
 80029b6:	e77b      	b.n	80028b0 <chvprintf+0x1a0>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80029b8:	9b00      	ldr	r3, [sp, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfa8      	it	ge
 80029be:	4657      	movge	r7, sl
 80029c0:	da93      	bge.n	80028ea <chvprintf+0x1da>
 80029c2:	e6b3      	b.n	800272c <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80029c4:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80029c8:	d180      	bne.n	80028cc <chvprintf+0x1bc>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 80029ca:	f8db 2000 	ldr.w	r2, [fp]
 80029ce:	4658      	mov	r0, fp
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	4790      	blx	r2
 80029d4:	9b00      	ldr	r3, [sp, #0]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	3401      	adds	r4, #1
        n++;
 80029da:	f109 0901 	add.w	r9, r9, #1
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	e774      	b.n	80028cc <chvprintf+0x1bc>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80029e2:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d1af      	bne.n	800294a <chvprintf+0x23a>
 80029ea:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80029ee:	f1ba 0f00 	cmp.w	sl, #0
 80029f2:	d10c      	bne.n	8002a0e <chvprintf+0x2fe>
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 0820 	mov.w	r8, #32
 80029fe:	e75d      	b.n	80028bc <chvprintf+0x1ac>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002a00:	222d      	movs	r2, #45	; 0x2d
        l = -l;
 8002a02:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002a04:	f88d 200c 	strb.w	r2, [sp, #12]
 8002a08:	f10d 000d 	add.w	r0, sp, #13
 8002a0c:	e7c9      	b.n	80029a2 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002a0e:	f04f 0820 	mov.w	r8, #32
 8002a12:	e77e      	b.n	8002912 <chvprintf+0x202>
 8002a14:	08004590 	.word	0x08004590
 8002a18:	f3af 8000 	nop.w
 8002a1c:	f3af 8000 	nop.w

08002a20 <adcerrorcallback>:

adcsample_t samples1[ADC_GRP1_NUM_CHANNELS * ADC_GRP1_BUF_DEPTH];
adcsample_t data1 [ADC_ARRAY_LENGH];


static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	f3af 8000 	nop.w
 8002a28:	f3af 8000 	nop.w
 8002a2c:	f3af 8000 	nop.w

08002a30 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8002a30:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <Thread1+0x28>)
 8002a34:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <Thread1+0x2c>)
 8002a36:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOC, 13);       /* Orange.  */
 8002a38:	4c09      	ldr	r4, [pc, #36]	; (8002a60 <Thread1+0x30>)
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002a40:	462e      	mov	r6, r5
 8002a42:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(1000);
 8002a44:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a48:	f7fe fba2 	bl	8001190 <chThdSleep>
    palClearPad(GPIOC, 13);     /* Orange.  */
 8002a4c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(1000);
 8002a4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a52:	f7fe fb9d 	bl	8001190 <chThdSleep>
 8002a56:	e7f4      	b.n	8002a42 <Thread1+0x12>
 8002a58:	20000c38 	.word	0x20000c38
 8002a5c:	080045a0 	.word	0x080045a0
 8002a60:	40020800 	.word	0x40020800
 8002a64:	f3af 8000 	nop.w
 8002a68:	f3af 8000 	nop.w
 8002a6c:	f3af 8000 	nop.w

08002a70 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002a70:	b40e      	push	{r1, r2, r3}
 8002a72:	b500      	push	{lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	aa03      	add	r2, sp, #12
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <chprintf.constprop.0+0x20>)
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002a7a:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002a7e:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002a80:	f7ff fe46 	bl	8002710 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8002a84:	b002      	add	sp, #8
 8002a86:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a8a:	b003      	add	sp, #12
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000ef0 	.word	0x20000ef0
 8002a94:	f3af 8000 	nop.w
 8002a98:	f3af 8000 	nop.w
 8002a9c:	f3af 8000 	nop.w

08002aa0 <intToStr>:
 
 // Converts a given integer x to string str[].  d is the number
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i = 0;
    while (x)
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b3a0      	cbz	r0, 8002b10 <intToStr+0x70>
    {
        str[i++] = (x%10) + '0';
 8002aa6:	4f1c      	ldr	r7, [pc, #112]	; (8002b18 <intToStr+0x78>)
 8002aa8:	1e4d      	subs	r5, r1, #1
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x)
 8002aaa:	2000      	movs	r0, #0
    {
        str[i++] = (x%10) + '0';
 8002aac:	fb87 4603 	smull	r4, r6, r7, r3
 8002ab0:	17dc      	asrs	r4, r3, #31
 8002ab2:	ebc4 04a6 	rsb	r4, r4, r6, asr #2
 8002ab6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8002aba:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 8002abe:	3330      	adds	r3, #48	; 0x30
 8002ac0:	f805 3f01 	strb.w	r3, [r5, #1]!
 8002ac4:	3001      	adds	r0, #1
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x)
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d1ef      	bne.n	8002aac <intToStr+0xc>
        x = x/10;
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002acc:	4290      	cmp	r0, r2
 8002ace:	da06      	bge.n	8002ade <intToStr+0x3e>
 8002ad0:	180b      	adds	r3, r1, r0
        str[i++] = '0';
 8002ad2:	2430      	movs	r4, #48	; 0x30
 8002ad4:	3001      	adds	r0, #1
        x = x/10;
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002ad6:	4282      	cmp	r2, r0
        str[i++] = '0';
 8002ad8:	f803 4b01 	strb.w	r4, [r3], #1
        x = x/10;
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002adc:	dcfa      	bgt.n	8002ad4 <intToStr+0x34>
#include<math.h>
 
// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
 8002ade:	1e42      	subs	r2, r0, #1
    while (i<j)
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	bfd8      	it	le
 8002ae4:	4603      	movle	r3, r0
 8002ae6:	dd10      	ble.n	8002b0a <intToStr+0x6a>
 8002ae8:	1e4e      	subs	r6, r1, #1
 8002aea:	4637      	mov	r7, r6
 8002aec:	4603      	mov	r3, r0
 8002aee:	180d      	adds	r5, r1, r0
 8002af0:	2400      	movs	r4, #0
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++; j--;
 8002af2:	3401      	adds	r4, #1
 8002af4:	3a01      	subs	r2, #1
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
    {
        temp = str[i];
 8002af6:	f817 ef01 	ldrb.w	lr, [r7, #1]!
        str[i] = str[j];
 8002afa:	f815 cc01 	ldrb.w	ip, [r5, #-1]
 8002afe:	f806 cf01 	strb.w	ip, [r6, #1]!
 
// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
 8002b02:	4294      	cmp	r4, r2
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
 8002b04:	f805 ed01 	strb.w	lr, [r5, #-1]!
 
// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
 8002b08:	dbf3      	blt.n	8002af2 <intToStr+0x52>
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
 
    reverse(str, i);
    str[i] = '\0';
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	54ca      	strb	r2, [r1, r3]
    return i;
}
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x = x/10;
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	dcdd      	bgt.n	8002ad0 <intToStr+0x30>
 8002b14:	e7f9      	b.n	8002b0a <intToStr+0x6a>
 8002b16:	bf00      	nop
 8002b18:	66666667 	.word	0x66666667
 8002b1c:	f3af 8000 	nop.w

08002b20 <ftoa>:
    return i;
}
 
// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	ed2d 8b02 	vpush	{d8}
    // Extract integer part
    int ipart = (int)n;
 8002b26:	eebd 8ac0 	vcvt.s32.f32	s16, s0
    return i;
}
 
// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	b082      	sub	sp, #8
 
    // Extract floating part
    float fpart = n - (float)ipart;
 
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002b30:	ee18 0a10 	vmov	r0, s16
 8002b34:	4631      	mov	r1, r6
 8002b36:	2200      	movs	r2, #0
 8002b38:	f7ff ffb2 	bl	8002aa0 <intToStr>
 
    // check for display option after point
    if (afterpoint != 0)
 8002b3c:	b91d      	cbnz	r5, 8002b46 <ftoa+0x26>
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
 8002b3e:	b002      	add	sp, #8
 8002b40:	ecbd 8b02 	vpop	{d8}
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
    int i = intToStr(ipart, res, 0);
 
    // check for display option after point
    if (afterpoint != 0)
    {
        res[i] = '.';  // add dot
 8002b46:	232e      	movs	r3, #46	; 0x2e
 8002b48:	5433      	strb	r3, [r6, r0]
 8002b4a:	4604      	mov	r4, r0
 
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	eef0 8a40 	vmov.f32	s17, s0
 8002b52:	f7fd fd1f 	bl	8000594 <__aeabi_i2d>
 8002b56:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002ba8 <ftoa+0x88>
 8002b5a:	ec41 0b11 	vmov	d1, r0, r1
 8002b5e:	f000 fa47 	bl	8002ff0 <pow>
 8002b62:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002b66:	ec53 2b10 	vmov	r2, r3, d0
 8002b6a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8002b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8002b72:	ee17 0a90 	vmov	r0, s15
 8002b76:	f7fd fd1f 	bl	80005b8 <__aeabi_f2d>
 8002b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b7e:	f7fd fd6f 	bl	8000660 <__aeabi_dmul>
 
        intToStr((int)fpart, res + i + 1, afterpoint);
 8002b82:	f7fe f80d 	bl	8000ba0 <__aeabi_d2f>
 8002b86:	ee07 0a90 	vmov	s15, r0
 8002b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b8e:	3401      	adds	r4, #1
 8002b90:	4434      	add	r4, r6
 8002b92:	ee17 0a90 	vmov	r0, s15
 8002b96:	462a      	mov	r2, r5
 8002b98:	4621      	mov	r1, r4
    }
}
 8002b9a:	b002      	add	sp, #8
 8002b9c:	ecbd 8b02 	vpop	{d8}
 8002ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 
        intToStr((int)fpart, res + i + 1, afterpoint);
 8002ba4:	f7ff bf7c 	b.w	8002aa0 <intToStr>
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40240000 	.word	0x40240000

08002bb0 <lcd_setio>:


/*
 * LCD set I/Os
 */
void lcd_setio(){
 8002bb0:	b510      	push	{r4, lr}

  palSetPadMode(GPIOE, EN, PAL_MODE_OUTPUT_PUSHPULL); //EN
 8002bb2:	4c11      	ldr	r4, [pc, #68]	; (8002bf8 <lcd_setio+0x48>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff fbc1 	bl	8002340 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, RS, PAL_MODE_OUTPUT_PUSHPULL); //RS
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	480e      	ldr	r0, [pc, #56]	; (8002bfc <lcd_setio+0x4c>)
 8002bc4:	f7ff fbbc 	bl	8002340 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOE, DB4, PAL_MODE_OUTPUT_PUSHPULL); //DB4
 8002bc8:	4620      	mov	r0, r4
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2102      	movs	r1, #2
 8002bce:	f7ff fbb7 	bl	8002340 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB5, PAL_MODE_OUTPUT_PUSHPULL); //DB5
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	f7ff fbb2 	bl	8002340 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB6, PAL_MODE_OUTPUT_PUSHPULL); //DB6
 8002bdc:	4620      	mov	r0, r4
 8002bde:	2201      	movs	r2, #1
 8002be0:	2108      	movs	r1, #8
 8002be2:	f7ff fbad 	bl	8002340 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB7, PAL_MODE_OUTPUT_PUSHPULL); //DB7
 8002be6:	4620      	mov	r0, r4
 8002be8:	2201      	movs	r2, #1
 8002bea:	2110      	movs	r1, #16
 8002bec:	f7ff fba8 	bl	8002340 <_pal_lld_setgroupmode>

  palWritePort(GPIOE, 0);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6163      	str	r3, [r4, #20]
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40020400 	.word	0x40020400

08002c00 <lcd_pulsen>:
	palWritePort(GPIOE, (data<<1));
}


//Pulse Enable Pin
void lcd_pulsen(){
 8002c00:	b538      	push	{r3, r4, r5, lr}

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
 8002c02:	4d06      	ldr	r5, [pc, #24]	; (8002c1c <lcd_pulsen+0x1c>)
 8002c04:	2401      	movs	r4, #1
	chThdSleepMicroseconds(40);
 8002c06:	4620      	mov	r0, r4

//Pulse Enable Pin
void lcd_pulsen(){

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
 8002c08:	832c      	strh	r4, [r5, #24]
	chThdSleepMicroseconds(40);
 8002c0a:	f7fe fac1 	bl	8001190 <chThdSleep>
	palClearPad(GPIOE, EN);
 8002c0e:	836c      	strh	r4, [r5, #26]
	chThdSleepMicroseconds(1);
 8002c10:	4620      	mov	r0, r4
	
}
 8002c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
	chThdSleepMicroseconds(40);
	palClearPad(GPIOE, EN);
	chThdSleepMicroseconds(1);
 8002c16:	f7fe babb 	b.w	8001190 <chThdSleep>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <lcd_sendByte>:
	
}
void lcd_sendByte(uint8_t c){
 8002c20:	b538      	push	{r3, r4, r5, lr}
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8002c22:	4d07      	ldr	r5, [pc, #28]	; (8002c40 <lcd_sendByte+0x20>)
	chThdSleepMicroseconds(40);
	palClearPad(GPIOE, EN);
	chThdSleepMicroseconds(1);
	
}
void lcd_sendByte(uint8_t c){
 8002c24:	4604      	mov	r4, r0
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8002c26:	0903      	lsrs	r3, r0, #4
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	f004 040f 	and.w	r4, r4, #15
 8002c2e:	616b      	str	r3, [r5, #20]
 8002c30:	0064      	lsls	r4, r4, #1

	uint8_t x;
	x = c >> 4;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();
 8002c32:	f7ff ffe5 	bl	8002c00 <lcd_pulsen>
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8002c36:	616c      	str	r4, [r5, #20]
	x = c & 0x0f;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();

}
 8002c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_pulsen();
	
	x = c & 0x0f;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();
 8002c3c:	f7ff bfe0 	b.w	8002c00 <lcd_pulsen>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	f3af 8000 	nop.w
 8002c48:	f3af 8000 	nop.w
 8002c4c:	f3af 8000 	nop.w

08002c50 <lcd_init>:
	chThdSleepMicroseconds(50);
}
/*
 * LCD init
 */
void lcd_init(){
 8002c50:	b538      	push	{r3, r4, r5, lr}
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002c52:	4c22      	ldr	r4, [pc, #136]	; (8002cdc <lcd_init+0x8c>)
 8002c54:	2520      	movs	r5, #32
}
/*
 * LCD init
 */
void lcd_init(){
	chThdSleepMilliseconds(100);
 8002c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c5a:	f7fe fa99 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002c5e:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002c60:	2033      	movs	r0, #51	; 0x33
 8002c62:	f7ff ffdd 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7fe fa92 	bl	8001190 <chThdSleep>
 * LCD init
 */
void lcd_init(){
	chThdSleepMilliseconds(100);
	lcd_cmd(0x33);
	chThdSleepMilliseconds(5);
 8002c6c:	2032      	movs	r0, #50	; 0x32
 8002c6e:	f7fe fa8f 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002c72:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002c74:	2032      	movs	r0, #50	; 0x32
 8002c76:	f7ff ffd3 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fe fa88 	bl	8001190 <chThdSleep>
void lcd_init(){
	chThdSleepMilliseconds(100);
	lcd_cmd(0x33);
	chThdSleepMilliseconds(5);
	lcd_cmd(0x32);
	chThdSleepMilliseconds(5);
 8002c80:	2032      	movs	r0, #50	; 0x32
 8002c82:	f7fe fa85 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002c86:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002c88:	2028      	movs	r0, #40	; 0x28
 8002c8a:	f7ff ffc9 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe fa7e 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002c94:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002c96:	2008      	movs	r0, #8
 8002c98:	f7ff ffc2 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fe fa77 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002ca2:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7ff ffbb 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7fe fa70 	bl	8001190 <chThdSleep>
	lcd_cmd(0x32);
	chThdSleepMilliseconds(5);
	lcd_cmd(0x28);
	lcd_cmd(0x08);
	lcd_cmd(0x01);
	chThdSleepMilliseconds(3);
 8002cb0:	201e      	movs	r0, #30
 8002cb2:	f7fe fa6d 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002cb6:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002cb8:	2006      	movs	r0, #6
 8002cba:	f7ff ffb1 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7fe fa66 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002cc4:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f7ff ffaa 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7fe fa5f 	bl	8001190 <chThdSleep>
	chThdSleepMilliseconds(3);

	lcd_cmd(0x06);

	lcd_cmd(0x0F);
	chThdSleepMilliseconds(5);
 8002cd2:	2032      	movs	r0, #50	; 0x32
}
 8002cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chThdSleepMilliseconds(3);

	lcd_cmd(0x06);

	lcd_cmd(0x0F);
	chThdSleepMilliseconds(5);
 8002cd8:	f7fe ba5a 	b.w	8001190 <chThdSleep>
 8002cdc:	40020400 	.word	0x40020400

08002ce0 <lcd_printf>:
}


void lcd_printf(const char *text)
{
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	4604      	mov	r4, r0
 while (*text) // string ends with 0x00
 8002ce4:	7800      	ldrb	r0, [r0, #0]
 8002ce6:	b168      	cbz	r0, 8002d04 <lcd_printf+0x24>

}

void lcd_sendChar(uint8_t c){

	palSetPad(GPIOB, RS);
 8002ce8:	2620      	movs	r6, #32
 8002cea:	4d07      	ldr	r5, [pc, #28]	; (8002d08 <lcd_printf+0x28>)
 8002cec:	4637      	mov	r7, r6
 8002cee:	832f      	strh	r7, [r5, #24]
	lcd_sendByte(c);
 8002cf0:	f7ff ff96 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7fe fa4b 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
 8002cfa:	836e      	strh	r6, [r5, #26]
}


void lcd_printf(const char *text)
{
 while (*text) // string ends with 0x00
 8002cfc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d1f4      	bne.n	8002cee <lcd_printf+0xe>
 8002d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	f3af 8000 	nop.w

08002d10 <chprint_float>:
	chThdSleepMilliseconds(1000);
}


//Print a Float Number formated as a String
void chprint_float(char str[]){
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	1e44      	subs	r4, r0, #1
 8002d14:	1d45      	adds	r5, r0, #5
 8002d16:	e003      	b.n	8002d20 <chprint_float+0x10>
	int i=0;
	for(i=0; i<6; i++){
		if(str[i]>='0' && str[i]<='9' || str[i]=='.' && str[i]!=13){
 8002d18:	2b2e      	cmp	r3, #46	; 0x2e
 8002d1a:	d00a      	beq.n	8002d32 <chprint_float+0x22>


//Print a Float Number formated as a String
void chprint_float(char str[]){
	int i=0;
	for(i=0; i<6; i++){
 8002d1c:	42ac      	cmp	r4, r5
 8002d1e:	d00c      	beq.n	8002d3a <chprint_float+0x2a>
		if(str[i]>='0' && str[i]<='9' || str[i]=='.' && str[i]!=13){
 8002d20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
		chprintf((BaseSequentialStream *) &SD1, "%c", str[i]);
 8002d24:	4905      	ldr	r1, [pc, #20]	; (8002d3c <chprint_float+0x2c>)
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <chprint_float+0x30>)

//Print a Float Number formated as a String
void chprint_float(char str[]){
	int i=0;
	for(i=0; i<6; i++){
		if(str[i]>='0' && str[i]<='9' || str[i]=='.' && str[i]!=13){
 8002d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d2c:	2a09      	cmp	r2, #9
		chprintf((BaseSequentialStream *) &SD1, "%c", str[i]);
 8002d2e:	461a      	mov	r2, r3

//Print a Float Number formated as a String
void chprint_float(char str[]){
	int i=0;
	for(i=0; i<6; i++){
		if(str[i]>='0' && str[i]<='9' || str[i]=='.' && str[i]!=13){
 8002d30:	d8f2      	bhi.n	8002d18 <chprint_float+0x8>
		chprintf((BaseSequentialStream *) &SD1, "%c", str[i]);
 8002d32:	f7ff fe9d 	bl	8002a70 <chprintf.constprop.0>


//Print a Float Number formated as a String
void chprint_float(char str[]){
	int i=0;
	for(i=0; i<6; i++){
 8002d36:	42ac      	cmp	r4, r5
 8002d38:	d1f2      	bne.n	8002d20 <chprint_float+0x10>
		if(str[i]>='0' && str[i]<='9' || str[i]=='.' && str[i]!=13){
		chprintf((BaseSequentialStream *) &SD1, "%c", str[i]);
		}
	}
}
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	080045a8 	.word	0x080045a8
 8002d40:	20000ef0 	.word	0x20000ef0
 8002d44:	f3af 8000 	nop.w
 8002d48:	f3af 8000 	nop.w
 8002d4c:	f3af 8000 	nop.w

08002d50 <main>:


/*
 * Application entry point.
 */
int main(void) {
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d54:	ed2d 8b02 	vpush	{d8}
 8002d58:	b093      	sub	sp, #76	; 0x4c
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8002d5a:	f7fe fcd1 	bl	8001700 <halInit>
 8002d5e:	2600      	movs	r6, #0
  chSysInit();
 8002d60:	f7fd ff8e 	bl	8000c80 <chSysInit>
 8002d64:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002d68:	b662      	cpsie	i
  
  /*
   * Enabling interrupts, initialization done.
   */
  osalSysEnable();
  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL);
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d70:	4885      	ldr	r0, [pc, #532]	; (8002f88 <main+0x238>)
 8002d72:	4c86      	ldr	r4, [pc, #536]	; (8002f8c <main+0x23c>)
 8002d74:	4d86      	ldr	r5, [pc, #536]	; (8002f90 <main+0x240>)
	char a[20];
	
	chprintf((BaseSequentialStream *) &SD1, "GET /~sssilvar/Web_Platform/php/db.php?va=[");		
	for(i=0; i<=PERIOD_SAMPLES; i++){
		//~ ftoa((float)data1[i]*3.3/4096, a, 1);
		ftoa((float)data1[i]*3.3/4096, a, 1);
 8002d76:	eddf 8a87 	vldr	s17, [pc, #540]	; 8002f94 <main+0x244>
  
  /*
   * Enabling interrupts, initialization done.
   */
  osalSysEnable();
  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL);
 8002d7a:	f7ff fae1 	bl	8002340 <_pal_lld_setgroupmode>

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD1, NULL);
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4885      	ldr	r0, [pc, #532]	; (8002f98 <main+0x248>)
 8002d82:	f7fe fd95 	bl	80018b0 <sdStart>
   palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7)); // UART1 TX
 8002d86:	f240 3282 	movw	r2, #898	; 0x382
 8002d8a:	2140      	movs	r1, #64	; 0x40
 8002d8c:	4883      	ldr	r0, [pc, #524]	; (8002f9c <main+0x24c>)
 8002d8e:	f7ff fad7 	bl	8002340 <_pal_lld_setgroupmode>
   palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7)); // UART1 RX
 8002d92:	f240 3282 	movw	r2, #898	; 0x382
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	4880      	ldr	r0, [pc, #512]	; (8002f9c <main+0x24c>)
 8002d9a:	f7ff fad1 	bl	8002340 <_pal_lld_setgroupmode>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8002d9e:	4b80      	ldr	r3, [pc, #512]	; (8002fa0 <main+0x250>)
 8002da0:	9600      	str	r6, [sp, #0]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002da8:	487e      	ldr	r0, [pc, #504]	; (8002fa4 <main+0x254>)
 8002daa:	f7fe f9b9 	bl	8001120 <chThdCreateStatic>
  
  /*
   * Initializes the ADC driver 1 and enable the thermal sensor.
   * The pin PC0 on the port GPIOC is programmed as analog input.
   */
  adcInit();
 8002dae:	f7fe fcdf 	bl	8001770 <adcInit>
  adcStart(&ADCD1, NULL);
 8002db2:	4631      	mov	r1, r6
 8002db4:	487c      	ldr	r0, [pc, #496]	; (8002fa8 <main+0x258>)
 8002db6:	f7fe fcf3 	bl	80017a0 <adcStart>
  adcSTM32EnableTSVREFE();
 8002dba:	f7ff fa31 	bl	8002220 <adcSTM32EnableTSVREFE>
  palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	487a      	ldr	r0, [pc, #488]	; (8002fac <main+0x25c>)
 8002dc4:	f7ff fabc 	bl	8002340 <_pal_lld_setgroupmode>
  
  /*
   * LCD Config
   */
	lcd_setio();
 8002dc8:	f7ff fef2 	bl	8002bb0 <lcd_setio>
	lcd_init();
 8002dcc:	f7ff ff40 	bl	8002c50 <lcd_init>
   * sleeping in a loop and check the button state.
   */
   int x =0;
  while (true) {
	  
	  lcd_printf(" ");
 8002dd0:	4877      	ldr	r0, [pc, #476]	; (8002fb0 <main+0x260>)
 8002dd2:	4e78      	ldr	r6, [pc, #480]	; (8002fb4 <main+0x264>)
 8002dd4:	f7ff ff84 	bl	8002ce0 <lcd_printf>
 8002dd8:	f506 6700 	add.w	r7, r6, #2048	; 0x800
	  double rms = 0;
	  double mean = 0;
	  
	  
	for(i=0; i<ADC_ARRAY_LENGH; i++) {
		adcStartConversion(&ADCD1, &adcgrpcfg1,samples1, ADC_GRP1_BUF_DEPTH);
 8002ddc:	2304      	movs	r3, #4
 8002dde:	4a6b      	ldr	r2, [pc, #428]	; (8002f8c <main+0x23c>)
 8002de0:	4975      	ldr	r1, [pc, #468]	; (8002fb8 <main+0x268>)
 8002de2:	4871      	ldr	r0, [pc, #452]	; (8002fa8 <main+0x258>)
 8002de4:	f7fe fcec 	bl	80017c0 <adcStartConversion>
		chThdSleepMicroseconds(17);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7fe f9d1 	bl	8001190 <chThdSleep>
		data1[i] = (samples1[0] + samples1[1] + samples1[2] + samples1[3])/4;
 8002dee:	8820      	ldrh	r0, [r4, #0]
 8002df0:	8863      	ldrh	r3, [r4, #2]
 8002df2:	88a1      	ldrh	r1, [r4, #4]
 8002df4:	88e2      	ldrh	r2, [r4, #6]
 8002df6:	4403      	add	r3, r0
 8002df8:	440b      	add	r3, r1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	109b      	asrs	r3, r3, #2
 8002dfe:	f826 3f02 	strh.w	r3, [r6, #2]!
	  long int avg = 0;
	  double rms = 0;
	  double mean = 0;
	  
	  
	for(i=0; i<ADC_ARRAY_LENGH; i++) {
 8002e02:	42b7      	cmp	r7, r6
 8002e04:	d1ea      	bne.n	8002ddc <main+0x8c>
	}
	
	
	
	// Data Array (to put in database) Creation and Print by UART
	chprintf((BaseSequentialStream *) &SD1, "AT+CIPSTART=\"TCP\",\"192.168.0.15\",80\r\n");		
 8002e06:	496d      	ldr	r1, [pc, #436]	; (8002fbc <main+0x26c>)
 8002e08:	4863      	ldr	r0, [pc, #396]	; (8002f98 <main+0x248>)
 8002e0a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8002fe8 <main+0x298>
 8002e0e:	f7ff fe2f 	bl	8002a70 <chprintf.constprop.0>
	chThdSleepMilliseconds(2000);
 8002e12:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002e16:	f7fe f9bb 	bl	8001190 <chThdSleep>
	chprintf((BaseSequentialStream *) &SD1, "AT+CIPSEND=395\r\n");		
 8002e1a:	4969      	ldr	r1, [pc, #420]	; (8002fc0 <main+0x270>)
 8002e1c:	485e      	ldr	r0, [pc, #376]	; (8002f98 <main+0x248>)
 8002e1e:	f7ff fe27 	bl	8002a70 <chprintf.constprop.0>
	chThdSleepMilliseconds(2000);
 8002e22:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002e26:	f7fe f9b3 	bl	8001190 <chThdSleep>
 8002e2a:	f50a 6b93 	add.w	fp, sl, #1176	; 0x498
 8002e2e:	4653      	mov	r3, sl
   int x =0;
  while (true) {
	  
	  lcd_printf(" ");
	  int i=0;
	  long int avg = 0;
 8002e30:	2200      	movs	r2, #0
	chThdSleepMilliseconds(2000);
	
	
    //Mean Calculate
    for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
		avg = avg + data1[i];
 8002e32:	f833 1f02 	ldrh.w	r1, [r3, #2]!
	chprintf((BaseSequentialStream *) &SD1, "AT+CIPSEND=395\r\n");		
	chThdSleepMilliseconds(2000);
	
	
    //Mean Calculate
    for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
 8002e36:	459b      	cmp	fp, r3
		avg = avg + data1[i];
 8002e38:	440a      	add	r2, r1
	chprintf((BaseSequentialStream *) &SD1, "AT+CIPSEND=395\r\n");		
	chThdSleepMilliseconds(2000);
	
	
    //Mean Calculate
    for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
 8002e3a:	d1fa      	bne.n	8002e32 <main+0xe2>
		avg = avg + data1[i];
	}
	mean = (double)(avg/(PERIOD_SAMPLES*7)) * (3.3)/4096;
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <main+0x274>)
 8002e3e:	17d0      	asrs	r0, r2, #31
 8002e40:	fb83 3202 	smull	r3, r2, r3, r2
 8002e44:	ebc0 2022 	rsb	r0, r0, r2, asr #8
 8002e48:	f7fd fba4 	bl	8000594 <__aeabi_i2d>
 }
}

void lcd_putint(float x){
	char res[64];
	ftoa(x,res,2);
 8002e4c:	a34a      	add	r3, pc, #296	; (adr r3, 8002f78 <main+0x228>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	4680      	mov	r8, r0
 8002e54:	4689      	mov	r9, r1
 8002e56:	f7fd fc03 	bl	8000660 <__aeabi_dmul>
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <main+0x278>)
 8002e5e:	f7fd fbff 	bl	8000660 <__aeabi_dmul>
 8002e62:	f7fd fe9d 	bl	8000ba0 <__aeabi_d2f>
 8002e66:	2102      	movs	r1, #2
 8002e68:	ee00 0a10 	vmov	s0, r0
 8002e6c:	a802      	add	r0, sp, #8
 8002e6e:	f7ff fe57 	bl	8002b20 <ftoa>
	
	lcd_printf(res);
 8002e72:	a802      	add	r0, sp, #8
 8002e74:	f7ff ff34 	bl	8002ce0 <lcd_printf>
	lcd_putint(mean);
	
	// Print spaces
	lcd_printf("  ");
 8002e78:	4854      	ldr	r0, [pc, #336]	; (8002fcc <main+0x27c>)
 8002e7a:	f7ff ff31 	bl	8002ce0 <lcd_printf>
  while (true) {
	  
	  lcd_printf(" ");
	  int i=0;
	  long int avg = 0;
	  double rms = 0;
 8002e7e:	2600      	movs	r6, #0
 8002e80:	2700      	movs	r7, #0
	// Print spaces
	lcd_printf("  ");
	
	// RMS Calculate
	for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
		rms = rms + pow(((data1[i]- (double)(avg/(PERIOD_SAMPLES*7)))* (3.3)/4096),2);
 8002e82:	f83a 0f02 	ldrh.w	r0, [sl, #2]!
 8002e86:	f7fd fb85 	bl	8000594 <__aeabi_i2d>
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	f7fd fa33 	bl	80002f8 <__aeabi_dsub>
 8002e92:	a339      	add	r3, pc, #228	; (adr r3, 8002f78 <main+0x228>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fbe2 	bl	8000660 <__aeabi_dmul>
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <main+0x278>)
 8002ea0:	f7fd fbde 	bl	8000660 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	f7fd fbda 	bl	8000660 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	f7fd fa22 	bl	80002fc <__adddf3>
	
	// Print spaces
	lcd_printf("  ");
	
	// RMS Calculate
	for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
 8002eb8:	45d3      	cmp	fp, sl
		rms = rms + pow(((data1[i]- (double)(avg/(PERIOD_SAMPLES*7)))* (3.3)/4096),2);
 8002eba:	4606      	mov	r6, r0
 8002ebc:	460f      	mov	r7, r1
	
	// Print spaces
	lcd_printf("  ");
	
	// RMS Calculate
	for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
 8002ebe:	d1e0      	bne.n	8002e82 <main+0x132>
		rms = rms + pow(((data1[i]- (double)(avg/(PERIOD_SAMPLES*7)))* (3.3)/4096),2);
	}
	mean = sqrt((double)(rms/(84*7)));
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <main+0x280>)
	char a[20];
	
	chprintf((BaseSequentialStream *) &SD1, "GET /~sssilvar/Web_Platform/php/db.php?va=[");		
	for(i=0; i<=PERIOD_SAMPLES; i++){
		//~ ftoa((float)data1[i]*3.3/4096, a, 1);
		ftoa((float)data1[i]*3.3/4096, a, 1);
 8002ec4:	ed9f 8a43 	vldr	s16, [pc, #268]	; 8002fd4 <main+0x284>
	
	// RMS Calculate
	for(i=PERIOD_SAMPLES; i<PERIOD_SAMPLES*8; i++){
		rms = rms + pow(((data1[i]- (double)(avg/(PERIOD_SAMPLES*7)))* (3.3)/4096),2);
	}
	mean = sqrt((double)(rms/(84*7)));
 8002ec8:	f7fd fcf4 	bl	80008b4 <__aeabi_ddiv>
 8002ecc:	ec41 0b10 	vmov	d0, r0, r1
 8002ed0:	f000 fa36 	bl	8003340 <sqrt>
 }
}

void lcd_putint(float x){
	char res[64];
	ftoa(x,res,2);
 8002ed4:	a32a      	add	r3, pc, #168	; (adr r3, 8002f80 <main+0x230>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	ec51 0b10 	vmov	r0, r1, d0
 8002ede:	f7fd fbbf 	bl	8000660 <__aeabi_dmul>
 8002ee2:	f7fd fe5d 	bl	8000ba0 <__aeabi_d2f>
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	ee00 0a10 	vmov	s0, r0
 8002eec:	a802      	add	r0, sp, #8
 8002eee:	f7ff fe17 	bl	8002b20 <ftoa>
	
	lcd_printf(res);
 8002ef2:	a802      	add	r0, sp, #8
 8002ef4:	f7ff fef4 	bl	8002ce0 <lcd_printf>
	lcd_putint(mean*189.6);
	
	char a[20];
	
	chprintf((BaseSequentialStream *) &SD1, "GET /~sssilvar/Web_Platform/php/db.php?va=[");		
 8002ef8:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <main+0x288>)
 8002efa:	4827      	ldr	r0, [pc, #156]	; (8002f98 <main+0x248>)
 8002efc:	f7ff fdb8 	bl	8002a70 <chprintf.constprop.0>
	for(i=0; i<=PERIOD_SAMPLES; i++){
		//~ ftoa((float)data1[i]*3.3/4096, a, 1);
		ftoa((float)data1[i]*3.3/4096, a, 1);
 8002f00:	882b      	ldrh	r3, [r5, #0]
 8002f02:	4d23      	ldr	r5, [pc, #140]	; (8002f90 <main+0x240>)
 8002f04:	ee00 3a10 	vmov	s0, r3
 8002f08:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002f0c:	a802      	add	r0, sp, #8
 8002f0e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002f12:	2101      	movs	r1, #1
 8002f14:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002f18:	f7ff fe02 	bl	8002b20 <ftoa>
		chprint_float(a);
 8002f1c:	a802      	add	r0, sp, #8
 8002f1e:	462e      	mov	r6, r5
 8002f20:	f105 07a8 	add.w	r7, r5, #168	; 0xa8
 8002f24:	f7ff fef4 	bl	8002d10 <chprint_float>
		if(i<PERIOD_SAMPLES){
			chprintf((BaseSequentialStream *) &SD1, ",");
 8002f28:	492c      	ldr	r1, [pc, #176]	; (8002fdc <main+0x28c>)
 8002f2a:	481b      	ldr	r0, [pc, #108]	; (8002f98 <main+0x248>)
 8002f2c:	f7ff fda0 	bl	8002a70 <chprintf.constprop.0>
	char a[20];
	
	chprintf((BaseSequentialStream *) &SD1, "GET /~sssilvar/Web_Platform/php/db.php?va=[");		
	for(i=0; i<=PERIOD_SAMPLES; i++){
		//~ ftoa((float)data1[i]*3.3/4096, a, 1);
		ftoa((float)data1[i]*3.3/4096, a, 1);
 8002f30:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 8002f34:	ee00 3a10 	vmov	s0, r3
 8002f38:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002f42:	a802      	add	r0, sp, #8
 8002f44:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002f48:	f7ff fdea 	bl	8002b20 <ftoa>
		chprint_float(a);
 8002f4c:	a802      	add	r0, sp, #8
 8002f4e:	f7ff fedf 	bl	8002d10 <chprint_float>
		if(i<PERIOD_SAMPLES){
 8002f52:	42b7      	cmp	r7, r6
 8002f54:	d1e8      	bne.n	8002f28 <main+0x1d8>
			chprintf((BaseSequentialStream *) &SD1, ",");
		}
	}
	chprintf((BaseSequentialStream *) &SD1, "] HTTP/1.0\r\n\r\n");
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <main+0x290>)
 8002f58:	480f      	ldr	r0, [pc, #60]	; (8002f98 <main+0x248>)
 8002f5a:	f7ff fd89 	bl	8002a70 <chprintf.constprop.0>
	
	chThdSleepMilliseconds(15000);
 8002f5e:	4821      	ldr	r0, [pc, #132]	; (8002fe4 <main+0x294>)
 8002f60:	f7fe f916 	bl	8001190 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <main+0x24c>)
 8002f66:	2220      	movs	r2, #32
 8002f68:	835a      	strh	r2, [r3, #26]
	lcd_sendByte(c);
 8002f6a:	2002      	movs	r0, #2
 8002f6c:	f7ff fe58 	bl	8002c20 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fe f90d 	bl	8001190 <chThdSleep>
		chThdSleepMilliseconds(10);
	}
	*/
	lcd_cmd(0x02); // Go Home LCD
	//lcd_init();
}
 8002f76:	e72b      	b.n	8002dd0 <main+0x80>
 8002f78:	60000000 	.word	0x60000000
 8002f7c:	400a6666 	.word	0x400a6666
 8002f80:	40000000 	.word	0x40000000
 8002f84:	4067b333 	.word	0x4067b333
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	20001158 	.word	0x20001158
 8002f90:	20001160 	.word	0x20001160
 8002f94:	40533333 	.word	0x40533333
 8002f98:	20000ef0 	.word	0x20000ef0
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	08002a31 	.word	0x08002a31
 8002fa4:	20000f88 	.word	0x20000f88
 8002fa8:	20000ebc 	.word	0x20000ebc
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	080045ac 	.word	0x080045ac
 8002fb4:	2000115e 	.word	0x2000115e
 8002fb8:	08004630 	.word	0x08004630
 8002fbc:	080045b0 	.word	0x080045b0
 8002fc0:	080045d8 	.word	0x080045d8
 8002fc4:	6f74ae27 	.word	0x6f74ae27
 8002fc8:	3f300000 	.word	0x3f300000
 8002fcc:	080045ec 	.word	0x080045ec
 8002fd0:	40826000 	.word	0x40826000
 8002fd4:	39800000 	.word	0x39800000
 8002fd8:	080045f0 	.word	0x080045f0
 8002fdc:	0800462c 	.word	0x0800462c
 8002fe0:	0800461c 	.word	0x0800461c
 8002fe4:	000249f0 	.word	0x000249f0
 8002fe8:	20001206 	.word	0x20001206
 8002fec:	f3af 8000 	nop.w

08002ff0 <pow>:
 8002ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	ed2d 8b06 	vpush	{d8-d10}
 8002ff8:	eeb0 aa40 	vmov.f32	s20, s0
 8002ffc:	eef0 aa60 	vmov.f32	s21, s1
 8003000:	eeb0 9a41 	vmov.f32	s18, s2
 8003004:	eef0 9a61 	vmov.f32	s19, s3
 8003008:	4cb5      	ldr	r4, [pc, #724]	; (80032e0 <pow+0x2f0>)
 800300a:	b08b      	sub	sp, #44	; 0x2c
 800300c:	f000 f9f8 	bl	8003400 <__ieee754_pow>
 8003010:	f994 3000 	ldrsb.w	r3, [r4]
 8003014:	eeb0 8a40 	vmov.f32	s16, s0
 8003018:	eef0 8a60 	vmov.f32	s17, s1
 800301c:	3301      	adds	r3, #1
 800301e:	d006      	beq.n	800302e <pow+0x3e>
 8003020:	eeb0 0a49 	vmov.f32	s0, s18
 8003024:	eef0 0a69 	vmov.f32	s1, s19
 8003028:	f001 f852 	bl	80040d0 <__fpclassifyd>
 800302c:	b940      	cbnz	r0, 8003040 <pow+0x50>
 800302e:	eeb0 0a48 	vmov.f32	s0, s16
 8003032:	eef0 0a68 	vmov.f32	s1, s17
 8003036:	b00b      	add	sp, #44	; 0x2c
 8003038:	ecbd 8b06 	vpop	{d8-d10}
 800303c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003040:	eeb0 0a4a 	vmov.f32	s0, s20
 8003044:	eef0 0a6a 	vmov.f32	s1, s21
 8003048:	f001 f842 	bl	80040d0 <__fpclassifyd>
 800304c:	4605      	mov	r5, r0
 800304e:	bb48      	cbnz	r0, 80030a4 <pow+0xb4>
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	ec51 0b19 	vmov	r0, r1, d9
 8003058:	f7fd fd70 	bl	8000b3c <__aeabi_dcmpeq>
 800305c:	2800      	cmp	r0, #0
 800305e:	d0e6      	beq.n	800302e <pow+0x3e>
 8003060:	4aa0      	ldr	r2, [pc, #640]	; (80032e4 <pow+0x2f4>)
 8003062:	f994 3000 	ldrsb.w	r3, [r4]
 8003066:	9508      	str	r5, [sp, #32]
 8003068:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 80032d8 <pow+0x2e8>
 800306c:	2101      	movs	r1, #1
 800306e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	ed8d ab02 	vstr	d10, [sp, #8]
 8003078:	ed8d 9b04 	vstr	d9, [sp, #16]
 800307c:	ed8d 0b06 	vstr	d0, [sp, #24]
 8003080:	d0d9      	beq.n	8003036 <pow+0x46>
 8003082:	2b02      	cmp	r3, #2
 8003084:	d0d7      	beq.n	8003036 <pow+0x46>
 8003086:	4668      	mov	r0, sp
 8003088:	f001 f852 	bl	8004130 <matherr>
 800308c:	2800      	cmp	r0, #0
 800308e:	f000 8094 	beq.w	80031ba <pow+0x1ca>
 8003092:	9b08      	ldr	r3, [sp, #32]
 8003094:	b11b      	cbz	r3, 800309e <pow+0xae>
 8003096:	f001 f98b 	bl	80043b0 <__errno>
 800309a:	9b08      	ldr	r3, [sp, #32]
 800309c:	6003      	str	r3, [r0, #0]
 800309e:	ed9d 0b06 	vldr	d0, [sp, #24]
 80030a2:	e7c8      	b.n	8003036 <pow+0x46>
 80030a4:	2600      	movs	r6, #0
 80030a6:	2700      	movs	r7, #0
 80030a8:	ec51 0b1a 	vmov	r0, r1, d10
 80030ac:	4632      	mov	r2, r6
 80030ae:	463b      	mov	r3, r7
 80030b0:	f7fd fd44 	bl	8000b3c <__aeabi_dcmpeq>
 80030b4:	b1d8      	cbz	r0, 80030ee <pow+0xfe>
 80030b6:	4632      	mov	r2, r6
 80030b8:	463b      	mov	r3, r7
 80030ba:	ec51 0b19 	vmov	r0, r1, d9
 80030be:	f7fd fd3d 	bl	8000b3c <__aeabi_dcmpeq>
 80030c2:	4605      	mov	r5, r0
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d04f      	beq.n	8003168 <pow+0x178>
 80030c8:	4a86      	ldr	r2, [pc, #536]	; (80032e4 <pow+0x2f4>)
 80030ca:	f994 3000 	ldrsb.w	r3, [r4]
 80030ce:	9201      	str	r2, [sp, #4]
 80030d0:	2101      	movs	r1, #1
 80030d2:	2200      	movs	r2, #0
 80030d4:	ed8d ab02 	vstr	d10, [sp, #8]
 80030d8:	ed8d 9b04 	vstr	d9, [sp, #16]
 80030dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80030e0:	9100      	str	r1, [sp, #0]
 80030e2:	9208      	str	r2, [sp, #32]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ce      	beq.n	8003086 <pow+0x96>
 80030e8:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 80032d8 <pow+0x2e8>
 80030ec:	e7a3      	b.n	8003036 <pow+0x46>
 80030ee:	eeb0 0a48 	vmov.f32	s0, s16
 80030f2:	eef0 0a68 	vmov.f32	s1, s17
 80030f6:	f000 ffe3 	bl	80040c0 <finite>
 80030fa:	4605      	mov	r5, r0
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d061      	beq.n	80031c4 <pow+0x1d4>
 8003100:	2600      	movs	r6, #0
 8003102:	2700      	movs	r7, #0
 8003104:	ec51 0b18 	vmov	r0, r1, d8
 8003108:	4632      	mov	r2, r6
 800310a:	463b      	mov	r3, r7
 800310c:	f7fd fd16 	bl	8000b3c <__aeabi_dcmpeq>
 8003110:	2800      	cmp	r0, #0
 8003112:	d08c      	beq.n	800302e <pow+0x3e>
 8003114:	eeb0 0a4a 	vmov.f32	s0, s20
 8003118:	eef0 0a6a 	vmov.f32	s1, s21
 800311c:	f000 ffd0 	bl	80040c0 <finite>
 8003120:	2800      	cmp	r0, #0
 8003122:	d084      	beq.n	800302e <pow+0x3e>
 8003124:	eeb0 0a49 	vmov.f32	s0, s18
 8003128:	eef0 0a69 	vmov.f32	s1, s19
 800312c:	f000 ffc8 	bl	80040c0 <finite>
 8003130:	2800      	cmp	r0, #0
 8003132:	f43f af7c 	beq.w	800302e <pow+0x3e>
 8003136:	f994 3000 	ldrsb.w	r3, [r4]
 800313a:	4a6a      	ldr	r2, [pc, #424]	; (80032e4 <pow+0x2f4>)
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	2104      	movs	r1, #4
 8003140:	2200      	movs	r2, #0
 8003142:	2b02      	cmp	r3, #2
 8003144:	ed8d ab02 	vstr	d10, [sp, #8]
 8003148:	ed8d 9b04 	vstr	d9, [sp, #16]
 800314c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003150:	9100      	str	r1, [sp, #0]
 8003152:	9208      	str	r2, [sp, #32]
 8003154:	d06b      	beq.n	800322e <pow+0x23e>
 8003156:	4668      	mov	r0, sp
 8003158:	f000 ffea 	bl	8004130 <matherr>
 800315c:	2800      	cmp	r0, #0
 800315e:	d066      	beq.n	800322e <pow+0x23e>
 8003160:	9b08      	ldr	r3, [sp, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d09b      	beq.n	800309e <pow+0xae>
 8003166:	e796      	b.n	8003096 <pow+0xa6>
 8003168:	eeb0 0a49 	vmov.f32	s0, s18
 800316c:	eef0 0a69 	vmov.f32	s1, s19
 8003170:	f000 ffa6 	bl	80040c0 <finite>
 8003174:	2800      	cmp	r0, #0
 8003176:	f43f af5a 	beq.w	800302e <pow+0x3e>
 800317a:	4632      	mov	r2, r6
 800317c:	463b      	mov	r3, r7
 800317e:	ec51 0b19 	vmov	r0, r1, d9
 8003182:	f7fd fce5 	bl	8000b50 <__aeabi_dcmplt>
 8003186:	2800      	cmp	r0, #0
 8003188:	f43f af51 	beq.w	800302e <pow+0x3e>
 800318c:	4a55      	ldr	r2, [pc, #340]	; (80032e4 <pow+0x2f4>)
 800318e:	7823      	ldrb	r3, [r4, #0]
 8003190:	9508      	str	r5, [sp, #32]
 8003192:	2101      	movs	r1, #1
 8003194:	ed8d ab02 	vstr	d10, [sp, #8]
 8003198:	ed8d 9b04 	vstr	d9, [sp, #16]
 800319c:	e88d 0006 	stmia.w	sp, {r1, r2}
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d041      	beq.n	8003228 <pow+0x238>
 80031a4:	4950      	ldr	r1, [pc, #320]	; (80032e8 <pow+0x2f8>)
 80031a6:	2000      	movs	r0, #0
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80031ae:	d135      	bne.n	800321c <pow+0x22c>
 80031b0:	f001 f8fe 	bl	80043b0 <__errno>
 80031b4:	2321      	movs	r3, #33	; 0x21
 80031b6:	6003      	str	r3, [r0, #0]
 80031b8:	e7d2      	b.n	8003160 <pow+0x170>
 80031ba:	f001 f8f9 	bl	80043b0 <__errno>
 80031be:	2321      	movs	r3, #33	; 0x21
 80031c0:	6003      	str	r3, [r0, #0]
 80031c2:	e766      	b.n	8003092 <pow+0xa2>
 80031c4:	eeb0 0a4a 	vmov.f32	s0, s20
 80031c8:	eef0 0a6a 	vmov.f32	s1, s21
 80031cc:	f000 ff78 	bl	80040c0 <finite>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d095      	beq.n	8003100 <pow+0x110>
 80031d4:	eeb0 0a49 	vmov.f32	s0, s18
 80031d8:	eef0 0a69 	vmov.f32	s1, s19
 80031dc:	f000 ff70 	bl	80040c0 <finite>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d08d      	beq.n	8003100 <pow+0x110>
 80031e4:	eeb0 0a48 	vmov.f32	s0, s16
 80031e8:	eef0 0a68 	vmov.f32	s1, s17
 80031ec:	f000 ff70 	bl	80040d0 <__fpclassifyd>
 80031f0:	bb10      	cbnz	r0, 8003238 <pow+0x248>
 80031f2:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <pow+0x2f4>)
 80031f4:	7824      	ldrb	r4, [r4, #0]
 80031f6:	9008      	str	r0, [sp, #32]
 80031f8:	2201      	movs	r2, #1
 80031fa:	ed8d ab02 	vstr	d10, [sp, #8]
 80031fe:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003202:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003206:	b17c      	cbz	r4, 8003228 <pow+0x238>
 8003208:	4632      	mov	r2, r6
 800320a:	463b      	mov	r3, r7
 800320c:	4630      	mov	r0, r6
 800320e:	4639      	mov	r1, r7
 8003210:	f7fd fb50 	bl	80008b4 <__aeabi_ddiv>
 8003214:	2c02      	cmp	r4, #2
 8003216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800321a:	d0c9      	beq.n	80031b0 <pow+0x1c0>
 800321c:	4668      	mov	r0, sp
 800321e:	f000 ff87 	bl	8004130 <matherr>
 8003222:	2800      	cmp	r0, #0
 8003224:	d19c      	bne.n	8003160 <pow+0x170>
 8003226:	e7c3      	b.n	80031b0 <pow+0x1c0>
 8003228:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800322c:	e7f6      	b.n	800321c <pow+0x22c>
 800322e:	f001 f8bf 	bl	80043b0 <__errno>
 8003232:	2322      	movs	r3, #34	; 0x22
 8003234:	6003      	str	r3, [r0, #0]
 8003236:	e793      	b.n	8003160 <pow+0x170>
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <pow+0x2f4>)
 800323a:	f994 3000 	ldrsb.w	r3, [r4]
 800323e:	9508      	str	r5, [sp, #32]
 8003240:	2103      	movs	r1, #3
 8003242:	ed8d ab02 	vstr	d10, [sp, #8]
 8003246:	ed8d 9b04 	vstr	d9, [sp, #16]
 800324a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800324e:	b9bb      	cbnz	r3, 8003280 <pow+0x290>
 8003250:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80032f4 <pow+0x304>
 8003254:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 8003258:	4632      	mov	r2, r6
 800325a:	463b      	mov	r3, r7
 800325c:	ec51 0b1a 	vmov	r0, r1, d10
 8003260:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003264:	f7fd fc74 	bl	8000b50 <__aeabi_dcmplt>
 8003268:	b9e0      	cbnz	r0, 80032a4 <pow+0x2b4>
 800326a:	4668      	mov	r0, sp
 800326c:	f000 ff60 	bl	8004130 <matherr>
 8003270:	2800      	cmp	r0, #0
 8003272:	f47f af0e 	bne.w	8003092 <pow+0xa2>
 8003276:	f001 f89b 	bl	80043b0 <__errno>
 800327a:	2322      	movs	r3, #34	; 0x22
 800327c:	6003      	str	r3, [r0, #0]
 800327e:	e708      	b.n	8003092 <pow+0xa2>
 8003280:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80032f8 <pow+0x308>
 8003284:	f04f 0800 	mov.w	r8, #0
 8003288:	4632      	mov	r2, r6
 800328a:	463b      	mov	r3, r7
 800328c:	ec51 0b1a 	vmov	r0, r1, d10
 8003290:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003294:	f7fd fc5c 	bl	8000b50 <__aeabi_dcmplt>
 8003298:	bb80      	cbnz	r0, 80032fc <pow+0x30c>
 800329a:	f994 3000 	ldrsb.w	r3, [r4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d1e3      	bne.n	800326a <pow+0x27a>
 80032a2:	e7e8      	b.n	8003276 <pow+0x286>
 80032a4:	2200      	movs	r2, #0
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <pow+0x2fc>)
 80032a8:	ec51 0b19 	vmov	r0, r1, d9
 80032ac:	f7fd f9d8 	bl	8000660 <__aeabi_dmul>
 80032b0:	4606      	mov	r6, r0
 80032b2:	460f      	mov	r7, r1
 80032b4:	ec47 6b10 	vmov	d0, r6, r7
 80032b8:	f000 ff4a 	bl	8004150 <rint>
 80032bc:	4630      	mov	r0, r6
 80032be:	ec53 2b10 	vmov	r2, r3, d0
 80032c2:	4639      	mov	r1, r7
 80032c4:	f7fd fc3a 	bl	8000b3c <__aeabi_dcmpeq>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d1e6      	bne.n	800329a <pow+0x2aa>
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <pow+0x300>)
 80032ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80032d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032d6:	e7e0      	b.n	800329a <pow+0x2aa>
 80032d8:	00000000 	.word	0x00000000
 80032dc:	3ff00000 	.word	0x3ff00000
 80032e0:	20000800 	.word	0x20000800
 80032e4:	08004660 	.word	0x08004660
 80032e8:	fff00000 	.word	0xfff00000
 80032ec:	3fe00000 	.word	0x3fe00000
 80032f0:	c7efffff 	.word	0xc7efffff
 80032f4:	47efffff 	.word	0x47efffff
 80032f8:	7ff00000 	.word	0x7ff00000
 80032fc:	2200      	movs	r2, #0
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <pow+0x340>)
 8003300:	ec51 0b19 	vmov	r0, r1, d9
 8003304:	f7fd f9ac 	bl	8000660 <__aeabi_dmul>
 8003308:	4606      	mov	r6, r0
 800330a:	460f      	mov	r7, r1
 800330c:	ec47 6b10 	vmov	d0, r6, r7
 8003310:	f000 ff1e 	bl	8004150 <rint>
 8003314:	4630      	mov	r0, r6
 8003316:	ec53 2b10 	vmov	r2, r3, d0
 800331a:	4639      	mov	r1, r7
 800331c:	f7fd fc0e 	bl	8000b3c <__aeabi_dcmpeq>
 8003320:	2800      	cmp	r0, #0
 8003322:	d1ba      	bne.n	800329a <pow+0x2aa>
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <pow+0x344>)
 8003326:	2200      	movs	r2, #0
 8003328:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800332c:	e7b5      	b.n	800329a <pow+0x2aa>
 800332e:	bf00      	nop
 8003330:	3fe00000 	.word	0x3fe00000
 8003334:	fff00000 	.word	0xfff00000
	...

08003340 <sqrt>:
 8003340:	b5d0      	push	{r4, r6, r7, lr}
 8003342:	ed2d 8b04 	vpush	{d8-d9}
 8003346:	eeb0 9a40 	vmov.f32	s18, s0
 800334a:	eef0 9a60 	vmov.f32	s19, s1
 800334e:	4c29      	ldr	r4, [pc, #164]	; (80033f4 <sqrt+0xb4>)
 8003350:	b08a      	sub	sp, #40	; 0x28
 8003352:	f000 fddd 	bl	8003f10 <__ieee754_sqrt>
 8003356:	f994 3000 	ldrsb.w	r3, [r4]
 800335a:	eeb0 8a40 	vmov.f32	s16, s0
 800335e:	eef0 8a60 	vmov.f32	s17, s1
 8003362:	3301      	adds	r3, #1
 8003364:	d00f      	beq.n	8003386 <sqrt+0x46>
 8003366:	eeb0 0a49 	vmov.f32	s0, s18
 800336a:	eef0 0a69 	vmov.f32	s1, s19
 800336e:	f000 feaf 	bl	80040d0 <__fpclassifyd>
 8003372:	b140      	cbz	r0, 8003386 <sqrt+0x46>
 8003374:	2600      	movs	r6, #0
 8003376:	2700      	movs	r7, #0
 8003378:	ec51 0b19 	vmov	r0, r1, d9
 800337c:	4632      	mov	r2, r6
 800337e:	463b      	mov	r3, r7
 8003380:	f7fd fbe6 	bl	8000b50 <__aeabi_dcmplt>
 8003384:	b938      	cbnz	r0, 8003396 <sqrt+0x56>
 8003386:	eeb0 0a48 	vmov.f32	s0, s16
 800338a:	eef0 0a68 	vmov.f32	s1, s17
 800338e:	b00a      	add	sp, #40	; 0x28
 8003390:	ecbd 8b04 	vpop	{d8-d9}
 8003394:	bdd0      	pop	{r4, r6, r7, pc}
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <sqrt+0xb8>)
 8003398:	7824      	ldrb	r4, [r4, #0]
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	2300      	movs	r3, #0
 80033a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 80033a4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	9308      	str	r3, [sp, #32]
 80033ac:	b96c      	cbnz	r4, 80033ca <sqrt+0x8a>
 80033ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80033b2:	4668      	mov	r0, sp
 80033b4:	f000 febc 	bl	8004130 <matherr>
 80033b8:	b188      	cbz	r0, 80033de <sqrt+0x9e>
 80033ba:	9b08      	ldr	r3, [sp, #32]
 80033bc:	b9a3      	cbnz	r3, 80033e8 <sqrt+0xa8>
 80033be:	ed9d 0b06 	vldr	d0, [sp, #24]
 80033c2:	b00a      	add	sp, #40	; 0x28
 80033c4:	ecbd 8b04 	vpop	{d8-d9}
 80033c8:	bdd0      	pop	{r4, r6, r7, pc}
 80033ca:	4632      	mov	r2, r6
 80033cc:	463b      	mov	r3, r7
 80033ce:	4630      	mov	r0, r6
 80033d0:	4639      	mov	r1, r7
 80033d2:	f7fd fa6f 	bl	80008b4 <__aeabi_ddiv>
 80033d6:	2c02      	cmp	r4, #2
 80033d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80033dc:	d1e9      	bne.n	80033b2 <sqrt+0x72>
 80033de:	f000 ffe7 	bl	80043b0 <__errno>
 80033e2:	2321      	movs	r3, #33	; 0x21
 80033e4:	6003      	str	r3, [r0, #0]
 80033e6:	e7e8      	b.n	80033ba <sqrt+0x7a>
 80033e8:	f000 ffe2 	bl	80043b0 <__errno>
 80033ec:	9b08      	ldr	r3, [sp, #32]
 80033ee:	6003      	str	r3, [r0, #0]
 80033f0:	e7e5      	b.n	80033be <sqrt+0x7e>
 80033f2:	bf00      	nop
 80033f4:	20000800 	.word	0x20000800
 80033f8:	08004670 	.word	0x08004670
 80033fc:	00000000 	.word	0x00000000

08003400 <__ieee754_pow>:
 8003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003404:	ec51 0b11 	vmov	r0, r1, d1
 8003408:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800340c:	ea58 0400 	orrs.w	r4, r8, r0
 8003410:	b093      	sub	sp, #76	; 0x4c
 8003412:	d03c      	beq.n	800348e <__ieee754_pow+0x8e>
 8003414:	ec53 2b10 	vmov	r2, r3, d0
 8003418:	4e6d      	ldr	r6, [pc, #436]	; (80035d0 <__ieee754_pow+0x1d0>)
 800341a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800341e:	42b4      	cmp	r4, r6
 8003420:	ee10 aa10 	vmov	sl, s0
 8003424:	461d      	mov	r5, r3
 8003426:	dc2b      	bgt.n	8003480 <__ieee754_pow+0x80>
 8003428:	4689      	mov	r9, r1
 800342a:	ee11 ea10 	vmov	lr, s2
 800342e:	d026      	beq.n	800347e <__ieee754_pow+0x7e>
 8003430:	45b0      	cmp	r8, r6
 8003432:	dc25      	bgt.n	8003480 <__ieee754_pow+0x80>
 8003434:	4e66      	ldr	r6, [pc, #408]	; (80035d0 <__ieee754_pow+0x1d0>)
 8003436:	45b0      	cmp	r8, r6
 8003438:	d077      	beq.n	800352a <__ieee754_pow+0x12a>
 800343a:	2d00      	cmp	r5, #0
 800343c:	4616      	mov	r6, r2
 800343e:	461f      	mov	r7, r3
 8003440:	e9cd 0100 	strd	r0, r1, [sp]
 8003444:	db75      	blt.n	8003532 <__ieee754_pow+0x132>
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	f1be 0f00 	cmp.w	lr, #0
 800344e:	d12d      	bne.n	80034ac <__ieee754_pow+0xac>
 8003450:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <__ieee754_pow+0x1d0>)
 8003452:	4598      	cmp	r8, r3
 8003454:	f000 8089 	beq.w	800356a <__ieee754_pow+0x16a>
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <__ieee754_pow+0x1d4>)
 800345a:	4598      	cmp	r8, r3
 800345c:	d05e      	beq.n	800351c <__ieee754_pow+0x11c>
 800345e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003462:	f000 83de 	beq.w	8003c22 <__ieee754_pow+0x822>
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <__ieee754_pow+0x1d8>)
 8003468:	4599      	cmp	r9, r3
 800346a:	d11f      	bne.n	80034ac <__ieee754_pow+0xac>
 800346c:	2d00      	cmp	r5, #0
 800346e:	db1d      	blt.n	80034ac <__ieee754_pow+0xac>
 8003470:	ec47 6b10 	vmov	d0, r6, r7
 8003474:	b013      	add	sp, #76	; 0x4c
 8003476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	f000 bd49 	b.w	8003f10 <__ieee754_sqrt>
 800347e:	b15a      	cbz	r2, 8003498 <__ieee754_pow+0x98>
 8003480:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003484:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003488:	ea54 030a 	orrs.w	r3, r4, sl
 800348c:	d106      	bne.n	800349c <__ieee754_pow+0x9c>
 800348e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 80035b8 <__ieee754_pow+0x1b8>
 8003492:	b013      	add	sp, #76	; 0x4c
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	45a0      	cmp	r8, r4
 800349a:	ddcb      	ble.n	8003434 <__ieee754_pow+0x34>
 800349c:	484f      	ldr	r0, [pc, #316]	; (80035dc <__ieee754_pow+0x1dc>)
 800349e:	b013      	add	sp, #76	; 0x4c
 80034a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	f000 be4c 	b.w	8004140 <nan>
 80034a8:	f04f 0b00 	mov.w	fp, #0
 80034ac:	ec47 6b10 	vmov	d0, r6, r7
 80034b0:	f000 fdfe 	bl	80040b0 <fabs>
 80034b4:	ec51 0b10 	vmov	r0, r1, d0
 80034b8:	f1ba 0f00 	cmp.w	sl, #0
 80034bc:	d01e      	beq.n	80034fc <__ieee754_pow+0xfc>
 80034be:	0fed      	lsrs	r5, r5, #31
 80034c0:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80034c4:	ea5b 030a 	orrs.w	r3, fp, sl
 80034c8:	d063      	beq.n	8003592 <__ieee754_pow+0x192>
 80034ca:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <__ieee754_pow+0x1e0>)
 80034cc:	4598      	cmp	r8, r3
 80034ce:	f340 808d 	ble.w	80035ec <__ieee754_pow+0x1ec>
 80034d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80034d6:	4598      	cmp	r8, r3
 80034d8:	f340 8438 	ble.w	8003d4c <__ieee754_pow+0x94c>
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <__ieee754_pow+0x1e4>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	dd62      	ble.n	80035a8 <__ieee754_pow+0x1a8>
 80034e2:	f1b9 0f00 	cmp.w	r9, #0
 80034e6:	dd62      	ble.n	80035ae <__ieee754_pow+0x1ae>
 80034e8:	a335      	add	r3, pc, #212	; (adr r3, 80035c0 <__ieee754_pow+0x1c0>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd f8b5 	bl	8000660 <__aeabi_dmul>
 80034f6:	ec41 0b10 	vmov	d0, r0, r1
 80034fa:	e7ca      	b.n	8003492 <__ieee754_pow+0x92>
 80034fc:	b124      	cbz	r4, 8003508 <__ieee754_pow+0x108>
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <__ieee754_pow+0x1d4>)
 8003500:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003504:	429a      	cmp	r2, r3
 8003506:	d1da      	bne.n	80034be <__ieee754_pow+0xbe>
 8003508:	f1b9 0f00 	cmp.w	r9, #0
 800350c:	f2c0 83cb 	blt.w	8003ca6 <__ieee754_pow+0x8a6>
 8003510:	2d00      	cmp	r5, #0
 8003512:	f2c0 8374 	blt.w	8003bfe <__ieee754_pow+0x7fe>
 8003516:	ec41 0b10 	vmov	d0, r0, r1
 800351a:	e7ba      	b.n	8003492 <__ieee754_pow+0x92>
 800351c:	f1b9 0f00 	cmp.w	r9, #0
 8003520:	f2c0 847a 	blt.w	8003e18 <__ieee754_pow+0xa18>
 8003524:	ec47 6b10 	vmov	d0, r6, r7
 8003528:	e7b3      	b.n	8003492 <__ieee754_pow+0x92>
 800352a:	f1be 0f00 	cmp.w	lr, #0
 800352e:	d084      	beq.n	800343a <__ieee754_pow+0x3a>
 8003530:	e7a6      	b.n	8003480 <__ieee754_pow+0x80>
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <__ieee754_pow+0x1e8>)
 8003534:	4598      	cmp	r8, r3
 8003536:	dc29      	bgt.n	800358c <__ieee754_pow+0x18c>
 8003538:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800353c:	4598      	cmp	r8, r3
 800353e:	dd82      	ble.n	8003446 <__ieee754_pow+0x46>
 8003540:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003544:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003548:	2b14      	cmp	r3, #20
 800354a:	f340 847f 	ble.w	8003e4c <__ieee754_pow+0xa4c>
 800354e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003552:	fa2e f203 	lsr.w	r2, lr, r3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	459e      	cmp	lr, r3
 800355c:	f47f af73 	bne.w	8003446 <__ieee754_pow+0x46>
 8003560:	f002 0201 	and.w	r2, r2, #1
 8003564:	f1c2 0b02 	rsb	fp, r2, #2
 8003568:	e76f      	b.n	800344a <__ieee754_pow+0x4a>
 800356a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800356e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003572:	ea53 030a 	orrs.w	r3, r3, sl
 8003576:	d08a      	beq.n	800348e <__ieee754_pow+0x8e>
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <__ieee754_pow+0x1e4>)
 800357a:	429c      	cmp	r4, r3
 800357c:	f340 8385 	ble.w	8003c8a <__ieee754_pow+0x88a>
 8003580:	f1b9 0f00 	cmp.w	r9, #0
 8003584:	db13      	blt.n	80035ae <__ieee754_pow+0x1ae>
 8003586:	ed9d 0b00 	vldr	d0, [sp]
 800358a:	e782      	b.n	8003492 <__ieee754_pow+0x92>
 800358c:	f04f 0b02 	mov.w	fp, #2
 8003590:	e75b      	b.n	800344a <__ieee754_pow+0x4a>
 8003592:	4632      	mov	r2, r6
 8003594:	463b      	mov	r3, r7
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f7fc fead 	bl	80002f8 <__aeabi_dsub>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	f7fd f987 	bl	80008b4 <__aeabi_ddiv>
 80035a6:	e7b6      	b.n	8003516 <__ieee754_pow+0x116>
 80035a8:	f1b9 0f00 	cmp.w	r9, #0
 80035ac:	db9c      	blt.n	80034e8 <__ieee754_pow+0xe8>
 80035ae:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80035c8 <__ieee754_pow+0x1c8>
 80035b2:	e76e      	b.n	8003492 <__ieee754_pow+0x92>
 80035b4:	f3af 8000 	nop.w
 80035b8:	00000000 	.word	0x00000000
 80035bc:	3ff00000 	.word	0x3ff00000
 80035c0:	8800759c 	.word	0x8800759c
 80035c4:	7e37e43c 	.word	0x7e37e43c
	...
 80035d0:	7ff00000 	.word	0x7ff00000
 80035d4:	3ff00000 	.word	0x3ff00000
 80035d8:	3fe00000 	.word	0x3fe00000
 80035dc:	080045e8 	.word	0x080045e8
 80035e0:	41e00000 	.word	0x41e00000
 80035e4:	3fefffff 	.word	0x3fefffff
 80035e8:	433fffff 	.word	0x433fffff
 80035ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	da05      	bge.n	8003602 <__ieee754_pow+0x202>
 80035f6:	4bd6      	ldr	r3, [pc, #856]	; (8003950 <__ieee754_pow+0x550>)
 80035f8:	f7fd f832 	bl	8000660 <__aeabi_dmul>
 80035fc:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003600:	460c      	mov	r4, r1
 8003602:	1523      	asrs	r3, r4, #20
 8003604:	4ed3      	ldr	r6, [pc, #844]	; (8003954 <__ieee754_pow+0x554>)
 8003606:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800360a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800360e:	4413      	add	r3, r2
 8003610:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003614:	42b4      	cmp	r4, r6
 8003616:	461a      	mov	r2, r3
 8003618:	930d      	str	r3, [sp, #52]	; 0x34
 800361a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800361e:	f340 8349 	ble.w	8003cb4 <__ieee754_pow+0x8b4>
 8003622:	4bcd      	ldr	r3, [pc, #820]	; (8003958 <__ieee754_pow+0x558>)
 8003624:	429c      	cmp	r4, r3
 8003626:	f340 842d 	ble.w	8003e84 <__ieee754_pow+0xa84>
 800362a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; 80038f8 <__ieee754_pow+0x4f8>
 800362e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003632:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003636:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 8003900 <__ieee754_pow+0x500>
 800363a:	4613      	mov	r3, r2
 800363c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003640:	3301      	adds	r3, #1
 8003642:	930d      	str	r3, [sp, #52]	; 0x34
 8003644:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003648:	f04f 0800 	mov.w	r8, #0
 800364c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003650:	4629      	mov	r1, r5
 8003652:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003656:	f7fc fe4f 	bl	80002f8 <__aeabi_dsub>
 800365a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800365e:	4606      	mov	r6, r0
 8003660:	460f      	mov	r7, r1
 8003662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003666:	f7fc fe49 	bl	80002fc <__adddf3>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	2000      	movs	r0, #0
 8003670:	49ba      	ldr	r1, [pc, #744]	; (800395c <__ieee754_pow+0x55c>)
 8003672:	f7fd f91f 	bl	80008b4 <__aeabi_ddiv>
 8003676:	4603      	mov	r3, r0
 8003678:	460c      	mov	r4, r1
 800367a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4630      	mov	r0, r6
 8003684:	4639      	mov	r1, r7
 8003686:	f7fc ffeb 	bl	8000660 <__aeabi_dmul>
 800368a:	106b      	asrs	r3, r5, #1
 800368c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003690:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003694:	eb03 0508 	add.w	r5, r3, r8
 8003698:	460a      	mov	r2, r1
 800369a:	2300      	movs	r3, #0
 800369c:	4601      	mov	r1, r0
 800369e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80036a8:	2400      	movs	r4, #0
 80036aa:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80036ae:	462b      	mov	r3, r5
 80036b0:	4622      	mov	r2, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fc ffd3 	bl	8000660 <__aeabi_dmul>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4630      	mov	r0, r6
 80036c0:	4639      	mov	r1, r7
 80036c2:	f7fc fe19 	bl	80002f8 <__aeabi_dsub>
 80036c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036ca:	4606      	mov	r6, r0
 80036cc:	460f      	mov	r7, r1
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f7fc fe11 	bl	80002f8 <__aeabi_dsub>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80036de:	f7fc fe0b 	bl	80002f8 <__aeabi_dsub>
 80036e2:	4642      	mov	r2, r8
 80036e4:	464b      	mov	r3, r9
 80036e6:	f7fc ffbb 	bl	8000660 <__aeabi_dmul>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4630      	mov	r0, r6
 80036f0:	4639      	mov	r1, r7
 80036f2:	f7fc fe01 	bl	80002f8 <__aeabi_dsub>
 80036f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80036fa:	f7fc ffb1 	bl	8000660 <__aeabi_dmul>
 80036fe:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003702:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003706:	4622      	mov	r2, r4
 8003708:	462b      	mov	r3, r5
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fc ffa7 	bl	8000660 <__aeabi_dmul>
 8003712:	a37d      	add	r3, pc, #500	; (adr r3, 8003908 <__ieee754_pow+0x508>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	4604      	mov	r4, r0
 800371a:	460d      	mov	r5, r1
 800371c:	f7fc ffa0 	bl	8000660 <__aeabi_dmul>
 8003720:	a37b      	add	r3, pc, #492	; (adr r3, 8003910 <__ieee754_pow+0x510>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fc fde9 	bl	80002fc <__adddf3>
 800372a:	4622      	mov	r2, r4
 800372c:	462b      	mov	r3, r5
 800372e:	f7fc ff97 	bl	8000660 <__aeabi_dmul>
 8003732:	a379      	add	r3, pc, #484	; (adr r3, 8003918 <__ieee754_pow+0x518>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc fde0 	bl	80002fc <__adddf3>
 800373c:	4622      	mov	r2, r4
 800373e:	462b      	mov	r3, r5
 8003740:	f7fc ff8e 	bl	8000660 <__aeabi_dmul>
 8003744:	a376      	add	r3, pc, #472	; (adr r3, 8003920 <__ieee754_pow+0x520>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc fdd7 	bl	80002fc <__adddf3>
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f7fc ff85 	bl	8000660 <__aeabi_dmul>
 8003756:	a374      	add	r3, pc, #464	; (adr r3, 8003928 <__ieee754_pow+0x528>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc fdce 	bl	80002fc <__adddf3>
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	f7fc ff7c 	bl	8000660 <__aeabi_dmul>
 8003768:	a371      	add	r3, pc, #452	; (adr r3, 8003930 <__ieee754_pow+0x530>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f7fc fdc5 	bl	80002fc <__adddf3>
 8003772:	4622      	mov	r2, r4
 8003774:	4606      	mov	r6, r0
 8003776:	460f      	mov	r7, r1
 8003778:	462b      	mov	r3, r5
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc ff6f 	bl	8000660 <__aeabi_dmul>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4630      	mov	r0, r6
 8003788:	4639      	mov	r1, r7
 800378a:	f7fc ff69 	bl	8000660 <__aeabi_dmul>
 800378e:	4642      	mov	r2, r8
 8003790:	4604      	mov	r4, r0
 8003792:	460d      	mov	r5, r1
 8003794:	464b      	mov	r3, r9
 8003796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800379a:	f7fc fdaf 	bl	80002fc <__adddf3>
 800379e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037a2:	f7fc ff5d 	bl	8000660 <__aeabi_dmul>
 80037a6:	4622      	mov	r2, r4
 80037a8:	462b      	mov	r3, r5
 80037aa:	f7fc fda7 	bl	80002fc <__adddf3>
 80037ae:	4642      	mov	r2, r8
 80037b0:	4606      	mov	r6, r0
 80037b2:	460f      	mov	r7, r1
 80037b4:	464b      	mov	r3, r9
 80037b6:	4640      	mov	r0, r8
 80037b8:	4649      	mov	r1, r9
 80037ba:	f7fc ff51 	bl	8000660 <__aeabi_dmul>
 80037be:	2200      	movs	r2, #0
 80037c0:	4b67      	ldr	r3, [pc, #412]	; (8003960 <__ieee754_pow+0x560>)
 80037c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037c6:	f7fc fd99 	bl	80002fc <__adddf3>
 80037ca:	4632      	mov	r2, r6
 80037cc:	463b      	mov	r3, r7
 80037ce:	f7fc fd95 	bl	80002fc <__adddf3>
 80037d2:	9802      	ldr	r0, [sp, #8]
 80037d4:	460d      	mov	r5, r1
 80037d6:	4604      	mov	r4, r0
 80037d8:	4622      	mov	r2, r4
 80037da:	462b      	mov	r3, r5
 80037dc:	4640      	mov	r0, r8
 80037de:	4649      	mov	r1, r9
 80037e0:	f7fc ff3e 	bl	8000660 <__aeabi_dmul>
 80037e4:	2200      	movs	r2, #0
 80037e6:	4680      	mov	r8, r0
 80037e8:	4689      	mov	r9, r1
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <__ieee754_pow+0x560>)
 80037ec:	4620      	mov	r0, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	f7fc fd82 	bl	80002f8 <__aeabi_dsub>
 80037f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80037f8:	f7fc fd7e 	bl	80002f8 <__aeabi_dsub>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4630      	mov	r0, r6
 8003802:	4639      	mov	r1, r7
 8003804:	f7fc fd78 	bl	80002f8 <__aeabi_dsub>
 8003808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800380c:	f7fc ff28 	bl	8000660 <__aeabi_dmul>
 8003810:	4622      	mov	r2, r4
 8003812:	4606      	mov	r6, r0
 8003814:	460f      	mov	r7, r1
 8003816:	462b      	mov	r3, r5
 8003818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800381c:	f7fc ff20 	bl	8000660 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4630      	mov	r0, r6
 8003826:	4639      	mov	r1, r7
 8003828:	f7fc fd68 	bl	80002fc <__adddf3>
 800382c:	4606      	mov	r6, r0
 800382e:	460f      	mov	r7, r1
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4640      	mov	r0, r8
 8003836:	4649      	mov	r1, r9
 8003838:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800383c:	f7fc fd5e 	bl	80002fc <__adddf3>
 8003840:	9802      	ldr	r0, [sp, #8]
 8003842:	a33d      	add	r3, pc, #244	; (adr r3, 8003938 <__ieee754_pow+0x538>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	4604      	mov	r4, r0
 800384a:	460d      	mov	r5, r1
 800384c:	f7fc ff08 	bl	8000660 <__aeabi_dmul>
 8003850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003854:	4680      	mov	r8, r0
 8003856:	4689      	mov	r9, r1
 8003858:	4620      	mov	r0, r4
 800385a:	4629      	mov	r1, r5
 800385c:	f7fc fd4c 	bl	80002f8 <__aeabi_dsub>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4630      	mov	r0, r6
 8003866:	4639      	mov	r1, r7
 8003868:	f7fc fd46 	bl	80002f8 <__aeabi_dsub>
 800386c:	a334      	add	r3, pc, #208	; (adr r3, 8003940 <__ieee754_pow+0x540>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f7fc fef5 	bl	8000660 <__aeabi_dmul>
 8003876:	a334      	add	r3, pc, #208	; (adr r3, 8003948 <__ieee754_pow+0x548>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	4606      	mov	r6, r0
 800387e:	460f      	mov	r7, r1
 8003880:	4620      	mov	r0, r4
 8003882:	4629      	mov	r1, r5
 8003884:	f7fc feec 	bl	8000660 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4630      	mov	r0, r6
 800388e:	4639      	mov	r1, r7
 8003890:	f7fc fd34 	bl	80002fc <__adddf3>
 8003894:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003898:	f7fc fd30 	bl	80002fc <__adddf3>
 800389c:	4606      	mov	r6, r0
 800389e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80038a0:	460f      	mov	r7, r1
 80038a2:	f7fc fe77 	bl	8000594 <__aeabi_i2d>
 80038a6:	4632      	mov	r2, r6
 80038a8:	4604      	mov	r4, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	463b      	mov	r3, r7
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f7fc fd23 	bl	80002fc <__adddf3>
 80038b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038ba:	f7fc fd1f 	bl	80002fc <__adddf3>
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f7fc fd1b 	bl	80002fc <__adddf3>
 80038c6:	9802      	ldr	r0, [sp, #8]
 80038c8:	4622      	mov	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038d0:	f7fc fd12 	bl	80002f8 <__aeabi_dsub>
 80038d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038d8:	f7fc fd0e 	bl	80002f8 <__aeabi_dsub>
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	f7fc fd0a 	bl	80002f8 <__aeabi_dsub>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fc fd04 	bl	80002f8 <__aeabi_dsub>
 80038f0:	4680      	mov	r8, r0
 80038f2:	4689      	mov	r9, r1
 80038f4:	e036      	b.n	8003964 <__ieee754_pow+0x564>
 80038f6:	bf00      	nop
	...
 8003904:	3ff00000 	.word	0x3ff00000
 8003908:	4a454eef 	.word	0x4a454eef
 800390c:	3fca7e28 	.word	0x3fca7e28
 8003910:	93c9db65 	.word	0x93c9db65
 8003914:	3fcd864a 	.word	0x3fcd864a
 8003918:	a91d4101 	.word	0xa91d4101
 800391c:	3fd17460 	.word	0x3fd17460
 8003920:	518f264d 	.word	0x518f264d
 8003924:	3fd55555 	.word	0x3fd55555
 8003928:	db6fabff 	.word	0xdb6fabff
 800392c:	3fdb6db6 	.word	0x3fdb6db6
 8003930:	33333303 	.word	0x33333303
 8003934:	3fe33333 	.word	0x3fe33333
 8003938:	e0000000 	.word	0xe0000000
 800393c:	3feec709 	.word	0x3feec709
 8003940:	dc3a03fd 	.word	0xdc3a03fd
 8003944:	3feec709 	.word	0x3feec709
 8003948:	145b01f5 	.word	0x145b01f5
 800394c:	be3e2fe0 	.word	0xbe3e2fe0
 8003950:	43400000 	.word	0x43400000
 8003954:	0003988e 	.word	0x0003988e
 8003958:	000bb679 	.word	0x000bb679
 800395c:	3ff00000 	.word	0x3ff00000
 8003960:	40080000 	.word	0x40080000
 8003964:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8003968:	ea53 030a 	orrs.w	r3, r3, sl
 800396c:	f000 8188 	beq.w	8003c80 <__ieee754_pow+0x880>
 8003970:	ed9f 7bd7 	vldr	d7, [pc, #860]	; 8003cd0 <__ieee754_pow+0x8d0>
 8003974:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003978:	e9dd ab00 	ldrd	sl, fp, [sp]
 800397c:	4653      	mov	r3, sl
 800397e:	465c      	mov	r4, fp
 8003980:	e9cd 3400 	strd	r3, r4, [sp]
 8003984:	2300      	movs	r3, #0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	e9dd 4500 	ldrd	r4, r5, [sp]
 800398c:	4650      	mov	r0, sl
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	4659      	mov	r1, fp
 8003994:	f7fc fcb0 	bl	80002f8 <__aeabi_dsub>
 8003998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800399c:	f7fc fe60 	bl	8000660 <__aeabi_dmul>
 80039a0:	4652      	mov	r2, sl
 80039a2:	4606      	mov	r6, r0
 80039a4:	460f      	mov	r7, r1
 80039a6:	465b      	mov	r3, fp
 80039a8:	4640      	mov	r0, r8
 80039aa:	4649      	mov	r1, r9
 80039ac:	f7fc fe58 	bl	8000660 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4630      	mov	r0, r6
 80039b6:	4639      	mov	r1, r7
 80039b8:	f7fc fca0 	bl	80002fc <__adddf3>
 80039bc:	4622      	mov	r2, r4
 80039be:	4680      	mov	r8, r0
 80039c0:	4689      	mov	r9, r1
 80039c2:	462b      	mov	r3, r5
 80039c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039c8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80039cc:	f7fc fe48 	bl	8000660 <__aeabi_dmul>
 80039d0:	460b      	mov	r3, r1
 80039d2:	4602      	mov	r2, r0
 80039d4:	4606      	mov	r6, r0
 80039d6:	460f      	mov	r7, r1
 80039d8:	4640      	mov	r0, r8
 80039da:	4649      	mov	r1, r9
 80039dc:	f7fc fc8e 	bl	80002fc <__adddf3>
 80039e0:	4bd5      	ldr	r3, [pc, #852]	; (8003d38 <__ieee754_pow+0x938>)
 80039e2:	4299      	cmp	r1, r3
 80039e4:	4604      	mov	r4, r0
 80039e6:	460d      	mov	r5, r1
 80039e8:	468a      	mov	sl, r1
 80039ea:	f340 8123 	ble.w	8003c34 <__ieee754_pow+0x834>
 80039ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80039f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80039f6:	4303      	orrs	r3, r0
 80039f8:	f040 8218 	bne.w	8003e2c <__ieee754_pow+0xa2c>
 80039fc:	a3b6      	add	r3, pc, #728	; (adr r3, 8003cd8 <__ieee754_pow+0x8d8>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a06:	f7fc fc79 	bl	80002fc <__adddf3>
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4680      	mov	r8, r0
 8003a0e:	4689      	mov	r9, r1
 8003a10:	463b      	mov	r3, r7
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fc6f 	bl	80002f8 <__aeabi_dsub>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	f7fd f8b3 	bl	8000b8c <__aeabi_dcmpgt>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f040 8200 	bne.w	8003e2c <__ieee754_pow+0xa2c>
 8003a2c:	46a8      	mov	r8, r5
 8003a2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003a3a:	fa42 f303 	asr.w	r3, r2, r3
 8003a3e:	4453      	add	r3, sl
 8003a40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003a44:	4dbd      	ldr	r5, [pc, #756]	; (8003d3c <__ieee754_pow+0x93c>)
 8003a46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003a4a:	4115      	asrs	r5, r2
 8003a4c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 8003a50:	2000      	movs	r0, #0
 8003a52:	f1c2 0414 	rsb	r4, r2, #20
 8003a56:	ea23 0105 	bic.w	r1, r3, r5
 8003a5a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 8003a5e:	f1ba 0f00 	cmp.w	sl, #0
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	fa4b fb04 	asr.w	fp, fp, r4
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	bfb8      	it	lt
 8003a70:	f1cb 0b00 	rsblt	fp, fp, #0
 8003a74:	f7fc fc40 	bl	80002f8 <__aeabi_dsub>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a84:	f7fc fc3a 	bl	80002fc <__adddf3>
 8003a88:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 8003a8c:	2400      	movs	r4, #0
 8003a8e:	a394      	add	r3, pc, #592	; (adr r3, 8003ce0 <__ieee754_pow+0x8e0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	4620      	mov	r0, r4
 8003a96:	460d      	mov	r5, r1
 8003a98:	f7fc fde2 	bl	8000660 <__aeabi_dmul>
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	4680      	mov	r8, r0
 8003aa0:	4689      	mov	r9, r1
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc fc26 	bl	80002f8 <__aeabi_dsub>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ab4:	f7fc fc20 	bl	80002f8 <__aeabi_dsub>
 8003ab8:	a38b      	add	r3, pc, #556	; (adr r3, 8003ce8 <__ieee754_pow+0x8e8>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fdcf 	bl	8000660 <__aeabi_dmul>
 8003ac2:	a38b      	add	r3, pc, #556	; (adr r3, 8003cf0 <__ieee754_pow+0x8f0>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	4606      	mov	r6, r0
 8003aca:	460f      	mov	r7, r1
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fdc6 	bl	8000660 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4630      	mov	r0, r6
 8003ada:	4639      	mov	r1, r7
 8003adc:	f7fc fc0e 	bl	80002fc <__adddf3>
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4640      	mov	r0, r8
 8003aea:	4649      	mov	r1, r9
 8003aec:	f7fc fc06 	bl	80002fc <__adddf3>
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	4604      	mov	r4, r0
 8003af6:	460d      	mov	r5, r1
 8003af8:	f7fc fbfe 	bl	80002f8 <__aeabi_dsub>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4630      	mov	r0, r6
 8003b02:	4639      	mov	r1, r7
 8003b04:	f7fc fbf8 	bl	80002f8 <__aeabi_dsub>
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4680      	mov	r8, r0
 8003b0c:	4689      	mov	r9, r1
 8003b0e:	462b      	mov	r3, r5
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fda4 	bl	8000660 <__aeabi_dmul>
 8003b18:	a377      	add	r3, pc, #476	; (adr r3, 8003cf8 <__ieee754_pow+0x8f8>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	4606      	mov	r6, r0
 8003b20:	460f      	mov	r7, r1
 8003b22:	f7fc fd9d 	bl	8000660 <__aeabi_dmul>
 8003b26:	a376      	add	r3, pc, #472	; (adr r3, 8003d00 <__ieee754_pow+0x900>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc fbe4 	bl	80002f8 <__aeabi_dsub>
 8003b30:	4632      	mov	r2, r6
 8003b32:	463b      	mov	r3, r7
 8003b34:	f7fc fd94 	bl	8000660 <__aeabi_dmul>
 8003b38:	a373      	add	r3, pc, #460	; (adr r3, 8003d08 <__ieee754_pow+0x908>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fbdd 	bl	80002fc <__adddf3>
 8003b42:	4632      	mov	r2, r6
 8003b44:	463b      	mov	r3, r7
 8003b46:	f7fc fd8b 	bl	8000660 <__aeabi_dmul>
 8003b4a:	a371      	add	r3, pc, #452	; (adr r3, 8003d10 <__ieee754_pow+0x910>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f7fc fbd2 	bl	80002f8 <__aeabi_dsub>
 8003b54:	4632      	mov	r2, r6
 8003b56:	463b      	mov	r3, r7
 8003b58:	f7fc fd82 	bl	8000660 <__aeabi_dmul>
 8003b5c:	a36e      	add	r3, pc, #440	; (adr r3, 8003d18 <__ieee754_pow+0x918>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fbcb 	bl	80002fc <__adddf3>
 8003b66:	4632      	mov	r2, r6
 8003b68:	463b      	mov	r3, r7
 8003b6a:	f7fc fd79 	bl	8000660 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f7fc fbbf 	bl	80002f8 <__aeabi_dsub>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	460f      	mov	r7, r1
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fd6b 	bl	8000660 <__aeabi_dmul>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	e9cd 0100 	strd	r0, r1, [sp]
 8003b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b94:	4630      	mov	r0, r6
 8003b96:	4639      	mov	r1, r7
 8003b98:	f7fc fbae 	bl	80002f8 <__aeabi_dsub>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ba4:	f7fc fe86 	bl	80008b4 <__aeabi_ddiv>
 8003ba8:	4642      	mov	r2, r8
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	464b      	mov	r3, r9
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fd54 	bl	8000660 <__aeabi_dmul>
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	f7fc fb9e 	bl	80002fc <__adddf3>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	f7fc fb96 	bl	80002f8 <__aeabi_dsub>
 8003bcc:	4622      	mov	r2, r4
 8003bce:	462b      	mov	r3, r5
 8003bd0:	f7fc fb92 	bl	80002f8 <__aeabi_dsub>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4959      	ldr	r1, [pc, #356]	; (8003d40 <__ieee754_pow+0x940>)
 8003bdc:	f7fc fb8c 	bl	80002f8 <__aeabi_dsub>
 8003be0:	448a      	add	sl, r1
 8003be2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	f2c0 815b 	blt.w	8003ea4 <__ieee754_pow+0xaa4>
 8003bee:	4651      	mov	r1, sl
 8003bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bf4:	f7fc fd34 	bl	8000660 <__aeabi_dmul>
 8003bf8:	ec41 0b10 	vmov	d0, r0, r1
 8003bfc:	e449      	b.n	8003492 <__ieee754_pow+0x92>
 8003bfe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c06:	ea54 030b 	orrs.w	r3, r4, fp
 8003c0a:	f000 8137 	beq.w	8003e7c <__ieee754_pow+0xa7c>
 8003c0e:	f1bb 0f01 	cmp.w	fp, #1
 8003c12:	f47f ac80 	bne.w	8003516 <__ieee754_pow+0x116>
 8003c16:	4602      	mov	r2, r0
 8003c18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003c1c:	ec43 2b10 	vmov	d0, r2, r3
 8003c20:	e437      	b.n	8003492 <__ieee754_pow+0x92>
 8003c22:	4632      	mov	r2, r6
 8003c24:	463b      	mov	r3, r7
 8003c26:	4630      	mov	r0, r6
 8003c28:	4639      	mov	r1, r7
 8003c2a:	f7fc fd19 	bl	8000660 <__aeabi_dmul>
 8003c2e:	ec41 0b10 	vmov	d0, r0, r1
 8003c32:	e42e      	b.n	8003492 <__ieee754_pow+0x92>
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <__ieee754_pow+0x944>)
 8003c36:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8003c3a:	4598      	cmp	r8, r3
 8003c3c:	f340 8115 	ble.w	8003e6a <__ieee754_pow+0xa6a>
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <__ieee754_pow+0x948>)
 8003c42:	440b      	add	r3, r1
 8003c44:	4303      	orrs	r3, r0
 8003c46:	d10c      	bne.n	8003c62 <__ieee754_pow+0x862>
 8003c48:	4632      	mov	r2, r6
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	f7fc fb54 	bl	80002f8 <__aeabi_dsub>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c58:	f7fc ff84 	bl	8000b64 <__aeabi_dcmple>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	f43f aee6 	beq.w	8003a2e <__ieee754_pow+0x62e>
 8003c62:	a32f      	add	r3, pc, #188	; (adr r3, 8003d20 <__ieee754_pow+0x920>)
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c6c:	f7fc fcf8 	bl	8000660 <__aeabi_dmul>
 8003c70:	a32b      	add	r3, pc, #172	; (adr r3, 8003d20 <__ieee754_pow+0x920>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fcf3 	bl	8000660 <__aeabi_dmul>
 8003c7a:	ec41 0b10 	vmov	d0, r0, r1
 8003c7e:	e408      	b.n	8003492 <__ieee754_pow+0x92>
 8003c80:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8003d28 <__ieee754_pow+0x928>
 8003c84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c88:	e676      	b.n	8003978 <__ieee754_pow+0x578>
 8003c8a:	f1b9 0f00 	cmp.w	r9, #0
 8003c8e:	f6bf ac8e 	bge.w	80035ae <__ieee754_pow+0x1ae>
 8003c92:	e9dd 3400 	ldrd	r3, r4, [sp]
 8003c96:	ee00 3a10 	vmov	s0, r3
 8003c9a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003c9e:	ee00 3a90 	vmov	s1, r3
 8003ca2:	f7ff bbf6 	b.w	8003492 <__ieee754_pow+0x92>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	2000      	movs	r0, #0
 8003cac:	4924      	ldr	r1, [pc, #144]	; (8003d40 <__ieee754_pow+0x940>)
 8003cae:	f7fc fe01 	bl	80008b4 <__aeabi_ddiv>
 8003cb2:	e42d      	b.n	8003510 <__ieee754_pow+0x110>
 8003cb4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8003d30 <__ieee754_pow+0x930>
 8003cb8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003cbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003cc0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8003cd0 <__ieee754_pow+0x8d0>
 8003cc4:	f04f 0800 	mov.w	r8, #0
 8003cc8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ccc:	e4be      	b.n	800364c <__ieee754_pow+0x24c>
 8003cce:	bf00      	nop
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	3ff00000 	.word	0x3ff00000
 8003cd8:	652b82fe 	.word	0x652b82fe
 8003cdc:	3c971547 	.word	0x3c971547
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	3fe62e43 	.word	0x3fe62e43
 8003ce8:	fefa39ef 	.word	0xfefa39ef
 8003cec:	3fe62e42 	.word	0x3fe62e42
 8003cf0:	0ca86c39 	.word	0x0ca86c39
 8003cf4:	be205c61 	.word	0xbe205c61
 8003cf8:	72bea4d0 	.word	0x72bea4d0
 8003cfc:	3e663769 	.word	0x3e663769
 8003d00:	c5d26bf1 	.word	0xc5d26bf1
 8003d04:	3ebbbd41 	.word	0x3ebbbd41
 8003d08:	af25de2c 	.word	0xaf25de2c
 8003d0c:	3f11566a 	.word	0x3f11566a
 8003d10:	16bebd93 	.word	0x16bebd93
 8003d14:	3f66c16c 	.word	0x3f66c16c
 8003d18:	5555553e 	.word	0x5555553e
 8003d1c:	3fc55555 	.word	0x3fc55555
 8003d20:	c2f8f359 	.word	0xc2f8f359
 8003d24:	01a56e1f 	.word	0x01a56e1f
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	bff00000 	.word	0xbff00000
	...
 8003d38:	408fffff 	.word	0x408fffff
 8003d3c:	000fffff 	.word	0x000fffff
 8003d40:	3ff00000 	.word	0x3ff00000
 8003d44:	4090cbff 	.word	0x4090cbff
 8003d48:	3f6f3400 	.word	0x3f6f3400
 8003d4c:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <__ieee754_pow+0xb00>)
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	f77f ac2a 	ble.w	80035a8 <__ieee754_pow+0x1a8>
 8003d54:	4b6b      	ldr	r3, [pc, #428]	; (8003f04 <__ieee754_pow+0xb04>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	f73f abc3 	bgt.w	80034e2 <__ieee754_pow+0xe2>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4b69      	ldr	r3, [pc, #420]	; (8003f04 <__ieee754_pow+0xb04>)
 8003d60:	f7fc faca 	bl	80002f8 <__aeabi_dsub>
 8003d64:	a356      	add	r3, pc, #344	; (adr r3, 8003ec0 <__ieee754_pow+0xac0>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	460d      	mov	r5, r1
 8003d6e:	f7fc fc77 	bl	8000660 <__aeabi_dmul>
 8003d72:	a355      	add	r3, pc, #340	; (adr r3, 8003ec8 <__ieee754_pow+0xac8>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	4680      	mov	r8, r0
 8003d7a:	4689      	mov	r9, r1
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc fc6e 	bl	8000660 <__aeabi_dmul>
 8003d84:	2200      	movs	r2, #0
 8003d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	; (8003f08 <__ieee754_pow+0xb08>)
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	4629      	mov	r1, r5
 8003d90:	f7fc fc66 	bl	8000660 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	a14d      	add	r1, pc, #308	; (adr r1, 8003ed0 <__ieee754_pow+0xad0>)
 8003d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d9e:	f7fc faab 	bl	80002f8 <__aeabi_dsub>
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	f7fc fc5b 	bl	8000660 <__aeabi_dmul>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	2000      	movs	r0, #0
 8003db0:	4956      	ldr	r1, [pc, #344]	; (8003f0c <__ieee754_pow+0xb0c>)
 8003db2:	f7fc faa1 	bl	80002f8 <__aeabi_dsub>
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f7fc fc4d 	bl	8000660 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4630      	mov	r0, r6
 8003dcc:	4639      	mov	r1, r7
 8003dce:	f7fc fc47 	bl	8000660 <__aeabi_dmul>
 8003dd2:	a341      	add	r3, pc, #260	; (adr r3, 8003ed8 <__ieee754_pow+0xad8>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fc42 	bl	8000660 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003de4:	f7fc fa88 	bl	80002f8 <__aeabi_dsub>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4604      	mov	r4, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	4640      	mov	r0, r8
 8003df2:	4649      	mov	r1, r9
 8003df4:	f7fc fa82 	bl	80002fc <__adddf3>
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e02:	f7fc fa79 	bl	80002f8 <__aeabi_dsub>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	f7fc fa73 	bl	80002f8 <__aeabi_dsub>
 8003e12:	4680      	mov	r8, r0
 8003e14:	4689      	mov	r9, r1
 8003e16:	e5a5      	b.n	8003964 <__ieee754_pow+0x564>
 8003e18:	4632      	mov	r2, r6
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	4939      	ldr	r1, [pc, #228]	; (8003f04 <__ieee754_pow+0xb04>)
 8003e20:	f7fc fd48 	bl	80008b4 <__aeabi_ddiv>
 8003e24:	ec41 0b10 	vmov	d0, r0, r1
 8003e28:	f7ff bb33 	b.w	8003492 <__ieee754_pow+0x92>
 8003e2c:	a32c      	add	r3, pc, #176	; (adr r3, 8003ee0 <__ieee754_pow+0xae0>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e36:	f7fc fc13 	bl	8000660 <__aeabi_dmul>
 8003e3a:	a329      	add	r3, pc, #164	; (adr r3, 8003ee0 <__ieee754_pow+0xae0>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc fc0e 	bl	8000660 <__aeabi_dmul>
 8003e44:	ec41 0b10 	vmov	d0, r0, r1
 8003e48:	f7ff bb23 	b.w	8003492 <__ieee754_pow+0x92>
 8003e4c:	f1be 0f00 	cmp.w	lr, #0
 8003e50:	f47f ab2a 	bne.w	80034a8 <__ieee754_pow+0xa8>
 8003e54:	f1c3 0314 	rsb	r3, r3, #20
 8003e58:	fa48 f203 	asr.w	r2, r8, r3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	4598      	cmp	r8, r3
 8003e62:	d027      	beq.n	8003eb4 <__ieee754_pow+0xab4>
 8003e64:	46f3      	mov	fp, lr
 8003e66:	f7ff baf7 	b.w	8003458 <__ieee754_pow+0x58>
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <__ieee754_pow+0xb0c>)
 8003e6c:	4598      	cmp	r8, r3
 8003e6e:	f73f adde 	bgt.w	8003a2e <__ieee754_pow+0x62e>
 8003e72:	e9dd 3400 	ldrd	r3, r4, [sp]
 8003e76:	469a      	mov	sl, r3
 8003e78:	469b      	mov	fp, r3
 8003e7a:	e607      	b.n	8003a8c <__ieee754_pow+0x68c>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	f7ff bb89 	b.w	8003596 <__ieee754_pow+0x196>
 8003e84:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8003ee8 <__ieee754_pow+0xae8>
 8003e88:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e8c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8003ef0 <__ieee754_pow+0xaf0>
 8003e90:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003e94:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8003ef8 <__ieee754_pow+0xaf8>
 8003e98:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 8003e9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ea0:	f7ff bbd4 	b.w	800364c <__ieee754_pow+0x24c>
 8003ea4:	4658      	mov	r0, fp
 8003ea6:	ec43 2b10 	vmov	d0, r2, r3
 8003eaa:	f000 f9e9 	bl	8004280 <scalbn>
 8003eae:	ec51 0b10 	vmov	r0, r1, d0
 8003eb2:	e69d      	b.n	8003bf0 <__ieee754_pow+0x7f0>
 8003eb4:	f002 0201 	and.w	r2, r2, #1
 8003eb8:	f1c2 0b02 	rsb	fp, r2, #2
 8003ebc:	f7ff bacc 	b.w	8003458 <__ieee754_pow+0x58>
 8003ec0:	60000000 	.word	0x60000000
 8003ec4:	3ff71547 	.word	0x3ff71547
 8003ec8:	f85ddf44 	.word	0xf85ddf44
 8003ecc:	3e54ae0b 	.word	0x3e54ae0b
 8003ed0:	55555555 	.word	0x55555555
 8003ed4:	3fd55555 	.word	0x3fd55555
 8003ed8:	652b82fe 	.word	0x652b82fe
 8003edc:	3ff71547 	.word	0x3ff71547
 8003ee0:	8800759c 	.word	0x8800759c
 8003ee4:	7e37e43c 	.word	0x7e37e43c
 8003ee8:	40000000 	.word	0x40000000
 8003eec:	3fe2b803 	.word	0x3fe2b803
 8003ef0:	43cfd006 	.word	0x43cfd006
 8003ef4:	3e4cfdeb 	.word	0x3e4cfdeb
 8003ef8:	00000000 	.word	0x00000000
 8003efc:	3ff80000 	.word	0x3ff80000
 8003f00:	3feffffe 	.word	0x3feffffe
 8003f04:	3ff00000 	.word	0x3ff00000
 8003f08:	3fd00000 	.word	0x3fd00000
 8003f0c:	3fe00000 	.word	0x3fe00000

08003f10 <__ieee754_sqrt>:
 8003f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f14:	4965      	ldr	r1, [pc, #404]	; (80040ac <__ieee754_sqrt+0x19c>)
 8003f16:	ec55 4b10 	vmov	r4, r5, d0
 8003f1a:	460e      	mov	r6, r1
 8003f1c:	4029      	ands	r1, r5
 8003f1e:	42b1      	cmp	r1, r6
 8003f20:	f000 8097 	beq.w	8004052 <__ieee754_sqrt+0x142>
 8003f24:	2d00      	cmp	r5, #0
 8003f26:	462b      	mov	r3, r5
 8003f28:	ee10 2a10 	vmov	r2, s0
 8003f2c:	dd73      	ble.n	8004016 <__ieee754_sqrt+0x106>
 8003f2e:	152e      	asrs	r6, r5, #20
 8003f30:	d07e      	beq.n	8004030 <__ieee754_sqrt+0x120>
 8003f32:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8003f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f3a:	07f1      	lsls	r1, r6, #31
 8003f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f40:	d464      	bmi.n	800400c <__ieee754_sqrt+0xfc>
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2500      	movs	r5, #0
 8003f46:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003f4a:	0057      	lsls	r7, r2, #1
 8003f4c:	1076      	asrs	r6, r6, #1
 8003f4e:	46ae      	mov	lr, r5
 8003f50:	2116      	movs	r1, #22
 8003f52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f56:	eb0e 0002 	add.w	r0, lr, r2
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	dc03      	bgt.n	8003f66 <__ieee754_sqrt+0x56>
 8003f5e:	1a1b      	subs	r3, r3, r0
 8003f60:	eb00 0e02 	add.w	lr, r0, r2
 8003f64:	4415      	add	r5, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	3901      	subs	r1, #1
 8003f6a:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
 8003f6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f72:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8003f76:	d1ee      	bne.n	8003f56 <__ieee754_sqrt+0x46>
 8003f78:	468c      	mov	ip, r1
 8003f7a:	2020      	movs	r0, #32
 8003f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f80:	e009      	b.n	8003f96 <__ieee754_sqrt+0x86>
 8003f82:	d020      	beq.n	8003fc6 <__ieee754_sqrt+0xb6>
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	3801      	subs	r0, #1
 8003f88:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
 8003f8c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f90:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8003f94:	d020      	beq.n	8003fd8 <__ieee754_sqrt+0xc8>
 8003f96:	459e      	cmp	lr, r3
 8003f98:	eb02 040c 	add.w	r4, r2, ip
 8003f9c:	daf1      	bge.n	8003f82 <__ieee754_sqrt+0x72>
 8003f9e:	2c00      	cmp	r4, #0
 8003fa0:	eb04 0c02 	add.w	ip, r4, r2
 8003fa4:	db09      	blt.n	8003fba <__ieee754_sqrt+0xaa>
 8003fa6:	46f0      	mov	r8, lr
 8003fa8:	42bc      	cmp	r4, r7
 8003faa:	ebce 0303 	rsb	r3, lr, r3
 8003fae:	d900      	bls.n	8003fb2 <__ieee754_sqrt+0xa2>
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	1b3f      	subs	r7, r7, r4
 8003fb4:	4411      	add	r1, r2
 8003fb6:	46c6      	mov	lr, r8
 8003fb8:	e7e4      	b.n	8003f84 <__ieee754_sqrt+0x74>
 8003fba:	f1bc 0f00 	cmp.w	ip, #0
 8003fbe:	dbf2      	blt.n	8003fa6 <__ieee754_sqrt+0x96>
 8003fc0:	f10e 0801 	add.w	r8, lr, #1
 8003fc4:	e7f0      	b.n	8003fa8 <__ieee754_sqrt+0x98>
 8003fc6:	42bc      	cmp	r4, r7
 8003fc8:	d81e      	bhi.n	8004008 <__ieee754_sqrt+0xf8>
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	eb04 0c02 	add.w	ip, r4, r2
 8003fd0:	db51      	blt.n	8004076 <__ieee754_sqrt+0x166>
 8003fd2:	4698      	mov	r8, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e7ec      	b.n	8003fb2 <__ieee754_sqrt+0xa2>
 8003fd8:	433b      	orrs	r3, r7
 8003fda:	d004      	beq.n	8003fe6 <__ieee754_sqrt+0xd6>
 8003fdc:	1c4a      	adds	r2, r1, #1
 8003fde:	d04e      	beq.n	800407e <__ieee754_sqrt+0x16e>
 8003fe0:	f001 0301 	and.w	r3, r1, #1
 8003fe4:	4419      	add	r1, r3
 8003fe6:	0849      	lsrs	r1, r1, #1
 8003fe8:	1068      	asrs	r0, r5, #1
 8003fea:	07eb      	lsls	r3, r5, #31
 8003fec:	f100 507f 	add.w	r0, r0, #1069547520	; 0x3fc00000
 8003ff0:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
 8003ff4:	bf48      	it	mi
 8003ff6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003ffa:	eb00 5306 	add.w	r3, r0, r6, lsl #20
 8003ffe:	460a      	mov	r2, r1
 8004000:	ec43 2b10 	vmov	d0, r2, r3
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	4673      	mov	r3, lr
 800400a:	e7bb      	b.n	8003f84 <__ieee754_sqrt+0x74>
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004012:	0052      	lsls	r2, r2, #1
 8004014:	e795      	b.n	8003f42 <__ieee754_sqrt+0x32>
 8004016:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800401a:	4321      	orrs	r1, r4
 800401c:	d029      	beq.n	8004072 <__ieee754_sqrt+0x162>
 800401e:	bbad      	cbnz	r5, 800408c <__ieee754_sqrt+0x17c>
 8004020:	462e      	mov	r6, r5
 8004022:	0ad3      	lsrs	r3, r2, #11
 8004024:	3e15      	subs	r6, #21
 8004026:	0552      	lsls	r2, r2, #21
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0fa      	beq.n	8004022 <__ieee754_sqrt+0x112>
 800402c:	02dd      	lsls	r5, r3, #11
 800402e:	d429      	bmi.n	8004084 <__ieee754_sqrt+0x174>
 8004030:	2100      	movs	r1, #0
 8004032:	e000      	b.n	8004036 <__ieee754_sqrt+0x126>
 8004034:	4601      	mov	r1, r0
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	02dc      	lsls	r4, r3, #11
 800403a:	f101 0001 	add.w	r0, r1, #1
 800403e:	d5f9      	bpl.n	8004034 <__ieee754_sqrt+0x124>
 8004040:	4249      	negs	r1, r1
 8004042:	f1c0 0420 	rsb	r4, r0, #32
 8004046:	fa22 f404 	lsr.w	r4, r2, r4
 800404a:	4323      	orrs	r3, r4
 800404c:	440e      	add	r6, r1
 800404e:	4082      	lsls	r2, r0
 8004050:	e76f      	b.n	8003f32 <__ieee754_sqrt+0x22>
 8004052:	ee10 2a10 	vmov	r2, s0
 8004056:	462b      	mov	r3, r5
 8004058:	ee10 0a10 	vmov	r0, s0
 800405c:	4629      	mov	r1, r5
 800405e:	f7fc faff 	bl	8000660 <__aeabi_dmul>
 8004062:	4622      	mov	r2, r4
 8004064:	462b      	mov	r3, r5
 8004066:	f7fc f949 	bl	80002fc <__adddf3>
 800406a:	ec41 0b10 	vmov	d0, r0, r1
 800406e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004076:	f1bc 0f00 	cmp.w	ip, #0
 800407a:	dbaa      	blt.n	8003fd2 <__ieee754_sqrt+0xc2>
 800407c:	e7a0      	b.n	8003fc0 <__ieee754_sqrt+0xb0>
 800407e:	3501      	adds	r5, #1
 8004080:	4601      	mov	r1, r0
 8004082:	e7b1      	b.n	8003fe8 <__ieee754_sqrt+0xd8>
 8004084:	2420      	movs	r4, #32
 8004086:	2101      	movs	r1, #1
 8004088:	2000      	movs	r0, #0
 800408a:	e7dc      	b.n	8004046 <__ieee754_sqrt+0x136>
 800408c:	ee10 2a10 	vmov	r2, s0
 8004090:	462b      	mov	r3, r5
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc f92f 	bl	80002f8 <__aeabi_dsub>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	f7fc fc09 	bl	80008b4 <__aeabi_ddiv>
 80040a2:	ec41 0b10 	vmov	d0, r0, r1
 80040a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040aa:	bf00      	nop
 80040ac:	7ff00000 	.word	0x7ff00000

080040b0 <fabs>:
 80040b0:	ec53 2b10 	vmov	r2, r3, d0
 80040b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040b8:	ec43 2b10 	vmov	d0, r2, r3
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <finite>:
 80040c0:	ee10 3a90 	vmov	r3, s1
 80040c4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80040c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80040cc:	0fc0      	lsrs	r0, r0, #31
 80040ce:	4770      	bx	lr

080040d0 <__fpclassifyd>:
 80040d0:	ec53 2b10 	vmov	r2, r3, d0
 80040d4:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 80040d8:	b410      	push	{r4}
 80040da:	d008      	beq.n	80040ee <__fpclassifyd+0x1e>
 80040dc:	4811      	ldr	r0, [pc, #68]	; (8004124 <__fpclassifyd+0x54>)
 80040de:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 80040e2:	4284      	cmp	r4, r0
 80040e4:	d808      	bhi.n	80040f8 <__fpclassifyd+0x28>
 80040e6:	2004      	movs	r0, #4
 80040e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	b91a      	cbnz	r2, 80040f8 <__fpclassifyd+0x28>
 80040f0:	2002      	movs	r0, #2
 80040f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80040fc:	4809      	ldr	r0, [pc, #36]	; (8004124 <__fpclassifyd+0x54>)
 80040fe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004102:	4283      	cmp	r3, r0
 8004104:	d9ef      	bls.n	80040e6 <__fpclassifyd+0x16>
 8004106:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800410a:	d201      	bcs.n	8004110 <__fpclassifyd+0x40>
 800410c:	2003      	movs	r0, #3
 800410e:	e7eb      	b.n	80040e8 <__fpclassifyd+0x18>
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <__fpclassifyd+0x58>)
 8004112:	4299      	cmp	r1, r3
 8004114:	d001      	beq.n	800411a <__fpclassifyd+0x4a>
 8004116:	2000      	movs	r0, #0
 8004118:	e7e6      	b.n	80040e8 <__fpclassifyd+0x18>
 800411a:	fab2 f082 	clz	r0, r2
 800411e:	0940      	lsrs	r0, r0, #5
 8004120:	e7e2      	b.n	80040e8 <__fpclassifyd+0x18>
 8004122:	bf00      	nop
 8004124:	7fdfffff 	.word	0x7fdfffff
 8004128:	7ff00000 	.word	0x7ff00000
 800412c:	00000000 	.word	0x00000000

08004130 <matherr>:
 8004130:	2000      	movs	r0, #0
 8004132:	4770      	bx	lr
	...

08004140 <nan>:
 8004140:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004148 <nan+0x8>
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	00000000 	.word	0x00000000
 800414c:	7ff80000 	.word	0x7ff80000

08004150 <rint>:
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	ec53 2b10 	vmov	r2, r3, d0
 8004156:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800415a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 800415e:	2813      	cmp	r0, #19
 8004160:	b083      	sub	sp, #12
 8004162:	4619      	mov	r1, r3
 8004164:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8004168:	ee10 5a10 	vmov	r5, s0
 800416c:	dc2f      	bgt.n	80041ce <rint+0x7e>
 800416e:	2800      	cmp	r0, #0
 8004170:	db49      	blt.n	8004206 <rint+0xb6>
 8004172:	4e3f      	ldr	r6, [pc, #252]	; (8004270 <rint+0x120>)
 8004174:	4106      	asrs	r6, r0
 8004176:	ea03 0706 	and.w	r7, r3, r6
 800417a:	4317      	orrs	r7, r2
 800417c:	d02c      	beq.n	80041d8 <rint+0x88>
 800417e:	0876      	lsrs	r6, r6, #1
 8004180:	4033      	ands	r3, r6
 8004182:	431d      	orrs	r5, r3
 8004184:	d00c      	beq.n	80041a0 <rint+0x50>
 8004186:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800418a:	2813      	cmp	r0, #19
 800418c:	ea21 0606 	bic.w	r6, r1, r6
 8004190:	fa43 f100 	asr.w	r1, r3, r0
 8004194:	ea41 0106 	orr.w	r1, r1, r6
 8004198:	bf0c      	ite	eq
 800419a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800419e:	2500      	movne	r5, #0
 80041a0:	4834      	ldr	r0, [pc, #208]	; (8004274 <rint+0x124>)
 80041a2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80041a6:	462a      	mov	r2, r5
 80041a8:	e9d4 4500 	ldrd	r4, r5, [r4]
 80041ac:	4610      	mov	r0, r2
 80041ae:	462b      	mov	r3, r5
 80041b0:	4622      	mov	r2, r4
 80041b2:	f7fc f8a3 	bl	80002fc <__adddf3>
 80041b6:	e9cd 0100 	strd	r0, r1, [sp]
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041c2:	f7fc f899 	bl	80002f8 <__aeabi_dsub>
 80041c6:	ec41 0b10 	vmov	d0, r0, r1
 80041ca:	b003      	add	sp, #12
 80041cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ce:	2833      	cmp	r0, #51	; 0x33
 80041d0:	dd06      	ble.n	80041e0 <rint+0x90>
 80041d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80041d6:	d042      	beq.n	800425e <rint+0x10e>
 80041d8:	ec43 2b10 	vmov	d0, r2, r3
 80041dc:	b003      	add	sp, #12
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e8:	40f0      	lsrs	r0, r6
 80041ea:	4202      	tst	r2, r0
 80041ec:	d0f4      	beq.n	80041d8 <rint+0x88>
 80041ee:	0840      	lsrs	r0, r0, #1
 80041f0:	4202      	tst	r2, r0
 80041f2:	d0d5      	beq.n	80041a0 <rint+0x50>
 80041f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f8:	ea25 0000 	bic.w	r0, r5, r0
 80041fc:	fa43 f606 	asr.w	r6, r3, r6
 8004200:	ea46 0500 	orr.w	r5, r6, r0
 8004204:	e7cc      	b.n	80041a0 <rint+0x50>
 8004206:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800420a:	4310      	orrs	r0, r2
 800420c:	ee10 7a10 	vmov	r7, s0
 8004210:	d0e2      	beq.n	80041d8 <rint+0x88>
 8004212:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8004216:	4307      	orrs	r7, r0
 8004218:	4278      	negs	r0, r7
 800421a:	4307      	orrs	r7, r0
 800421c:	4815      	ldr	r0, [pc, #84]	; (8004274 <rint+0x124>)
 800421e:	0c59      	lsrs	r1, r3, #17
 8004220:	0b3f      	lsrs	r7, r7, #12
 8004222:	0449      	lsls	r1, r1, #17
 8004224:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8004228:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800422c:	ea47 0301 	orr.w	r3, r7, r1
 8004230:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	463b      	mov	r3, r7
 800423a:	4632      	mov	r2, r6
 800423c:	f7fc f85e 	bl	80002fc <__adddf3>
 8004240:	e9cd 0100 	strd	r0, r1, [sp]
 8004244:	463b      	mov	r3, r7
 8004246:	4632      	mov	r2, r6
 8004248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800424c:	f7fc f854 	bl	80002f8 <__aeabi_dsub>
 8004250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004254:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8004258:	ec41 0b10 	vmov	d0, r0, r1
 800425c:	e7be      	b.n	80041dc <rint+0x8c>
 800425e:	ee10 0a10 	vmov	r0, s0
 8004262:	4619      	mov	r1, r3
 8004264:	f7fc f84a 	bl	80002fc <__adddf3>
 8004268:	ec41 0b10 	vmov	d0, r0, r1
 800426c:	e7b6      	b.n	80041dc <rint+0x8c>
 800426e:	bf00      	nop
 8004270:	000fffff 	.word	0x000fffff
 8004274:	08004680 	.word	0x08004680
	...

08004280 <scalbn>:
 8004280:	ec53 2b10 	vmov	r2, r3, d0
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800428a:	4619      	mov	r1, r3
 800428c:	4605      	mov	r5, r0
 800428e:	bb14      	cbnz	r4, 80042d6 <scalbn+0x56>
 8004290:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004294:	4311      	orrs	r1, r2
 8004296:	d02a      	beq.n	80042ee <scalbn+0x6e>
 8004298:	4619      	mov	r1, r3
 800429a:	2200      	movs	r2, #0
 800429c:	4b38      	ldr	r3, [pc, #224]	; (8004380 <scalbn+0x100>)
 800429e:	4e39      	ldr	r6, [pc, #228]	; (8004384 <scalbn+0x104>)
 80042a0:	ee10 0a10 	vmov	r0, s0
 80042a4:	f7fc f9dc 	bl	8000660 <__aeabi_dmul>
 80042a8:	42b5      	cmp	r5, r6
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	db1f      	blt.n	80042f0 <scalbn+0x70>
 80042b0:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80042b4:	3c36      	subs	r4, #54	; 0x36
 80042b6:	442c      	add	r4, r5
 80042b8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 80042bc:	4284      	cmp	r4, r0
 80042be:	dc1f      	bgt.n	8004300 <scalbn+0x80>
 80042c0:	2c00      	cmp	r4, #0
 80042c2:	dd2d      	ble.n	8004320 <scalbn+0xa0>
 80042c4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80042c8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80042cc:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80042d0:	ec43 2b10 	vmov	d0, r2, r3
 80042d4:	bd70      	pop	{r4, r5, r6, pc}
 80042d6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80042da:	4284      	cmp	r4, r0
 80042dc:	d1eb      	bne.n	80042b6 <scalbn+0x36>
 80042de:	ee10 0a10 	vmov	r0, s0
 80042e2:	4619      	mov	r1, r3
 80042e4:	f7fc f80a 	bl	80002fc <__adddf3>
 80042e8:	ec41 0b10 	vmov	d0, r0, r1
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	a31f      	add	r3, pc, #124	; (adr r3, 8004370 <scalbn+0xf0>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc f9b3 	bl	8000660 <__aeabi_dmul>
 80042fa:	ec41 0b10 	vmov	d0, r0, r1
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	ec43 2b11 	vmov	d1, r2, r3
 8004304:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004378 <scalbn+0xf8>
 8004308:	f000 f842 	bl	8004390 <copysign>
 800430c:	a31a      	add	r3, pc, #104	; (adr r3, 8004378 <scalbn+0xf8>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	ec51 0b10 	vmov	r0, r1, d0
 8004316:	f7fc f9a3 	bl	8000660 <__aeabi_dmul>
 800431a:	ec41 0b10 	vmov	d0, r0, r1
 800431e:	bd70      	pop	{r4, r5, r6, pc}
 8004320:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8004324:	da13      	bge.n	800434e <scalbn+0xce>
 8004326:	f24c 3150 	movw	r1, #50000	; 0xc350
 800432a:	428d      	cmp	r5, r1
 800432c:	ec43 2b11 	vmov	d1, r2, r3
 8004330:	dce8      	bgt.n	8004304 <scalbn+0x84>
 8004332:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8004370 <scalbn+0xf0>
 8004336:	f000 f82b 	bl	8004390 <copysign>
 800433a:	a30d      	add	r3, pc, #52	; (adr r3, 8004370 <scalbn+0xf0>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	ec51 0b10 	vmov	r0, r1, d0
 8004344:	f7fc f98c 	bl	8000660 <__aeabi_dmul>
 8004348:	ec41 0b10 	vmov	d0, r0, r1
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8004352:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8004356:	3436      	adds	r4, #54	; 0x36
 8004358:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	2200      	movs	r2, #0
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <scalbn+0x108>)
 8004364:	f7fc f97c 	bl	8000660 <__aeabi_dmul>
 8004368:	ec41 0b10 	vmov	d0, r0, r1
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	bf00      	nop
 8004370:	c2f8f359 	.word	0xc2f8f359
 8004374:	01a56e1f 	.word	0x01a56e1f
 8004378:	8800759c 	.word	0x8800759c
 800437c:	7e37e43c 	.word	0x7e37e43c
 8004380:	43500000 	.word	0x43500000
 8004384:	ffff3cb0 	.word	0xffff3cb0
 8004388:	3c900000 	.word	0x3c900000
 800438c:	f3af 8000 	nop.w

08004390 <copysign>:
 8004390:	ec53 2b10 	vmov	r2, r3, d0
 8004394:	ee11 0a90 	vmov	r0, s3
 8004398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800439c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80043a0:	ea41 0300 	orr.w	r3, r1, r0
 80043a4:	ec43 2b10 	vmov	d0, r2, r3
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	0000      	movs	r0, r0
	...

080043b0 <__errno>:
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <__errno+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000c30 	.word	0x20000c30
 80043bc:	00000000 	.word	0x00000000
 80043c0:	656c6469 	.word	0x656c6469
	...

080043d0 <ch_debug>:
 80043d0:	6e69616d 18011600 08440404 1814100c     main......D.....
 80043e0:	1e1d1c00 00000000 00000000 00000000     ................

080043f0 <vmt>:
 80043f0:	08001811 080017f1 08001851 08001831     ........Q...1...
 8004400:	08001841 08001821 08001801 080017e1     A...!...........

08004410 <_stm32_dma_streams>:
 8004410:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8004420:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8004430:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8004440:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8004450:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8004460:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8004470:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8004480:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8004490:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 80044a0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80044b0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80044c0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080044d0 <default_config>:
 80044d0:	0001c200 40000000 00000000 00000000     .......@........

080044e0 <pal_default_config>:
 80044e0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80044f0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8004500:	00000240 ffffffff 55114515 0000ffff     @........E.U....
 8004510:	04000000 00000040 02208001 00000000     ....@..... .....
 8004520:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8004530:	00060600 55000100 00000000 ffffffff     .......U........
 8004540:	00555055 00000fff 00000000 00000000     UPU.............
 8004550:	00000040 00000000 ffffffff 00000000     @...............
 8004560:	0000ffff 00000000 00000000 00000000     ................
 8004570:	00000000 0000000f 00000000 00000003     ................
	...
 8004590:	6c756e28 0000296c 00000000 00000000     (null)..........
 80045a0:	6e696c62 0072656b 00006325 00000020     blinker.%c.. ...
 80045b0:	432b5441 54535049 3d545241 50435422     AT+CIPSTART="TCP
 80045c0:	31222c22 312e3239 302e3836 2235312e     ","192.168.0.15"
 80045d0:	0d30382c 0000000a 432b5441 45535049     ,80.....AT+CIPSE
 80045e0:	333d444e 0a0d3539 00000000 00002020     ND=395......  ..
 80045f0:	20544547 73737e2f 766c6973 572f7261     GET /~sssilvar/W
 8004600:	505f6265 6674616c 2f6d726f 2f706870     eb_Platform/php/
 8004610:	702e6264 763f7068 005b3d61 5448205d     db.php?va=[.] HT
 8004620:	312f5054 0a0d302e 00000a0d 0000002c     TP/1.0......,...

08004630 <adcgrpcfg1>:
 8004630:	00010000 00000000 08002a21 00000000     ........!*......
 8004640:	40000000 00000000 00000000 00000000     ...@............
 8004650:	00000000 00000001 00000000 00000000     ................
 8004660:	00776f70 00000000 00000000 00000000     pow.............
 8004670:	74727173 00000000 00000000 00000000     sqrt............

08004680 <TWO52>:
 8004680:	00000000 43300000 00000000 c3300000     ......0C......0.
 8004690:	00000043                                C...
