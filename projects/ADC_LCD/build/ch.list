
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	482e      	ldr	r0, [pc, #184]	; (800027c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f240 0000 	movw	r0, #0
 80001de:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001e2:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001ea:	6008      	str	r0, [r1, #0]
 80001ec:	f04f 0000 	mov.w	r0, #0
 80001f0:	eee1 0a10 	vmsr	fpscr, r0
 80001f4:	f64e 713c 	movw	r1, #61244	; 0xef3c
 80001f8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001fc:	6008      	str	r0, [r1, #0]
 80001fe:	2006      	movs	r0, #6
 8000200:	f380 8814 	msr	CONTROL, r0
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	f001 fcf2 	bl	8001bf0 <__early_init>
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <endfiniloop+0xa>)
 800020e:	491d      	ldr	r1, [pc, #116]	; (8000284 <endfiniloop+0xe>)
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <endfiniloop+0x12>)

08000212 <msloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <msloop>
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <endfiniloop+0x16>)
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <endfiniloop+0x6>)

08000220 <psloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <psloop>
 800022a:	4919      	ldr	r1, [pc, #100]	; (8000290 <endfiniloop+0x1a>)
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <endfiniloop+0x1e>)
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <endfiniloop+0x22>)

08000230 <dloop>:
 8000230:	429a      	cmp	r2, r3
 8000232:	bf3e      	ittt	cc
 8000234:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000238:	f842 0b04 	strcc.w	r0, [r2], #4
 800023c:	e7f8      	bcc.n	8000230 <dloop>
 800023e:	2000      	movs	r0, #0
 8000240:	4916      	ldr	r1, [pc, #88]	; (800029c <endfiniloop+0x26>)
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <endfiniloop+0x2a>)

08000244 <bloop>:
 8000244:	4291      	cmp	r1, r2
 8000246:	bf3c      	itt	cc
 8000248:	f841 0b04 	strcc.w	r0, [r1], #4
 800024c:	e7fa      	bcc.n	8000244 <bloop>
 800024e:	f000 f84f 	bl	80002f0 <__late_init>
 8000252:	4c14      	ldr	r4, [pc, #80]	; (80002a4 <endfiniloop+0x2e>)
 8000254:	4d14      	ldr	r5, [pc, #80]	; (80002a8 <endfiniloop+0x32>)

08000256 <initloop>:
 8000256:	42ac      	cmp	r4, r5
 8000258:	da03      	bge.n	8000262 <endinitloop>
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
 800025e:	4788      	blx	r1
 8000260:	e7f9      	b.n	8000256 <initloop>

08000262 <endinitloop>:
 8000262:	f001 fda5 	bl	8001db0 <main>
 8000266:	4c11      	ldr	r4, [pc, #68]	; (80002ac <endfiniloop+0x36>)
 8000268:	4d11      	ldr	r5, [pc, #68]	; (80002b0 <endfiniloop+0x3a>)

0800026a <finiloop>:
 800026a:	42ac      	cmp	r4, r5
 800026c:	da03      	bge.n	8000276 <endfiniloop>
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000272:	4788      	blx	r1
 8000274:	e7f9      	b.n	800026a <finiloop>

08000276 <endfiniloop>:
 8000276:	f000 b843 	b.w	8000300 <__default_exit>
 800027a:	0000      	.short	0x0000
 800027c:	20000800 	.word	0x20000800
 8000280:	55555555 	.word	0x55555555
 8000284:	20000000 	.word	0x20000000
 8000288:	20000400 	.word	0x20000400
 800028c:	20000400 	.word	0x20000400
 8000290:	080020c8 	.word	0x080020c8
 8000294:	20000800 	.word	0x20000800
 8000298:	20000800 	.word	0x20000800
 800029c:	20000800 	.word	0x20000800
 80002a0:	20000d08 	.word	0x20000d08
 80002a4:	080001c0 	.word	0x080001c0
 80002a8:	080001c0 	.word	0x080001c0
 80002ac:	080001c0 	.word	0x080001c0
 80002b0:	080001c0 	.word	0x080001c0
	...

080002c0 <_port_switch>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	ed2d 8a10 	vpush	{s16-s31}
 80002c8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002cc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80002d0:	ecbd 8a10 	vpop	{s16-s31}
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d8 <_port_thread_start>:
 80002d8:	2300      	movs	r3, #0
 80002da:	f383 8811 	msr	BASEPRI, r3
 80002de:	4628      	mov	r0, r5
 80002e0:	47a0      	blx	r4
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fadc 	bl	80008a0 <chThdExit>

080002e8 <_port_switch_from_isr>:
 80002e8:	f000 fa4a 	bl	8000780 <chSchDoReschedule>

080002ec <_port_exit_from_isr>:
 80002ec:	df00      	svc	0
 80002ee:	e7fe      	b.n	80002ee <_port_exit_from_isr+0x2>

080002f0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	f3af 8000 	nop.w
 80002f8:	f3af 8000 	nop.w
 80002fc:	f3af 8000 	nop.w

08000300 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000300:	e7fe      	b.n	8000300 <__default_exit>
 8000302:	bf00      	nop
 8000304:	f3af 8000 	nop.w
 8000308:	f3af 8000 	nop.w
 800030c:	f3af 8000 	nop.w

08000310 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000310:	e7fe      	b.n	8000310 <_unhandled_exception>
 8000312:	bf00      	nop
 8000314:	f3af 8000 	nop.w
 8000318:	f3af 8000 	nop.w
 800031c:	f3af 8000 	nop.w

08000320 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000320:	e7fe      	b.n	8000320 <_idle_thread>
 8000322:	bf00      	nop
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w

08000330 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000336:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000338:	2400      	movs	r4, #0
 800033a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800033e:	4e20      	ldr	r6, [pc, #128]	; (80003c0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000340:	4d20      	ldr	r5, [pc, #128]	; (80003c4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000342:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000346:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000348:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	68f2      	ldr	r2, [r6, #12]
 800034e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000352:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000354:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000356:	2120      	movs	r1, #32
 8000358:	f042 0201 	orr.w	r2, r2, #1
 800035c:	2610      	movs	r6, #16
 800035e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000360:	b083      	sub	sp, #12
 8000362:	77de      	strb	r6, [r3, #31]
 8000364:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000368:	f000 f942 	bl	80005f0 <_scheduler_init>
  _vt_init();
 800036c:	f000 f878 	bl	8000460 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000370:	f000 fb16 	bl	80009a0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000374:	f000 fca4 	bl	8000cc0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000378:	f000 fcda 	bl	8000d30 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800037c:	4628      	mov	r0, r5
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	f000 fa06 	bl	8000790 <_thread_init>
 8000384:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000388:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800038a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800038c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800038e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000392:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	490c      	ldr	r1, [pc, #48]	; (80003c8 <chSysInit+0x98>)
 8000398:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800039a:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800039e:	9400      	str	r4, [sp, #0]
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <chSysInit+0x9c>)
 80003a2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80003a6:	f000 fa13 	bl	80007d0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <chSysInit+0xa0>)
 80003ac:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 80003ae:	b003      	add	sp, #12
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00
 80003b8:	05fa0300 	.word	0x05fa0300
 80003bc:	e0001000 	.word	0xe0001000
 80003c0:	e000edf0 	.word	0xe000edf0
 80003c4:	20000830 	.word	0x20000830
 80003c8:	08001ed0 	.word	0x08001ed0
 80003cc:	08000321 	.word	0x08000321
 80003d0:	08001ec0 	.word	0x08001ec0
 80003d4:	f3af 8000 	nop.w
 80003d8:	f3af 8000 	nop.w
 80003dc:	f3af 8000 	nop.w

080003e0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80003e4:	4d1b      	ldr	r5, [pc, #108]	; (8000454 <chSysTimerHandlerI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003e6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80003ea:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80003ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80003ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003f0:	68a3      	ldr	r3, [r4, #8]
 80003f2:	1a42      	subs	r2, r0, r1
 80003f4:	429a      	cmp	r2, r3
 80003f6:	f105 091c 	add.w	r9, r5, #28
 80003fa:	d31a      	bcc.n	8000432 <chSysTimerHandlerI+0x52>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80003fc:	2600      	movs	r6, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003fe:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000402:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000404:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000408:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800040a:	454a      	cmp	r2, r9
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800040c:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800040e:	f8c2 9004 	str.w	r9, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000412:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000414:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000416:	d018      	beq.n	800044a <chSysTimerHandlerI+0x6a>
 8000418:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800041c:	6920      	ldr	r0, [r4, #16]
 800041e:	47d0      	blx	sl
 8000420:	f388 8811 	msr	BASEPRI, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000424:	69ec      	ldr	r4, [r5, #28]
 8000426:	6a78      	ldr	r0, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000428:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800042a:	68a3      	ldr	r3, [r4, #8]
 800042c:	1a42      	subs	r2, r0, r1
 800042e:	4293      	cmp	r3, r2
 8000430:	d9e7      	bls.n	8000402 <chSysTimerHandlerI+0x22>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000432:	454c      	cmp	r4, r9
 8000434:	d00c      	beq.n	8000450 <chSysTimerHandlerI+0x70>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000436:	440b      	add	r3, r1
 8000438:	1a1b      	subs	r3, r3, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800043a:	2b01      	cmp	r3, #1
 800043c:	bf98      	it	ls
 800043e:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000440:	4418      	add	r0, r3
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 8000442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000446:	f000 bcf3 	b.w	8000e30 <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800044a:	f000 fce9 	bl	8000e20 <stStopAlarm>
 800044e:	e7e3      	b.n	8000418 <chSysTimerHandlerI+0x38>
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	20000800 	.word	0x20000800
 8000458:	f3af 8000 	nop.w
 800045c:	f3af 8000 	nop.w

08000460 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000466:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800046a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800046c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800046e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000470:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000472:	621a      	str	r2, [r3, #32]
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000800 	.word	0x20000800
 800047c:	f3af 8000 	nop.w

08000480 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000482:	4e1c      	ldr	r6, [pc, #112]	; (80004f4 <chVTDoSetI+0x74>)
 8000484:	4634      	mov	r4, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000486:	2901      	cmp	r1, #1
 8000488:	bf98      	it	ls
 800048a:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800048c:	f854 7f1c 	ldr.w	r7, [r4, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000490:	6103      	str	r3, [r0, #16]
 8000492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000496:	42a7      	cmp	r7, r4
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000498:	4605      	mov	r5, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800049a:	60c2      	str	r2, [r0, #12]
 800049c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800049e:	d01e      	beq.n	80004de <chVTDoSetI+0x5e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80004a0:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80004a2:	68bb      	ldr	r3, [r7, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80004a4:	4408      	add	r0, r1
 80004a6:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80004a8:	429c      	cmp	r4, r3
 80004aa:	d315      	bcc.n	80004d8 <chVTDoSetI+0x58>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 80004ac:	69f3      	ldr	r3, [r6, #28]
  while (p->vt_delta < delta) {
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	4294      	cmp	r4, r2
 80004b2:	d904      	bls.n	80004be <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 80004b4:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80004b6:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	42a2      	cmp	r2, r4
 80004bc:	d3fa      	bcc.n	80004b4 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80004be:	685a      	ldr	r2, [r3, #4]
 80004c0:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80004c2:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80004c4:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 80004c6:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 80004c8:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80004ca:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80004cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80004d0:	1b14      	subs	r4, r2, r4
 80004d2:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80004d4:	6271      	str	r1, [r6, #36]	; 0x24
 80004d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80004d8:	f000 fcaa 	bl	8000e30 <stSetAlarm>
 80004dc:	e7e6      	b.n	80004ac <chVTDoSetI+0x2c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80004de:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80004e0:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 80004e2:	6235      	str	r5, [r6, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 80004e4:	4408      	add	r0, r1
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80004e6:	602f      	str	r7, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004e8:	606f      	str	r7, [r5, #4]
      vtp->vt_delta = delay;
 80004ea:	60a9      	str	r1, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 80004ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80004f0:	f000 bc8e 	b.w	8000e10 <stStartAlarm>
 80004f4:	20000800 	.word	0x20000800
 80004f8:	f3af 8000 	nop.w
 80004fc:	f3af 8000 	nop.w

08000500 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <chVTDoResetI+0x70>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000506:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000508:	d010      	beq.n	800052c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800050a:	6841      	ldr	r1, [r0, #4]
 800050c:	6802      	ldr	r2, [r0, #0]
 800050e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000510:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000512:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000514:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000516:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000518:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800051a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800051c:	d003      	beq.n	8000526 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800051e:	6883      	ldr	r3, [r0, #8]
 8000520:	6891      	ldr	r1, [r2, #8]
 8000522:	440b      	add	r3, r1
 8000524:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800052a:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800052c:	4618      	mov	r0, r3
 800052e:	6811      	ldr	r1, [r2, #0]
 8000530:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000534:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000536:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000538:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 800053a:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800053c:	d013      	beq.n	8000566 <chVTDoResetI+0x66>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800053e:	6892      	ldr	r2, [r2, #8]
 8000540:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000542:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000544:	1883      	adds	r3, r0, r2
 8000546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054a:	608b      	str	r3, [r1, #8]
 800054c:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800054e:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000550:	4293      	cmp	r3, r2
 8000552:	d9e8      	bls.n	8000526 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000554:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000556:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000558:	bf98      	it	ls
 800055a:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800055c:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800055e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000562:	f000 bc65 	b.w	8000e30 <stSetAlarm>
 8000566:	f85d 4b04 	ldr.w	r4, [sp], #4
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800056a:	f000 bc59 	b.w	8000e20 <stStopAlarm>
 800056e:	bf00      	nop
 8000570:	20000800 	.word	0x20000800
 8000574:	f3af 8000 	nop.w
 8000578:	f3af 8000 	nop.w
 800057c:	f3af 8000 	nop.w

08000580 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000580:	b410      	push	{r4}
 8000582:	2320      	movs	r3, #32
 8000584:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000588:	7f03      	ldrb	r3, [r0, #28]
 800058a:	2b07      	cmp	r3, #7
 800058c:	d80e      	bhi.n	80005ac <wakeup+0x2c>
 800058e:	e8df f003 	tbb	[pc, r3]
 8000592:	0d27      	.short	0x0d27
 8000594:	0408230d 	.word	0x0408230d
 8000598:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800059a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800059c:	6893      	ldr	r3, [r2, #8]
 800059e:	3301      	adds	r3, #1
 80005a0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80005a2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80005a6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80005a8:	6802      	ldr	r2, [r0, #0]
 80005aa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80005ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80005b0:	2200      	movs	r2, #0
 80005b2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80005b6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80005b8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80005ba:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	428a      	cmp	r2, r1
 80005c0:	d2fb      	bcs.n	80005ba <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80005c6:	6003      	str	r3, [r0, #0]
 80005c8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80005ca:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80005cc:	6058      	str	r0, [r3, #4]
 80005ce:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80005d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005d6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80005d8:	6a03      	ldr	r3, [r0, #32]
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
    break;
 80005de:	e7e5      	b.n	80005ac <wakeup+0x2c>
 80005e0:	2300      	movs	r3, #0
 80005e2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80005e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20000800 	.word	0x20000800

080005f0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80005f2:	2200      	movs	r2, #0
 80005f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80005f6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80005f8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80005fa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	4770      	bx	lr
 8000600:	20000800 	.word	0x20000800
 8000604:	f3af 8000 	nop.w
 8000608:	f3af 8000 	nop.w
 800060c:	f3af 8000 	nop.w

08000610 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000610:	2200      	movs	r2, #0
 8000612:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000616:	b410      	push	{r4}
 8000618:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800061a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800061c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	428a      	cmp	r2, r1
 8000622:	d2fb      	bcs.n	800061c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000628:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800062a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800062c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800062e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000800 	.word	0x20000800
 800063c:	f3af 8000 	nop.w

08000640 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <chSchGoSleepS+0x20>)
 8000642:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000644:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000646:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000648:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 800064a:	6810      	ldr	r0, [r2, #0]
 800064c:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800064e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000650:	6043      	str	r3, [r0, #4]
 8000652:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000654:	4610      	mov	r0, r2
}
 8000656:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800065a:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800065c:	f7ff be30 	b.w	80002c0 <_port_switch>
 8000660:	20000800 	.word	0x20000800
 8000664:	f3af 8000 	nop.w
 8000668:	f3af 8000 	nop.w
 800066c:	f3af 8000 	nop.w

08000670 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000670:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000672:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000674:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000676:	d012      	beq.n	800069e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000678:	4c0c      	ldr	r4, [pc, #48]	; (80006ac <chSchGoSleepTimeoutS+0x3c>)
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <chSchGoSleepTimeoutS+0x40>)
 800067c:	69a3      	ldr	r3, [r4, #24]
 800067e:	4605      	mov	r5, r0
 8000680:	a801      	add	r0, sp, #4
 8000682:	f7ff fefd 	bl	8000480 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000686:	4628      	mov	r0, r5
 8000688:	f7ff ffda 	bl	8000640 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800068c:	9b04      	ldr	r3, [sp, #16]
 800068e:	b113      	cbz	r3, 8000696 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8000690:	a801      	add	r0, sp, #4
 8000692:	f7ff ff35 	bl	8000500 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000696:	69a3      	ldr	r3, [r4, #24]
}
 8000698:	6a18      	ldr	r0, [r3, #32]
 800069a:	b007      	add	sp, #28
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	4c03      	ldr	r4, [pc, #12]	; (80006ac <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80006a0:	f7ff ffce 	bl	8000640 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80006a4:	69a3      	ldr	r3, [r4, #24]
}
 80006a6:	6a18      	ldr	r0, [r3, #32]
 80006a8:	b007      	add	sp, #28
 80006aa:	bd30      	pop	{r4, r5, pc}
 80006ac:	20000800 	.word	0x20000800
 80006b0:	08000581 	.word	0x08000581
 80006b4:	f3af 8000 	nop.w
 80006b8:	f3af 8000 	nop.w
 80006bc:	f3af 8000 	nop.w

080006c0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80006c2:	b470      	push	{r4, r5, r6}
 80006c4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006c6:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80006c8:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006ca:	68a8      	ldr	r0, [r5, #8]
 80006cc:	68a1      	ldr	r1, [r4, #8]
 80006ce:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006d0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006d4:	d80b      	bhi.n	80006ee <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006d6:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80006d8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	4291      	cmp	r1, r2
 80006de:	d9fb      	bls.n	80006d8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80006e4:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80006e6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80006e8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80006ea:	bc70      	pop	{r4, r5, r6}
 80006ec:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006ee:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80006f0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 80006f2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006f4:	6891      	ldr	r1, [r2, #8]
 80006f6:	4288      	cmp	r0, r1
 80006f8:	d9fb      	bls.n	80006f2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80006fa:	6850      	ldr	r0, [r2, #4]
 80006fc:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80006fe:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000700:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000702:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8000704:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000706:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8000708:	4629      	mov	r1, r5
 800070a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800070c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800070e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000710:	f7ff bdd6 	b.w	80002c0 <_port_switch>
 8000714:	20000800 	.word	0x20000800
 8000718:	f3af 8000 	nop.w
 800071c:	f3af 8000 	nop.w

08000720 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <chSchIsPreemptionRequired+0x14>)
 8000722:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 8000724:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8000726:	6890      	ldr	r0, [r2, #8]
 8000728:	689b      	ldr	r3, [r3, #8]
#endif
}
 800072a:	4298      	cmp	r0, r3
 800072c:	bf94      	ite	ls
 800072e:	2000      	movls	r0, #0
 8000730:	2001      	movhi	r0, #1
 8000732:	4770      	bx	lr
 8000734:	20000800 	.word	0x20000800
 8000738:	f3af 8000 	nop.w
 800073c:	f3af 8000 	nop.w

08000740 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000742:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000744:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000746:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000748:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800074a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800074c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800074e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000750:	7701      	strb	r1, [r0, #28]
 8000752:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000754:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000756:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000758:	7725      	strb	r5, [r4, #28]
 800075a:	e000      	b.n	800075e <chSchDoRescheduleAhead+0x1e>
 800075c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	428a      	cmp	r2, r1
 8000762:	d8fb      	bhi.n	800075c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000768:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800076a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800076c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800076e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000770:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000772:	f7ff bda5 	b.w	80002c0 <_port_switch>
 8000776:	bf00      	nop
 8000778:	20000800 	.word	0x20000800
 800077c:	f3af 8000 	nop.w

08000780 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000780:	f7ff bfde 	b.w	8000740 <chSchDoRescheduleAhead>
 8000784:	f3af 8000 	nop.w
 8000788:	f3af 8000 	nop.w
 800078c:	f3af 8000 	nop.w

08000790 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000792:	4c0d      	ldr	r4, [pc, #52]	; (80007c8 <_thread_init+0x38>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000794:	63c1      	str	r1, [r0, #60]	; 0x3c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000796:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000798:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800079a:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800079c:	f100 0128 	add.w	r1, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007a0:	f04f 0e02 	mov.w	lr, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007a4:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80007a6:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007aa:	6145      	str	r5, [r0, #20]
 80007ac:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007ae:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007b2:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80007b4:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80007b6:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80007b8:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80007ba:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 80007bc:	6128      	str	r0, [r5, #16]
 80007be:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80007c0:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80007c2:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80007c4:	62c1      	str	r1, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	20000800 	.word	0x20000800
 80007cc:	f3af 8000 	nop.w

080007d0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	2620      	movs	r6, #32
 80007d6:	f386 8811 	msr	BASEPRI, r6

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007da:	3964      	subs	r1, #100	; 0x64
 80007dc:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007de:	4e13      	ldr	r6, [pc, #76]	; (800082c <chThdCreateStatic+0x5c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007e0:	4d13      	ldr	r5, [pc, #76]	; (8000830 <chThdCreateStatic+0x60>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007e2:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007e4:	60c1      	str	r1, [r0, #12]
 80007e6:	640b      	str	r3, [r1, #64]	; 0x40
 80007e8:	9b06      	ldr	r3, [sp, #24]
 80007ea:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007ec:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007ee:	660d      	str	r5, [r1, #96]	; 0x60
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80007f0:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80007f4:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007f6:	7703      	strb	r3, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007f8:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80007fa:	f100 0328 	add.w	r3, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80007fe:	6082      	str	r2, [r0, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000800:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000802:	6106      	str	r6, [r0, #16]
 8000804:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000806:	63c2      	str	r2, [r0, #60]	; 0x3c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000808:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800080a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800080c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800080e:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000810:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000812:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000814:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000818:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800081a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800081c:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800081e:	f7ff ff4f 	bl	80006c0 <chSchWakeupS>
 8000822:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8000826:	4620      	mov	r0, r4
 8000828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082a:	bf00      	nop
 800082c:	20000800 	.word	0x20000800
 8000830:	080002d9 	.word	0x080002d9
 8000834:	f3af 8000 	nop.w
 8000838:	f3af 8000 	nop.w
 800083c:	f3af 8000 	nop.w

08000840 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000840:	b508      	push	{r3, lr}
 8000842:	4601      	mov	r1, r0
 8000844:	2320      	movs	r3, #32
 8000846:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff10 	bl	8000670 <chSchGoSleepTimeoutS>
 8000850:	2300      	movs	r3, #0
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	bd08      	pop	{r3, pc}
 8000858:	f3af 8000 	nop.w
 800085c:	f3af 8000 	nop.w

08000860 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000860:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <chThdExitS+0x3c>)
 8000864:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000866:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8000868:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800086a:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800086e:	429d      	cmp	r5, r3
 8000870:	d007      	beq.n	8000882 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff feca 	bl	8000610 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800087c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800087e:	42ab      	cmp	r3, r5
 8000880:	d1f7      	bne.n	8000872 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000882:	7f63      	ldrb	r3, [r4, #29]
 8000884:	079b      	lsls	r3, r3, #30
 8000886:	d104      	bne.n	8000892 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8000888:	6963      	ldr	r3, [r4, #20]
 800088a:	6922      	ldr	r2, [r4, #16]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	6922      	ldr	r2, [r4, #16]
 8000890:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000892:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8000894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000898:	f7ff bed2 	b.w	8000640 <chSchGoSleepS>
 800089c:	20000800 	.word	0x20000800

080008a0 <chThdExit>:
 80008a0:	2320      	movs	r3, #32
 80008a2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80008a6:	f7ff bfdb 	b.w	8000860 <chThdExitS>
 80008aa:	bf00      	nop
 80008ac:	f3af 8000 	nop.w

080008b0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80008b0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80008b2:	4c05      	ldr	r4, [pc, #20]	; (80008c8 <chThdSuspendS+0x18>)
 80008b4:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80008b6:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80008b8:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 80008ba:	621a      	str	r2, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80008bc:	2003      	movs	r0, #3
 80008be:	f7ff febf 	bl	8000640 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 80008c2:	69a3      	ldr	r3, [r4, #24]
}
 80008c4:	6a18      	ldr	r0, [r3, #32]
 80008c6:	bd10      	pop	{r4, pc}
 80008c8:	20000800 	.word	0x20000800
 80008cc:	f3af 8000 	nop.w

080008d0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80008d0:	6803      	ldr	r3, [r0, #0]
 80008d2:	b12b      	cbz	r3, 80008e0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80008d4:	2200      	movs	r2, #0
 80008d6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80008d8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80008da:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 80008dc:	f7ff be98 	b.w	8000610 <chSchReadyI>
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	f3af 8000 	nop.w
 80008e8:	f3af 8000 	nop.w
 80008ec:	f3af 8000 	nop.w

080008f0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80008f0:	b169      	cbz	r1, 800090e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80008f4:	b410      	push	{r4}
 80008f6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80008f8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80008fa:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80008fc:	2004      	movs	r0, #4
 80008fe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000902:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000904:	6053      	str	r3, [r2, #4]
}
 8000906:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800090a:	f7ff beb1 	b.w	8000670 <chSchGoSleepTimeoutS>
}
 800090e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000912:	4770      	bx	lr
 8000914:	20000800 	.word	0x20000800
 8000918:	f3af 8000 	nop.w
 800091c:	f3af 8000 	nop.w

08000920 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000920:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000922:	4290      	cmp	r0, r2
 8000924:	d00a      	beq.n	800093c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000926:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000928:	6814      	ldr	r4, [r2, #0]
 800092a:	6004      	str	r4, [r0, #0]
 800092c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800092e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000930:	6211      	str	r1, [r2, #32]
  (void) chSchReadyI(tp);
 8000932:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000938:	f7ff be6a 	b.w	8000610 <chSchReadyI>
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000940:	4b01      	ldr	r3, [pc, #4]	; (8000948 <chTMStartMeasurementX+0x8>)
 8000942:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000944:	6083      	str	r3, [r0, #8]
 8000946:	4770      	bx	lr
 8000948:	e0001000 	.word	0xe0001000
 800094c:	f3af 8000 	nop.w

08000950 <chTMStopMeasurementX>:
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000952:	4910      	ldr	r1, [pc, #64]	; (8000994 <chTMStopMeasurementX+0x44>)
 8000954:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000956:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000958:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800095a:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800095c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800095e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000960:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000968:	18e4      	adds	r4, r4, r3
 800096a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800096e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000970:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000972:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000974:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000976:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800097a:	d805      	bhi.n	8000988 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800097c:	6802      	ldr	r2, [r0, #0]
 800097e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000980:	bf38      	it	cc
 8000982:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000984:	bcf0      	pop	{r4, r5, r6, r7}
 8000986:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000988:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800098a:	bcf0      	pop	{r4, r5, r6, r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e0001000 	.word	0xe0001000
 8000994:	20000800 	.word	0x20000800
 8000998:	f3af 8000 	nop.w
 800099c:	f3af 8000 	nop.w

080009a0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80009a0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80009a2:	4c0c      	ldr	r4, [pc, #48]	; (80009d4 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80009a4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80009a6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80009ac:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80009ae:	2600      	movs	r6, #0
 80009b0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80009b2:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80009b4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 80009b6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 80009b8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80009ba:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80009bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80009c0:	f7ff ffbe 	bl	8000940 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80009c4:	4668      	mov	r0, sp
 80009c6:	f7ff ffc3 	bl	8000950 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80009ca:	9b02      	ldr	r3, [sp, #8]
 80009cc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80009ce:	b006      	add	sp, #24
 80009d0:	bdd0      	pop	{r4, r6, r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000800 	.word	0x20000800
 80009d8:	f3af 8000 	nop.w
 80009dc:	f3af 8000 	nop.w

080009e0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80009e0:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80009e2:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80009e4:	6040      	str	r0, [r0, #4]
 80009e6:	6083      	str	r3, [r0, #8]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	f3af 8000 	nop.w

080009f0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80009f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80009f2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80009f4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80009f6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80009f8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80009fa:	d009      	beq.n	8000a10 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80009fc:	2a0b      	cmp	r2, #11
 80009fe:	d000      	beq.n	8000a02 <chEvtSignalI+0x12>
 8000a00:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000a02:	6a03      	ldr	r3, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000a04:	438b      	bics	r3, r1
 8000a06:	d1fb      	bne.n	8000a00 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000a0c:	f7ff be00 	b.w	8000610 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a10:	6a03      	ldr	r3, [r0, #32]
 8000a12:	4219      	tst	r1, r3
 8000a14:	d1f8      	bne.n	8000a08 <chEvtSignalI+0x18>
 8000a16:	4770      	bx	lr
 8000a18:	f3af 8000 	nop.w
 8000a1c:	f3af 8000 	nop.w

08000a20 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a20:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000a22:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a24:	42a0      	cmp	r0, r4
 8000a26:	d00f      	beq.n	8000a48 <chEvtBroadcastFlagsI+0x28>
 8000a28:	4606      	mov	r6, r0
 8000a2a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 8000a2c:	68e3      	ldr	r3, [r4, #12]
 8000a2e:	432b      	orrs	r3, r5
 8000a30:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000a32:	b115      	cbz	r5, 8000a3a <chEvtBroadcastFlagsI+0x1a>
 8000a34:	6922      	ldr	r2, [r4, #16]
 8000a36:	4213      	tst	r3, r2
 8000a38:	d003      	beq.n	8000a42 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000a3a:	68a1      	ldr	r1, [r4, #8]
 8000a3c:	6860      	ldr	r0, [r4, #4]
 8000a3e:	f7ff ffd7 	bl	80009f0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8000a42:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d1f1      	bne.n	8000a2c <chEvtBroadcastFlagsI+0xc>
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w

08000a50 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 8000a50:	b430      	push	{r4, r5}
 8000a52:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8000a54:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000a56:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000a58:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000a5a:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000a5c:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a5e:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000a60:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000a62:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8000a64:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8000a66:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8000a68:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 8000a6a:	bc30      	pop	{r4, r5}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000a70:	6983      	ldr	r3, [r0, #24]
 8000a72:	6942      	ldr	r2, [r0, #20]
 8000a74:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8000a76:	b510      	push	{r4, lr}
 8000a78:	6883      	ldr	r3, [r0, #8]
 8000a7a:	d00f      	beq.n	8000a9c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000a7c:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 8000a7e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000a80:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 8000a82:	6144      	str	r4, [r0, #20]
 8000a84:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000a86:	6942      	ldr	r2, [r0, #20]
 8000a88:	6903      	ldr	r3, [r0, #16]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d301      	bcc.n	8000a92 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 8000a8e:	68c3      	ldr	r3, [r0, #12]
 8000a90:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8000a92:	2100      	movs	r1, #0
 8000a94:	f7ff ff44 	bl	8000920 <chThdDequeueNextI>

  return Q_OK;
 8000a98:	2000      	movs	r0, #0
 8000a9a:	bd10      	pop	{r4, pc}
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0ed      	beq.n	8000a7c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8000aa0:	f06f 0003 	mvn.w	r0, #3
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	f3af 8000 	nop.w
 8000aac:	f3af 8000 	nop.w

08000ab0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	460e      	mov	r6, r1
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8000abc:	69c3      	ldr	r3, [r0, #28]
 8000abe:	b12b      	cbz	r3, 8000acc <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8000ac0:	4798      	blx	r3
 8000ac2:	e003      	b.n	8000acc <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000ac4:	f7ff ff14 	bl	80008f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	db15      	blt.n	8000af8 <chIQGetTimeout+0x48>
 8000acc:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000ace:	4631      	mov	r1, r6
 8000ad0:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0f6      	beq.n	8000ac4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000ad6:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ad8:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000ada:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000adc:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000ade:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
 8000ae2:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000ae4:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000ae6:	bf28      	it	cs
 8000ae8:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000aea:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000aec:	bf28      	it	cs
 8000aee:	61a3      	strcs	r3, [r4, #24]
 8000af0:	2300      	movs	r3, #0
 8000af2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	bf00      	nop

08000b00 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	4604      	mov	r4, r0
 8000b06:	b083      	sub	sp, #12
 8000b08:	4689      	mov	r9, r1
 8000b0a:	4693      	mov	fp, r2
 8000b0c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000b0e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000b12:	2720      	movs	r7, #32
 8000b14:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000b18:	2600      	movs	r6, #0
 8000b1a:	9701      	str	r7, [sp, #4]
 8000b1c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000b1e:	f1b8 0f00 	cmp.w	r8, #0
 8000b22:	d005      	beq.n	8000b30 <chIQReadTimeout+0x30>
      nfy(iqp);
 8000b24:	4620      	mov	r0, r4
 8000b26:	47c0      	blx	r8
 8000b28:	e002      	b.n	8000b30 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000b2a:	f7ff fee1 	bl	80008f0 <chThdEnqueueTimeoutS>
 8000b2e:	b9d8      	cbnz	r0, 8000b68 <chIQReadTimeout+0x68>
 8000b30:	68a7      	ldr	r7, [r4, #8]
 8000b32:	4629      	mov	r1, r5
 8000b34:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d0f7      	beq.n	8000b2a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000b3a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000b3c:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 8000b3e:	1c51      	adds	r1, r2, #1
 8000b40:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000b42:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000b44:	7813      	ldrb	r3, [r2, #0]
 8000b46:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000b4a:	6923      	ldr	r3, [r4, #16]
 8000b4c:	69a2      	ldr	r2, [r4, #24]
 8000b4e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000b50:	bf24      	itt	cs
 8000b52:	68e3      	ldrcs	r3, [r4, #12]
 8000b54:	61a3      	strcs	r3, [r4, #24]
 8000b56:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8000b5a:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000b5c:	45b3      	cmp	fp, r6
 8000b5e:	d005      	beq.n	8000b6c <chIQReadTimeout+0x6c>
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	f383 8811 	msr	BASEPRI, r3
 8000b66:	e7da      	b.n	8000b1e <chIQReadTimeout+0x1e>
 8000b68:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	b003      	add	sp, #12
 8000b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b74:	f3af 8000 	nop.w
 8000b78:	f3af 8000 	nop.w
 8000b7c:	f3af 8000 	nop.w

08000b80 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8000b80:	b430      	push	{r4, r5}
 8000b82:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000b84:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000b86:	188d      	adds	r5, r1, r2
 8000b88:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b8a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000b8c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000b8e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8000b90:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8000b92:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8000b94:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000b96:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 8000b98:	bc30      	pop	{r4, r5}
 8000b9a:	4770      	bx	lr
 8000b9c:	f3af 8000 	nop.w

08000ba0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	4616      	mov	r6, r2
 8000ba8:	2320      	movs	r3, #32
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	e003      	b.n	8000bb8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000bb0:	f7ff fe9e 	bl	80008f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	db18      	blt.n	8000bea <chOQPutTimeout+0x4a>
 8000bb8:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000bba:	4631      	mov	r1, r6
 8000bbc:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000bc2:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000bc4:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000bca:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000bcc:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000bce:	6923      	ldr	r3, [r4, #16]
 8000bd0:	6962      	ldr	r2, [r4, #20]
 8000bd2:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000bd4:	bf24      	itt	cs
 8000bd6:	68e3      	ldrcs	r3, [r4, #12]
 8000bd8:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000bda:	69e3      	ldr	r3, [r4, #28]
 8000bdc:	b10b      	cbz	r3, 8000be2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 8000bde:	4620      	mov	r0, r4
 8000be0:	4798      	blx	r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8000be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bea:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8000bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bf0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000bf2:	6982      	ldr	r2, [r0, #24]
 8000bf4:	6943      	ldr	r3, [r0, #20]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	6883      	ldr	r3, [r0, #8]
 8000bfa:	d00e      	beq.n	8000c1a <chOQGetI+0x2a>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000bfc:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000bfe:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000c00:	3301      	adds	r3, #1
 8000c02:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 8000c04:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000c06:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000c08:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000c0a:	d301      	bcc.n	8000c10 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 8000c0c:	68c3      	ldr	r3, [r0, #12]
 8000c0e:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8000c10:	2100      	movs	r1, #0
 8000c12:	f7ff fe85 	bl	8000920 <chThdDequeueNextI>

  return (msg_t)b;
 8000c16:	4620      	mov	r0, r4
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0ee      	beq.n	8000bfc <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8000c1e:	f06f 0002 	mvn.w	r0, #2
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
 8000c24:	f3af 8000 	nop.w
 8000c28:	f3af 8000 	nop.w
 8000c2c:	f3af 8000 	nop.w

08000c30 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	b083      	sub	sp, #12
 8000c36:	4604      	mov	r4, r0
 8000c38:	460d      	mov	r5, r1
 8000c3a:	4616      	mov	r6, r2
 8000c3c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8000c3e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000c42:	f04f 0920 	mov.w	r9, #32
 8000c46:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8000c4a:	2700      	movs	r7, #0
 8000c4c:	46ba      	mov	sl, r7
 8000c4e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000c50:	f105 0b01 	add.w	fp, r5, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000c54:	1e59      	subs	r1, r3, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8000c56:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000c58:	b1fb      	cbz	r3, 8000c9a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000c5a:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000c5c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000c5e:	1c59      	adds	r1, r3, #1
 8000c60:	6161      	str	r1, [r4, #20]
 8000c62:	7829      	ldrb	r1, [r5, #0]
 8000c64:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000c66:	6923      	ldr	r3, [r4, #16]
 8000c68:	6961      	ldr	r1, [r4, #20]
 8000c6a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000c6c:	bf24      	itt	cs
 8000c6e:	68e3      	ldrcs	r3, [r4, #12]
 8000c70:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000c72:	f1b8 0f00 	cmp.w	r8, #0
 8000c76:	d000      	beq.n	8000c7a <chOQWriteTimeout+0x4a>
      nfy(oqp);
 8000c78:	47c0      	blx	r8
 8000c7a:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8000c7e:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8000c80:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8000c84:	d013      	beq.n	8000cae <chOQWriteTimeout+0x7e>
 8000c86:	f389 8811 	msr	BASEPRI, r9
 8000c8a:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000c8c:	465d      	mov	r5, fp
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000c8e:	1e59      	subs	r1, r3, #1
    *oqp->q_wrptr++ = *bp++;
 8000c90:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8000c94:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1df      	bne.n	8000c5a <chOQWriteTimeout+0x2a>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000c9a:	9901      	ldr	r1, [sp, #4]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff fe26 	bl	80008f0 <chThdEnqueueTimeoutS>
 8000ca4:	9b00      	ldr	r3, [sp, #0]
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d0d1      	beq.n	8000c4e <chOQWriteTimeout+0x1e>
 8000caa:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000cae:	4638      	mov	r0, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb6:	bf00      	nop
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	f3af 8000 	nop.w

08000cc0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000cc6:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cc8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000ccc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cd0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000d0f 	.word	0x20000d0f
 8000cdc:	20010000 	.word	0x20010000
 8000ce0:	200009dc 	.word	0x200009dc
 8000ce4:	200009d8 	.word	0x200009d8
 8000ce8:	f3af 8000 	nop.w
 8000cec:	f3af 8000 	nop.w

08000cf0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000cf0:	b410      	push	{r4}
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000cf8:	4c09      	ldr	r4, [pc, #36]	; (8000d20 <chCoreAlloc+0x30>)
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <chCoreAlloc+0x34>)
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000d00:	1dc3      	adds	r3, r0, #7
 8000d02:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000d06:	1a89      	subs	r1, r1, r2
 8000d08:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000d0a:	bf9d      	ittte	ls
 8000d0c:	189b      	addls	r3, r3, r2
 8000d0e:	6023      	strls	r3, [r4, #0]

  return p;
 8000d10:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000d12:	2000      	movhi	r0, #0
 8000d14:	2300      	movs	r3, #0
 8000d16:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	200009dc 	.word	0x200009dc
 8000d24:	200009d8 	.word	0x200009d8
 8000d28:	f3af 8000 	nop.w
 8000d2c:	f3af 8000 	nop.w

08000d30 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <_heap_init+0x14>)
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_heap_init+0x18>)
 8000d34:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000d36:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000d3e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000d40:	f7ff be4e 	b.w	80009e0 <chMtxObjectInit>
 8000d44:	200009e0 	.word	0x200009e0
 8000d48:	08000cf1 	.word	0x08000cf1
 8000d4c:	f3af 8000 	nop.w

08000d50 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <SVC_Handler+0x1c>)
 8000d52:	6853      	ldr	r3, [r2, #4]
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000d5a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000d5e:	3368      	adds	r3, #104	; 0x68
 8000d60:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d64:	2300      	movs	r3, #0
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ef30 	.word	0xe000ef30

08000d70 <_port_irq_epilogue>:
 8000d70:	2320      	movs	r3, #32
 8000d72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <_port_irq_epilogue+0x50>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000d7e:	d102      	bne.n	8000d86 <_port_irq_epilogue+0x16>
 8000d80:	f383 8811 	msr	BASEPRI, r3
 8000d84:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000d86:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000d88:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000d8c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000d9c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000da0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 8000da4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000da8:	f7ff fcba 	bl	8000720 <chSchIsPreemptionRequired>
 8000dac:	b118      	cbz	r0, 8000db6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <_port_irq_epilogue+0x58>)
 8000db0:	f844 3c50 	str.w	r3, [r4, #-80]
 8000db4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <_port_irq_epilogue+0x5c>)
 8000db8:	f844 3c50 	str.w	r3, [r4, #-80]
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	e000ef30 	.word	0xe000ef30
 8000dc8:	080002e9 	.word	0x080002e9
 8000dcc:	080002ec 	.word	0x080002ec

08000dd0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000dd0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8000dd2:	f000 fb15 	bl	8001400 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <halInit+0x20>)
 8000dd8:	f000 fd7a 	bl	80018d0 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 8000ddc:	f000 f830 	bl	8000e40 <adcInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8000de0:	f000 f8ae 	bl	8000f40 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000de4:	f000 ff0c 	bl	8001c00 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8000de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8000dec:	f000 b808 	b.w	8000e00 <stInit>
 8000df0:	08001fd0 	.word	0x08001fd0
 8000df4:	f3af 8000 	nop.w
 8000df8:	f3af 8000 	nop.w
 8000dfc:	f3af 8000 	nop.w

08000e00 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8000e00:	f000 bbb6 	b.w	8001570 <st_lld_init>
 8000e04:	f3af 8000 	nop.w
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w

08000e10 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8000e14:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e16:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e18:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000e1a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	4770      	bx	lr

08000e20 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w

08000e30 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	6358      	str	r0, [r3, #52]	; 0x34
 8000e36:	4770      	bx	lr
 8000e38:	f3af 8000 	nop.w
 8000e3c:	f3af 8000 	nop.w

08000e40 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8000e40:	f000 bc96 	b.w	8001770 <adc_lld_init>
 8000e44:	f3af 8000 	nop.w
 8000e48:	f3af 8000 	nop.w
 8000e4c:	f3af 8000 	nop.w

08000e50 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8000e50:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8000e52:	2201      	movs	r2, #1
 8000e54:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8000e56:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8000e58:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8000e5a:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8000e5c:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8000e5e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8000e60:	3018      	adds	r0, #24
 8000e62:	f7ff bdbd 	b.w	80009e0 <chMtxObjectInit>
 8000e66:	bf00      	nop
 8000e68:	f3af 8000 	nop.w
 8000e6c:	f3af 8000 	nop.w

08000e70 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 8000e70:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e72:	2320      	movs	r3, #32
 8000e74:	4604      	mov	r4, r0
 8000e76:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8000e7a:	6041      	str	r1, [r0, #4]
  adc_lld_start(adcp);
 8000e7c:	f000 fc98 	bl	80017b0 <adc_lld_start>
  adcp->state = ADC_READY;
 8000e80:	2302      	movs	r3, #2
 8000e82:	7023      	strb	r3, [r4, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	f3af 8000 	nop.w

08000e90 <adcConvert>:
 * @api
 */
msg_t adcConvert(ADCDriver *adcp,
                 const ADCConversionGroup *grpp,
                 adcsample_t *samples,
                 size_t depth) {
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	2520      	movs	r5, #32
 8000e94:	f385 8811 	msr	BASEPRI, r5
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8000e98:	4605      	mov	r5, r0
 8000e9a:	2603      	movs	r6, #3
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8000e9c:	6082      	str	r2, [r0, #8]
  adcp->depth    = depth;
 8000e9e:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = grpp;
 8000ea0:	6101      	str	r1, [r0, #16]
  adcp->state    = ADC_ACTIVE;
 8000ea2:	f805 6b14 	strb.w	r6, [r5], #20
  adc_lld_start_conversion(adcp);
 8000ea6:	f000 fcbb 	bl	8001820 <adc_lld_start_conversion>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f7ff fd00 	bl	80008b0 <chThdSuspendS>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert(adcp->thread == NULL, "already waiting");
  adcStartConversionI(adcp, grpp, samples, depth);
  msg = osalThreadSuspendS(&adcp->thread);
  osalSysUnlock();
  return msg;
}
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	f3af 8000 	nop.w

08000ec0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000ec0:	300c      	adds	r0, #12
 8000ec2:	f7ff be1d 	b.w	8000b00 <chIQReadTimeout>
 8000ec6:	bf00      	nop
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	f3af 8000 	nop.w

08000ed0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000ed0:	300c      	adds	r0, #12
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	f7ff be13 	b.w	8000b00 <chIQReadTimeout>
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w

08000ee0 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000ee0:	3030      	adds	r0, #48	; 0x30
 8000ee2:	f7ff bea5 	b.w	8000c30 <chOQWriteTimeout>
 8000ee6:	bf00      	nop
 8000ee8:	f3af 8000 	nop.w
 8000eec:	f3af 8000 	nop.w

08000ef0 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000ef0:	3030      	adds	r0, #48	; 0x30
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef6:	f7ff be9b 	b.w	8000c30 <chOQWriteTimeout>
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w

08000f00 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000f00:	300c      	adds	r0, #12
 8000f02:	f7ff bdd5 	b.w	8000ab0 <chIQGetTimeout>
 8000f06:	bf00      	nop
 8000f08:	f3af 8000 	nop.w
 8000f0c:	f3af 8000 	nop.w

08000f10 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000f10:	300c      	adds	r0, #12
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f16:	f7ff bdcb 	b.w	8000ab0 <chIQGetTimeout>
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w

08000f20 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000f20:	3030      	adds	r0, #48	; 0x30
 8000f22:	f7ff be3d 	b.w	8000ba0 <chOQPutTimeout>
 8000f26:	bf00      	nop
 8000f28:	f3af 8000 	nop.w
 8000f2c:	f3af 8000 	nop.w

08000f30 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000f30:	3030      	adds	r0, #48	; 0x30
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f36:	f7ff be33 	b.w	8000ba0 <chOQPutTimeout>
 8000f3a:	bf00      	nop
 8000f3c:	f3af 8000 	nop.w

08000f40 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8000f40:	f000 be46 	b.w	8001bd0 <sd_lld_init>
 8000f44:	f3af 8000 	nop.w
 8000f48:	f3af 8000 	nop.w
 8000f4c:	f3af 8000 	nop.w

08000f50 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000f50:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000f54:	4604      	mov	r4, r0
 8000f56:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 8000f58:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000f5c:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000f5e:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000f60:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000f62:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000f64:	6060      	str	r0, [r4, #4]
 8000f66:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8000f6a:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000f6e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000f70:	2210      	movs	r2, #16
 8000f72:	f7ff fd6d 	bl	8000a50 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000f76:	9400      	str	r4, [sp, #0]
 8000f78:	462b      	mov	r3, r5
 8000f7a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000f7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000f82:	2210      	movs	r2, #16
 8000f84:	f7ff fdfc 	bl	8000b80 <chOQObjectInit>
}
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	08001ef0 	.word	0x08001ef0

08000f90 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000f90:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000f92:	6943      	ldr	r3, [r0, #20]
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000f94:	4604      	mov	r4, r0
 8000f96:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000f98:	b13b      	cbz	r3, 8000faa <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f104 000c 	add.w	r0, r4, #12
 8000fa0:	f7ff fd66 	bl	8000a70 <chIQPutI>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	db0b      	blt.n	8000fc0 <sdIncomingDataI+0x30>
 8000fa8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000faa:	2104      	movs	r1, #4
 8000fac:	4408      	add	r0, r1
 8000fae:	f7ff fd37 	bl	8000a20 <chEvtBroadcastFlagsI>
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f104 000c 	add.w	r0, r4, #12
 8000fb8:	f7ff fd5a 	bl	8000a70 <chIQPutI>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	daf3      	bge.n	8000fa8 <sdIncomingDataI+0x18>
 8000fc0:	1d20      	adds	r0, r4, #4
 8000fc2:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 8000fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc8:	f7ff bd2a 	b.w	8000a20 <chEvtBroadcastFlagsI>
 8000fcc:	f3af 8000 	nop.w

08000fd0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8000fd0:	0943      	lsrs	r3, r0, #5
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	b410      	push	{r4}
 8000fd6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000fda:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8000fde:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8000fe2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000fe6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000fe8:	f000 001f 	and.w	r0, r0, #31
 8000fec:	2201      	movs	r2, #1
 8000fee:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000ff8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000ffc:	6018      	str	r0, [r3, #0]
}
 8000ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	f3af 8000 	nop.w
 8001008:	f3af 8000 	nop.w
 800100c:	f3af 8000 	nop.w

08001010 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8001010:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800101c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	b10b      	cbz	r3, 8001026 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001022:	6850      	ldr	r0, [r2, #4]
 8001024:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800102a:	f7ff bea1 	b.w	8000d70 <_port_irq_epilogue>
 800102e:	bf00      	nop
 8001030:	40026000 	.word	0x40026000
 8001034:	20000a00 	.word	0x20000a00
 8001038:	f3af 8000 	nop.w
 800103c:	f3af 8000 	nop.w

08001040 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001044:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8001046:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001048:	0989      	lsrs	r1, r1, #6
 800104a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800104e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 8001050:	018c      	lsls	r4, r1, #6
 8001052:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8001054:	b10a      	cbz	r2, 800105a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8001056:	68c0      	ldr	r0, [r0, #12]
 8001058:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800105e:	f7ff be87 	b.w	8000d70 <_port_irq_epilogue>
 8001062:	bf00      	nop
 8001064:	40026000 	.word	0x40026000
 8001068:	20000a00 	.word	0x20000a00
 800106c:	f3af 8000 	nop.w

08001070 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001074:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001076:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001078:	0c09      	lsrs	r1, r1, #16
 800107a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800107e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 8001080:	040c      	lsls	r4, r1, #16
 8001082:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8001084:	b10a      	cbz	r2, 800108a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8001086:	6940      	ldr	r0, [r0, #20]
 8001088:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800108a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800108e:	f7ff be6f 	b.w	8000d70 <_port_irq_epilogue>
 8001092:	bf00      	nop
 8001094:	40026000 	.word	0x40026000
 8001098:	20000a00 	.word	0x20000a00
 800109c:	f3af 8000 	nop.w

080010a0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010a4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80010a6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010a8:	0d89      	lsrs	r1, r1, #22
 80010aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80010ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 80010b0:	058c      	lsls	r4, r1, #22
 80010b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80010b4:	b10a      	cbz	r2, 80010ba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80010b6:	69c0      	ldr	r0, [r0, #28]
 80010b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80010ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80010be:	f7ff be57 	b.w	8000d70 <_port_irq_epilogue>
 80010c2:	bf00      	nop
 80010c4:	40026000 	.word	0x40026000
 80010c8:	20000a00 	.word	0x20000a00
 80010cc:	f3af 8000 	nop.w

080010d0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80010d0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010d6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 80010d8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 80010de:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 80010e0:	b10a      	cbz	r2, 80010e6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80010e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010e4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80010e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80010ea:	f7ff be41 	b.w	8000d70 <_port_irq_epilogue>
 80010ee:	bf00      	nop
 80010f0:	40026000 	.word	0x40026000
 80010f4:	20000a00 	.word	0x20000a00
 80010f8:	f3af 8000 	nop.w
 80010fc:	f3af 8000 	nop.w

08001100 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001104:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001106:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001108:	0989      	lsrs	r1, r1, #6
 800110a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800110e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 8001110:	018c      	lsls	r4, r1, #6
 8001112:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001114:	b10a      	cbz	r2, 800111a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001116:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001118:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800111a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800111e:	f7ff be27 	b.w	8000d70 <_port_irq_epilogue>
 8001122:	bf00      	nop
 8001124:	40026000 	.word	0x40026000
 8001128:	20000a00 	.word	0x20000a00
 800112c:	f3af 8000 	nop.w

08001130 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001134:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001136:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001138:	0c09      	lsrs	r1, r1, #16
 800113a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800113e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 8001140:	040c      	lsls	r4, r1, #16
 8001142:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001144:	b10a      	cbz	r2, 800114a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001146:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001148:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800114a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800114e:	f7ff be0f 	b.w	8000d70 <_port_irq_epilogue>
 8001152:	bf00      	nop
 8001154:	40026000 	.word	0x40026000
 8001158:	20000a00 	.word	0x20000a00
 800115c:	f3af 8000 	nop.w

08001160 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001164:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8001166:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001168:	0d89      	lsrs	r1, r1, #22
 800116a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800116e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 8001170:	058c      	lsls	r4, r1, #22
 8001172:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8001174:	b10a      	cbz	r2, 800117a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8001176:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001178:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800117a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800117e:	f7ff bdf7 	b.w	8000d70 <_port_irq_epilogue>
 8001182:	bf00      	nop
 8001184:	40026000 	.word	0x40026000
 8001188:	20000a00 	.word	0x20000a00
 800118c:	f3af 8000 	nop.w

08001190 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 8001190:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001196:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001198:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800119a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800119e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80011a0:	b10a      	cbz	r2, 80011a6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80011a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80011a4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80011a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80011aa:	f7ff bde1 	b.w	8000d70 <_port_irq_epilogue>
 80011ae:	bf00      	nop
 80011b0:	40026400 	.word	0x40026400
 80011b4:	20000a00 	.word	0x20000a00
 80011b8:	f3af 8000 	nop.w
 80011bc:	f3af 8000 	nop.w

080011c0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 80011c4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 80011c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 80011c8:	0989      	lsrs	r1, r1, #6
 80011ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 80011ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 80011d0:	018c      	lsls	r4, r1, #6
 80011d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 80011d4:	b10a      	cbz	r2, 80011da <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 80011d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80011d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80011da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80011de:	f7ff bdc7 	b.w	8000d70 <_port_irq_epilogue>
 80011e2:	bf00      	nop
 80011e4:	40026400 	.word	0x40026400
 80011e8:	20000a00 	.word	0x20000a00
 80011ec:	f3af 8000 	nop.w

080011f0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 80011f4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 80011f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 80011f8:	0c09      	lsrs	r1, r1, #16
 80011fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 80011fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 8001200:	040c      	lsls	r4, r1, #16
 8001202:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001204:	b10a      	cbz	r2, 800120a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001206:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001208:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800120a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800120e:	f7ff bdaf 	b.w	8000d70 <_port_irq_epilogue>
 8001212:	bf00      	nop
 8001214:	40026400 	.word	0x40026400
 8001218:	20000a00 	.word	0x20000a00
 800121c:	f3af 8000 	nop.w

08001220 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001224:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8001226:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001228:	0d89      	lsrs	r1, r1, #22
 800122a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800122e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 8001230:	058c      	lsls	r4, r1, #22
 8001232:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001234:	b10a      	cbz	r2, 800123a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001236:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001238:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800123e:	f7ff bd97 	b.w	8000d70 <_port_irq_epilogue>
 8001242:	bf00      	nop
 8001244:	40026400 	.word	0x40026400
 8001248:	20000a00 	.word	0x20000a00
 800124c:	f3af 8000 	nop.w

08001250 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 8001250:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001256:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001258:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800125a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800125e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001260:	b10a      	cbz	r2, 8001266 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001262:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001264:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800126a:	f7ff bd81 	b.w	8000d70 <_port_irq_epilogue>
 800126e:	bf00      	nop
 8001270:	40026400 	.word	0x40026400
 8001274:	20000a00 	.word	0x20000a00
 8001278:	f3af 8000 	nop.w
 800127c:	f3af 8000 	nop.w

08001280 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001284:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001286:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001288:	0989      	lsrs	r1, r1, #6
 800128a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800128e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 8001290:	018c      	lsls	r4, r1, #6
 8001292:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001294:	b10a      	cbz	r2, 800129a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001296:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001298:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800129a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800129e:	f7ff bd67 	b.w	8000d70 <_port_irq_epilogue>
 80012a2:	bf00      	nop
 80012a4:	40026400 	.word	0x40026400
 80012a8:	20000a00 	.word	0x20000a00
 80012ac:	f3af 8000 	nop.w

080012b0 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80012b4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 80012b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80012b8:	0c09      	lsrs	r1, r1, #16
 80012ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 80012be:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 80012c0:	040c      	lsls	r4, r1, #16
 80012c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80012c4:	b10a      	cbz	r2, 80012ca <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80012c6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80012c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80012ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012ce:	f7ff bd4f 	b.w	8000d70 <_port_irq_epilogue>
 80012d2:	bf00      	nop
 80012d4:	40026400 	.word	0x40026400
 80012d8:	20000a00 	.word	0x20000a00
 80012dc:	f3af 8000 	nop.w

080012e0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80012e4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80012e6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80012e8:	0d89      	lsrs	r1, r1, #22
 80012ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 80012ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 80012f0:	058c      	lsls	r4, r1, #22
 80012f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80012f4:	b10a      	cbz	r2, 80012fa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80012f6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80012f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80012fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012fe:	f7ff bd37 	b.w	8000d70 <_port_irq_epilogue>
 8001302:	bf00      	nop
 8001304:	40026400 	.word	0x40026400
 8001308:	20000a00 	.word	0x20000a00
 800130c:	f3af 8000 	nop.w

08001310 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <dmaInit+0x3c>)
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <dmaInit+0x40>)
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <dmaInit+0x44>)
 8001316:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001318:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	4c0e      	ldr	r4, [pc, #56]	; (8001358 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800131e:	4619      	mov	r1, r3
 8001320:	e001      	b.n	8001326 <dmaInit+0x16>
 8001322:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8001326:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001328:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800132c:	3301      	adds	r3, #1
 800132e:	2b10      	cmp	r3, #16
 8001330:	f102 020c 	add.w	r2, r2, #12
 8001334:	d1f5      	bne.n	8001322 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8001336:	4909      	ldr	r1, [pc, #36]	; (800135c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800133a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001342:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8001344:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8001346:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8001348:	60d3      	str	r3, [r2, #12]
}
 800134a:	4770      	bx	lr
 800134c:	20000a80 	.word	0x20000a80
 8001350:	08001f1c 	.word	0x08001f1c
 8001354:	40026010 	.word	0x40026010
 8001358:	20000a00 	.word	0x20000a00
 800135c:	40026000 	.word	0x40026000
 8001360:	40026400 	.word	0x40026400
 8001364:	f3af 8000 	nop.w
 8001368:	f3af 8000 	nop.w
 800136c:	f3af 8000 	nop.w

08001370 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8001372:	4f1f      	ldr	r7, [pc, #124]	; (80013f0 <dmaStreamAllocate+0x80>)
 8001374:	7a46      	ldrb	r6, [r0, #9]
 8001376:	683d      	ldr	r5, [r7, #0]
 8001378:	2401      	movs	r4, #1
 800137a:	fa04 fe06 	lsl.w	lr, r4, r6
 800137e:	ea1e 0f05 	tst.w	lr, r5
 8001382:	d131      	bne.n	80013e8 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001384:	4c1b      	ldr	r4, [pc, #108]	; (80013f4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8001386:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800138a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800138e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8001392:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001394:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001398:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800139c:	d004      	beq.n	80013a8 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800139e:	4c16      	ldr	r4, [pc, #88]	; (80013f8 <dmaStreamAllocate+0x88>)
 80013a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 80013a8:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 80013ac:	d116      	bne.n	80013dc <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80013ae:	6805      	ldr	r5, [r0, #0]
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	f023 031f 	bic.w	r3, r3, #31
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	f013 0401 	ands.w	r4, r3, #1
 80013be:	d1fb      	bne.n	80013b8 <dmaStreamAllocate+0x48>
 80013c0:	7a07      	ldrb	r7, [r0, #8]
 80013c2:	6846      	ldr	r6, [r0, #4]
 80013c4:	233d      	movs	r3, #61	; 0x3d
 80013c6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80013c8:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80013ca:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80013cc:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80013ce:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80013d0:	b162      	cbz	r2, 80013ec <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 80013d2:	7a80      	ldrb	r0, [r0, #10]
 80013d4:	f7ff fdfc 	bl	8000fd0 <nvicEnableVector>

  return FALSE;
 80013d8:	4620      	mov	r0, r4
 80013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 80013dc:	4c06      	ldr	r4, [pc, #24]	; (80013f8 <dmaStreamAllocate+0x88>)
 80013de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e4:	6323      	str	r3, [r4, #48]	; 0x30
 80013e6:	e7e2      	b.n	80013ae <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80013e8:	4620      	mov	r0, r4
 80013ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 80013ec:	4610      	mov	r0, r2
}
 80013ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f0:	20000a80 	.word	0x20000a80
 80013f4:	20000a00 	.word	0x20000a00
 80013f8:	40023800 	.word	0x40023800
 80013fc:	f3af 8000 	nop.w

08001400 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <hal_lld_init+0x60>)
 8001402:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800140a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800140c:	6119      	str	r1, [r3, #16]
 800140e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001410:	6958      	ldr	r0, [r3, #20]
 8001412:	6159      	str	r1, [r3, #20]
 8001414:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001416:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001418:	4c12      	ldr	r4, [pc, #72]	; (8001464 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800141a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800141e:	6218      	str	r0, [r3, #32]
 8001420:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001422:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001424:	6259      	str	r1, [r3, #36]	; 0x24
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001428:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800142a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800142e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001436:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001438:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800143a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800143e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001442:	d003      	beq.n	800144c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001444:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001448:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800144a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800144e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001452:	6853      	ldr	r3, [r2, #4]
 8001454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001458:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800145a:	f7ff bf59 	b.w	8001310 <dmaInit>
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000
 8001468:	f3af 8000 	nop.w
 800146c:	f3af 8000 	nop.w

08001470 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001470:	492c      	ldr	r1, [pc, #176]	; (8001524 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001474:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800147c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800147e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001480:	680b      	ldr	r3, [r1, #0]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001488:	680a      	ldr	r2, [r1, #0]
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <stm32_clock_init+0xb4>)
 800148c:	0790      	lsls	r0, r2, #30
 800148e:	d5fb      	bpl.n	8001488 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	f022 0203 	bic.w	r2, r2, #3
 8001496:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800149c:	4619      	mov	r1, r3
 800149e:	688b      	ldr	r3, [r1, #8]
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <stm32_clock_init+0xb4>)
 80014a2:	f013 030c 	ands.w	r3, r3, #12
 80014a6:	d1fa      	bne.n	800149e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80014ae:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80014b0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <stm32_clock_init+0xb4>)
 80014be:	0389      	lsls	r1, r1, #14
 80014c0:	d5fb      	bpl.n	80014ba <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80014c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80014ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014cc:	4915      	ldr	r1, [pc, #84]	; (8001524 <stm32_clock_init+0xb4>)
 80014ce:	0790      	lsls	r0, r2, #30
 80014d0:	d5fb      	bpl.n	80014ca <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <stm32_clock_init+0xbc>)
 80014d4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80014d6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80014da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014de:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80014e0:	6853      	ldr	r3, [r2, #4]
 80014e2:	0459      	lsls	r1, r3, #17
 80014e4:	d5fc      	bpl.n	80014e0 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80014e6:	490f      	ldr	r1, [pc, #60]	; (8001524 <stm32_clock_init+0xb4>)
 80014e8:	680a      	ldr	r2, [r1, #0]
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <stm32_clock_init+0xb4>)
 80014ec:	0192      	lsls	r2, r2, #6
 80014ee:	d5fb      	bpl.n	80014e8 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80014f2:	4910      	ldr	r1, [pc, #64]	; (8001534 <stm32_clock_init+0xc4>)
 80014f4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80014f6:	f240 7102 	movw	r1, #1794	; 0x702
 80014fa:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f042 0202 	orr.w	r2, r2, #2
 8001502:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001504:	461a      	mov	r2, r3
 8001506:	6893      	ldr	r3, [r2, #8]
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <stm32_clock_init+0xb4>)
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d1f9      	bne.n	8001506 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001512:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	644b      	str	r3, [r1, #68]	; 0x44
 800151a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	664b      	str	r3, [r1, #100]	; 0x64
 8001522:	4770      	bx	lr
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000
 800152c:	07415408 	.word	0x07415408
 8001530:	40023c00 	.word	0x40023c00
 8001534:	38081000 	.word	0x38081000
 8001538:	f3af 8000 	nop.w
 800153c:	f3af 8000 	nop.w

08001540 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	0792      	lsls	r2, r2, #30
 8001548:	d401      	bmi.n	800154e <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800154a:	f7ff bc11 	b.w	8000d70 <_port_irq_epilogue>
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800154e:	b510      	push	{r4, lr}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001550:	2400      	movs	r4, #0
 8001552:	611c      	str	r4, [r3, #16]
 8001554:	2320      	movs	r3, #32
 8001556:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800155a:	f7fe ff41 	bl	80003e0 <chSysTimerHandlerI>
 800155e:	f384 8811 	msr	BASEPRI, r4
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001566:	f7ff bc03 	b.w	8000d70 <_port_irq_epilogue>
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w

08001570 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001574:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001576:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800157e:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8001584:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001586:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001588:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800158c:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001590:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001594:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001596:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001598:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800159a:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800159c:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 800159e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80015a2:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80015a4:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80015a6:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80015a8:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 80015aa:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80015ac:	f7ff bd10 	b.w	8000fd0 <nvicEnableVector>
 80015b0:	40023800 	.word	0x40023800
 80015b4:	e0042000 	.word	0xe0042000
 80015b8:	f3af 8000 	nop.w
 80015bc:	f3af 8000 	nop.w

080015c0 <adc_lld_serve_rx_interrupt>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80015c0:	f011 0f0c 	tst.w	r1, #12
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c8:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80015ca:	d02e      	beq.n	800162a <adc_lld_serve_rx_interrupt+0x6a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80015cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f022 021f 	bic.w	r2, r2, #31
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	f011 0101 	ands.w	r1, r1, #1
 80015de:	d1fb      	bne.n	80015d8 <adc_lld_serve_rx_interrupt+0x18>

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80015e0:	6922      	ldr	r2, [r4, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80015e2:	7a07      	ldrb	r7, [r0, #8]
 80015e4:	6846      	ldr	r6, [r0, #4]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80015e6:	6895      	ldr	r5, [r2, #8]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 80015e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80015ea:	223d      	movs	r2, #61	; 0x3d
 80015ec:	40ba      	lsls	r2, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 80015ee:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80015f0:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 80015f2:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 80015f4:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80015f6:	6098      	str	r0, [r3, #8]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80015f8:	b145      	cbz	r5, 800160c <adc_lld_serve_rx_interrupt+0x4c>
 80015fa:	2305      	movs	r3, #5
 80015fc:	7023      	strb	r3, [r4, #0]
 80015fe:	4620      	mov	r0, r4
 8001600:	47a8      	blx	r5
 8001602:	7823      	ldrb	r3, [r4, #0]
 8001604:	2b05      	cmp	r3, #5
 8001606:	bf04      	itt	eq
 8001608:	2302      	moveq	r3, #2
 800160a:	7023      	strbeq	r3, [r4, #0]
 800160c:	2500      	movs	r5, #0
 800160e:	6125      	str	r5, [r4, #16]
 8001610:	2320      	movs	r3, #32
 8001612:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161a:	f104 0014 	add.w	r0, r4, #20
 800161e:	f7ff f957 	bl	80008d0 <chThdResumeI>
 8001622:	f385 8811 	msr	BASEPRI, r5
 8001626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 800162a:	6905      	ldr	r5, [r0, #16]
 800162c:	b1a5      	cbz	r5, 8001658 <adc_lld_serve_rx_interrupt+0x98>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800162e:	068a      	lsls	r2, r1, #26
 8001630:	d510      	bpl.n	8001654 <adc_lld_serve_rx_interrupt+0x94>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001632:	782b      	ldrb	r3, [r5, #0]
 8001634:	b1db      	cbz	r3, 800166e <adc_lld_serve_rx_interrupt+0xae>
 8001636:	686b      	ldr	r3, [r5, #4]
 8001638:	b173      	cbz	r3, 8001658 <adc_lld_serve_rx_interrupt+0x98>
 800163a:	68c2      	ldr	r2, [r0, #12]
 800163c:	2a01      	cmp	r2, #1
 800163e:	d947      	bls.n	80016d0 <adc_lld_serve_rx_interrupt+0x110>
 8001640:	8869      	ldrh	r1, [r5, #2]
 8001642:	6884      	ldr	r4, [r0, #8]
 8001644:	0852      	lsrs	r2, r2, #1
 8001646:	fb02 f101 	mul.w	r1, r2, r1
 800164a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 800164e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001652:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001654:	06cb      	lsls	r3, r1, #27
 8001656:	d401      	bmi.n	800165c <adc_lld_serve_rx_interrupt+0x9c>
 8001658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 800165c:	686b      	ldr	r3, [r5, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0fa      	beq.n	8001658 <adc_lld_serve_rx_interrupt+0x98>
 8001662:	68c2      	ldr	r2, [r0, #12]
 8001664:	6881      	ldr	r1, [r0, #8]
 8001666:	0852      	lsrs	r2, r2, #1
      }
    }
  }
}
 8001668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 800166c:	4718      	bx	r3
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800166e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001670:	6802      	ldr	r2, [r0, #0]
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f023 031f 	bic.w	r3, r3, #31
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	f013 0301 	ands.w	r3, r3, #1
 8001680:	d1fb      	bne.n	800167a <adc_lld_serve_rx_interrupt+0xba>
 8001682:	7a07      	ldrb	r7, [r0, #8]
 8001684:	6846      	ldr	r6, [r0, #4]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001686:	686d      	ldr	r5, [r5, #4]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8001688:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800168a:	213d      	movs	r1, #61	; 0x3d
 800168c:	40b9      	lsls	r1, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800168e:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001690:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 8001692:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001694:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001696:	6090      	str	r0, [r2, #8]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001698:	b1ad      	cbz	r5, 80016c6 <adc_lld_serve_rx_interrupt+0x106>
 800169a:	2304      	movs	r3, #4
 800169c:	7023      	strb	r3, [r4, #0]
 800169e:	68e2      	ldr	r2, [r4, #12]
 80016a0:	68a1      	ldr	r1, [r4, #8]
 80016a2:	4620      	mov	r0, r4
 80016a4:	47a8      	blx	r5
 80016a6:	7823      	ldrb	r3, [r4, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <adc_lld_serve_rx_interrupt+0x106>
 80016ac:	2320      	movs	r3, #32
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	f104 0014 	add.w	r0, r4, #20
 80016b8:	f7ff f90a 	bl	80008d0 <chThdResumeI>
 80016bc:	2300      	movs	r3, #0
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c6:	2202      	movs	r2, #2
 80016c8:	2300      	movs	r3, #0
 80016ca:	7022      	strb	r2, [r4, #0]
 80016cc:	6123      	str	r3, [r4, #16]
 80016ce:	e7ed      	b.n	80016ac <adc_lld_serve_rx_interrupt+0xec>
 80016d0:	6881      	ldr	r1, [r0, #8]
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 80016d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 80016d6:	4718      	bx	r3
 80016d8:	f3af 8000 	nop.w
 80016dc:	f3af 8000 	nop.w

080016e0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector88) {
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <Vector88+0x7c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 80016e6:	2100      	movs	r1, #0
 80016e8:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80016ea:	0693      	lsls	r3, r2, #26
 80016ec:	d531      	bpl.n	8001752 <Vector88+0x72>
 80016ee:	4c1c      	ldr	r4, [pc, #112]	; (8001760 <Vector88+0x80>)
 80016f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80016f2:	680a      	ldr	r2, [r1, #0]
 80016f4:	6853      	ldr	r3, [r2, #4]
 80016f6:	b363      	cbz	r3, 8001752 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 80016f8:	6925      	ldr	r5, [r4, #16]
 80016fa:	b355      	cbz	r5, 8001752 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f023 031f 	bic.w	r3, r3, #31
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	f013 0301 	ands.w	r3, r3, #1
 800170a:	d1fb      	bne.n	8001704 <Vector88+0x24>
 800170c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800170e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001710:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8001712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001714:	4d12      	ldr	r5, [pc, #72]	; (8001760 <Vector88+0x80>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001716:	213d      	movs	r1, #61	; 0x3d
 8001718:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800171c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800171e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8001720:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001722:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001724:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001726:	b146      	cbz	r6, 800173a <Vector88+0x5a>
 8001728:	2305      	movs	r3, #5
 800172a:	702b      	strb	r3, [r5, #0]
 800172c:	4628      	mov	r0, r5
 800172e:	47b0      	blx	r6
 8001730:	782b      	ldrb	r3, [r5, #0]
 8001732:	2b05      	cmp	r3, #5
 8001734:	bf04      	itt	eq
 8001736:	2302      	moveq	r3, #2
 8001738:	702b      	strbeq	r3, [r5, #0]
 800173a:	2500      	movs	r5, #0
 800173c:	6125      	str	r5, [r4, #16]
 800173e:	2320      	movs	r3, #32
 8001740:	f383 8811 	msr	BASEPRI, r3
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <Vector88+0x84>)
 800174a:	f7ff f8c1 	bl	80008d0 <chThdResumeI>
 800174e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 8001752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 8001756:	f7ff bb0b 	b.w	8000d70 <_port_irq_epilogue>
 800175a:	bf00      	nop
 800175c:	40012000 	.word	0x40012000
 8001760:	20000a84 	.word	0x20000a84
 8001764:	20000a98 	.word	0x20000a98
 8001768:	f3af 8000 	nop.w
 800176c:	f3af 8000 	nop.w

08001770 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8001770:	b510      	push	{r4, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001772:	4c08      	ldr	r4, [pc, #32]	; (8001794 <adc_lld_init+0x24>)
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff fb6b 	bl	8000e50 <adcObjectInit>
  ADCD1.adc = ADC1;
 800177a:	4907      	ldr	r1, [pc, #28]	; (8001798 <adc_lld_init+0x28>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <adc_lld_init+0x2c>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <adc_lld_init+0x30>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8001780:	62a1      	str	r1, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001782:	62e2      	str	r2, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001784:	6323      	str	r3, [r4, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 8001786:	2106      	movs	r1, #6
 8001788:	2012      	movs	r0, #18
}
 800178a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 800178e:	f7ff bc1f 	b.w	8000fd0 <nvicEnableVector>
 8001792:	bf00      	nop
 8001794:	20000a84 	.word	0x20000a84
 8001798:	40012000 	.word	0x40012000
 800179c:	08001fa0 	.word	0x08001fa0
 80017a0:	00022c16 	.word	0x00022c16
 80017a4:	f3af 8000 	nop.w
 80017a8:	f3af 8000 	nop.w
 80017ac:	f3af 8000 	nop.w

080017b0 <adc_lld_start>:
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 80017b0:	7803      	ldrb	r3, [r0, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d000      	beq.n	80017b8 <adc_lld_start+0x8>
 80017b6:	4770      	bx	lr
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <adc_lld_start+0x50>)
 80017ba:	4298      	cmp	r0, r3
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
 80017bc:	b510      	push	{r4, lr}
 80017be:	4604      	mov	r4, r0

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 80017c0:	d00d      	beq.n	80017de <adc_lld_start+0x2e>
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <adc_lld_start+0x54>)
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 80017c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80017c6:	6843      	ldr	r3, [r0, #4]
 80017c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 80017cc:	2100      	movs	r1, #0
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
    adcp->adc->CR2 = 0;
    adcp->adc->CR2 = ADC_CR2_ADON;
 80017d2:	2401      	movs	r4, #1
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80017d4:	6043      	str	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 80017d6:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 80017d8:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 80017da:	6094      	str	r4, [r2, #8]
 80017dc:	bd10      	pop	{r4, pc}
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 80017de:	4603      	mov	r3, r0
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <adc_lld_start+0x58>)
 80017e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80017e4:	2106      	movs	r1, #6
 80017e6:	f7ff fdc3 	bl	8001370 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80017ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      rccEnableADC1(FALSE);
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <adc_lld_start+0x5c>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <adc_lld_start+0x60>)
 80017f2:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
 80017f4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	e7e1      	b.n	80017c2 <adc_lld_start+0x12>
 80017fe:	bf00      	nop
 8001800:	20000a84 	.word	0x20000a84
 8001804:	40012300 	.word	0x40012300
 8001808:	080015c1 	.word	0x080015c1
 800180c:	40023800 	.word	0x40023800
 8001810:	4001204c 	.word	0x4001204c
 8001814:	f3af 8000 	nop.w
 8001818:	f3af 8000 	nop.w
 800181c:	f3af 8000 	nop.w

08001820 <adc_lld_start_conversion>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8001820:	6903      	ldr	r3, [r0, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
 8001822:	6b01      	ldr	r1, [r0, #48]	; 0x30
  if (grpp->circular) {
 8001824:	781a      	ldrb	r2, [r3, #0]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8001828:	2a00      	cmp	r2, #0
 800182a:	d12b      	bne.n	8001884 <adc_lld_start_conversion+0x64>
 800182c:	68c2      	ldr	r2, [r0, #12]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800182e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8001830:	885c      	ldrh	r4, [r3, #2]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8001832:	682d      	ldr	r5, [r5, #0]
 8001834:	6886      	ldr	r6, [r0, #8]
 8001836:	60ee      	str	r6, [r5, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8001838:	fb02 f204 	mul.w	r2, r2, r4
 800183c:	606a      	str	r2, [r5, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800183e:	68dc      	ldr	r4, [r3, #12]
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 8001840:	6029      	str	r1, [r5, #0]
  dmaStreamEnable(adcp->dmastp);
 8001842:	682e      	ldr	r6, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8001844:	6a82      	ldr	r2, [r0, #40]	; 0x28

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8001846:	6919      	ldr	r1, [r3, #16]
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8001848:	f8d3 e014 	ldr.w	lr, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 800184c:	699f      	ldr	r7, [r3, #24]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800184e:	f044 6080 	orr.w	r0, r4, #67108864	; 0x4000000
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 8001852:	f046 0401 	orr.w	r4, r6, #1
 8001856:	602c      	str	r4, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8001858:	2400      	movs	r4, #0
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 800185a:	69dd      	ldr	r5, [r3, #28]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 800185c:	6014      	str	r4, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 800185e:	6a1c      	ldr	r4, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8001862:	f8c2 e00c 	str.w	lr, [r2, #12]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001866:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
 800186a:	6117      	str	r7, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 800186c:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 800186e:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8001870:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8001872:	004b      	lsls	r3, r1, #1
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001874:	6050      	str	r0, [r2, #4]
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8001876:	d40d      	bmi.n	8001894 <adc_lld_start_conversion+0x74>

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8001878:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800187c:	f041 0101 	orr.w	r1, r1, #1

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  }
  else
    adcp->adc->CR2 = cr2;
 8001880:	6091      	str	r1, [r2, #8]
 8001882:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8001884:	68c2      	ldr	r2, [r0, #12]
 8001886:	2a01      	cmp	r2, #1
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
 8001888:	bf94      	ite	ls
 800188a:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
    if (adcp->depth > 1) {
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 800188e:	f441 7184 	orrhi.w	r1, r1, #264	; 0x108
 8001892:	e7cc      	b.n	800182e <adc_lld_start_conversion+0xe>

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001894:	f021 4380 	bic.w	r3, r1, #1073741824	; 0x40000000
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	f443 7340 	orr.w	r3, r3, #768	; 0x300

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80018a0:	f441 7140 	orr.w	r1, r1, #768	; 0x300

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80018a4:	f043 0303 	orr.w	r3, r3, #3

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80018a8:	f041 0103 	orr.w	r1, r1, #3

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80018ac:	6093      	str	r3, [r2, #8]

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80018ae:	6091      	str	r1, [r2, #8]
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	f3af 8000 	nop.w
 80018bc:	f3af 8000 	nop.w

080018c0 <adcSTM32EnableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 80018c0:	4a02      	ldr	r2, [pc, #8]	; (80018cc <adcSTM32EnableTSVREFE+0xc>)
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c8:	6053      	str	r3, [r2, #4]
 80018ca:	4770      	bx	lr
 80018cc:	40012300 	.word	0x40012300

080018d0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 80018d0:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80018d2:	4e3a      	ldr	r6, [pc, #232]	; (80019bc <_pal_lld_init+0xec>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018d4:	4d3a      	ldr	r5, [pc, #232]	; (80019c0 <_pal_lld_init+0xf0>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80018d6:	6b37      	ldr	r7, [r6, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018d8:	4c3a      	ldr	r4, [pc, #232]	; (80019c4 <_pal_lld_init+0xf4>)
 80018da:	493b      	ldr	r1, [pc, #236]	; (80019c8 <_pal_lld_init+0xf8>)
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <_pal_lld_init+0xfc>)
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <_pal_lld_init+0x100>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80018e0:	f047 071f 	orr.w	r7, r7, #31
 80018e4:	6337      	str	r7, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80018e6:	6d37      	ldr	r7, [r6, #80]	; 0x50
 80018e8:	f047 071f 	orr.w	r7, r7, #31
 80018ec:	6537      	str	r7, [r6, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018ee:	6846      	ldr	r6, [r0, #4]
 80018f0:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80018f2:	6886      	ldr	r6, [r0, #8]
 80018f4:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80018f6:	68c6      	ldr	r6, [r0, #12]
 80018f8:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 80018fa:	6906      	ldr	r6, [r0, #16]
 80018fc:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80018fe:	6946      	ldr	r6, [r0, #20]
 8001900:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001902:	6986      	ldr	r6, [r0, #24]
 8001904:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001906:	6806      	ldr	r6, [r0, #0]
 8001908:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800190a:	6a05      	ldr	r5, [r0, #32]
 800190c:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800190e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001910:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001912:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001914:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8001916:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001918:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800191a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800191c:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800191e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001920:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001922:	69c5      	ldr	r5, [r0, #28]
 8001924:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001926:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001928:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800192a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800192c:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800192e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001930:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001932:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001934:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001936:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001938:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800193a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800193c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800193e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001940:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001942:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001944:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001946:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001948:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800194a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800194c:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800194e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001950:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001952:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001954:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001956:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001958:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800195a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800195c:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800195e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001960:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001962:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001964:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001966:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8001968:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800196a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800196e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001970:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001974:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001976:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800197c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800197e:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001980:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001984:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 8001988:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800198c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8001990:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8001994:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8001998:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800199c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 80019a0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80019a4:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 80019a8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80019ac:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 80019b0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80019b4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 80019b8:	bcf0      	pop	{r4, r5, r6, r7}
 80019ba:	4770      	bx	lr
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	f3af 8000 	nop.w
 80019d8:	f3af 8000 	nop.w
 80019dc:	f3af 8000 	nop.w

080019e0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80019e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 80019e4:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80019e8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80019ec:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80019f0:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 80019f4:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80019f8:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80019fa:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80019fe:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001a02:	f04f 0803 	mov.w	r8, #3
 8001a06:	e030      	b.n	8001a6a <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001a08:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8001a0c:	ea2b 0303 	bic.w	r3, fp, r3
 8001a10:	ea43 030a 	orr.w	r3, r3, sl
 8001a14:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001a16:	6843      	ldr	r3, [r0, #4]
 8001a18:	fa09 fa04 	lsl.w	sl, r9, r4
 8001a1c:	ea23 030a 	bic.w	r3, r3, sl
 8001a20:	433b      	orrs	r3, r7
 8001a22:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001a24:	0063      	lsls	r3, r4, #1
 8001a26:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001a2a:	fa08 f303 	lsl.w	r3, r8, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	ea0a 0a03 	and.w	sl, sl, r3
 8001a34:	ea4a 0a06 	orr.w	sl, sl, r6
 8001a38:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001a3c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8001a40:	ea03 0a0a 	and.w	sl, r3, sl
 8001a44:	ea4a 0a05 	orr.w	sl, sl, r5
 8001a48:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 8001a4c:	f8d0 a000 	ldr.w	sl, [r0]
 8001a50:	ea03 030a 	and.w	r3, r3, sl
 8001a54:	ea43 030e 	orr.w	r3, r3, lr
 8001a58:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 8001a5a:	0849      	lsrs	r1, r1, #1
 8001a5c:	d019      	beq.n	8001a92 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 8001a5e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 8001a60:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 8001a62:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 8001a64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8001a68:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001a6a:	f004 0307 	and.w	r3, r4, #7
 8001a6e:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8001a70:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001a74:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 8001a78:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8001a7c:	d0ed      	beq.n	8001a5a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 8001a7e:	2c07      	cmp	r4, #7
 8001a80:	d9c2      	bls.n	8001a08 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001a82:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8001a86:	ea2b 0303 	bic.w	r3, fp, r3
 8001a8a:	ea43 030a 	orr.w	r3, r3, sl
 8001a8e:	6243      	str	r3, [r0, #36]	; 0x24
 8001a90:	e7c1      	b.n	8001a16 <_pal_lld_setgroupmode+0x36>
 8001a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	f3af 8000 	nop.w
 8001a9c:	f3af 8000 	nop.w

08001aa0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8001aa0:	4a02      	ldr	r2, [pc, #8]	; (8001aac <notify2+0xc>)
 8001aa2:	68d3      	ldr	r3, [r2, #12]
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	60d3      	str	r3, [r2, #12]
 8001aaa:	4770      	bx	lr
 8001aac:	40004400 	.word	0x40004400

08001ab0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8001ab2:	4e43      	ldr	r6, [pc, #268]	; (8001bc0 <VectorD8+0x110>)
 8001ab4:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001ab6:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 8001ab8:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001aba:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8001abc:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001abe:	d44f      	bmi.n	8001b60 <VectorD8+0xb0>
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001ac6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001aca:	d108      	bne.n	8001ade <VectorD8+0x2e>
 8001acc:	e029      	b.n	8001b22 <VectorD8+0x72>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8001ace:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8001ad0:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8001ad2:	d41d      	bmi.n	8001b10 <VectorD8+0x60>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001ad4:	682c      	ldr	r4, [r5, #0]
 8001ad6:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001ad8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001adc:	d021      	beq.n	8001b22 <VectorD8+0x72>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001ade:	0723      	lsls	r3, r4, #28
 8001ae0:	d0f5      	beq.n	8001ace <VectorD8+0x1e>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8001ae2:	f014 0f08 	tst.w	r4, #8
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2100      	moveq	r1, #0
 8001aea:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8001aec:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8001aee:	bf48      	it	mi
 8001af0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001af4:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001af6:	bf48      	it	mi
 8001af8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001afc:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001afe:	bf48      	it	mi
 8001b00:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001b04:	482f      	ldr	r0, [pc, #188]	; (8001bc4 <VectorD8+0x114>)
 8001b06:	f7fe ff8b 	bl	8000a20 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8001b0a:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8001b0c:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8001b0e:	d5e1      	bpl.n	8001ad4 <VectorD8+0x24>
      sdIncomingDataI(sdp, b);
 8001b10:	b2c9      	uxtb	r1, r1
 8001b12:	482b      	ldr	r0, [pc, #172]	; (8001bc0 <VectorD8+0x110>)
 8001b14:	f7ff fa3c 	bl	8000f90 <sdIncomingDataI>
    sr = u->SR;
 8001b18:	682c      	ldr	r4, [r5, #0]
 8001b1a:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001b1c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001b20:	d1dd      	bne.n	8001ade <VectorD8+0x2e>
 8001b22:	2300      	movs	r3, #0
 8001b24:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001b28:	0639      	lsls	r1, r7, #24
 8001b2a:	d501      	bpl.n	8001b30 <VectorD8+0x80>
 8001b2c:	0622      	lsls	r2, r4, #24
 8001b2e:	d426      	bmi.n	8001b7e <VectorD8+0xce>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8001b30:	0663      	lsls	r3, r4, #25
 8001b32:	d511      	bpl.n	8001b58 <VectorD8+0xa8>
 8001b34:	2320      	movs	r3, #32
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8001b3c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8001b3e:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <VectorD8+0x110>)
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d029      	beq.n	8001b98 <VectorD8+0xe8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001b44:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001b48:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 8001b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001b4e:	60eb      	str	r3, [r5, #12]
 8001b50:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001b52:	602a      	str	r2, [r5, #0]
 8001b54:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8001b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8001b5c:	f7ff b908 	b.w	8000d70 <_port_irq_epilogue>
 8001b60:	2320      	movs	r3, #32
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6a:	1d30      	adds	r0, r6, #4
 8001b6c:	f7fe ff58 	bl	8000a20 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8001b70:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001b74:	602b      	str	r3, [r5, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	f383 8811 	msr	BASEPRI, r3
 8001b7c:	e7a0      	b.n	8001ac0 <VectorD8+0x10>
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <VectorD8+0x118>)
 8001b86:	f7ff f833 	bl	8000bf0 <chOQGetI>
    if (b < Q_OK) {
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	db0c      	blt.n	8001ba8 <VectorD8+0xf8>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8001b8e:	6068      	str	r0, [r5, #4]
 8001b90:	2300      	movs	r3, #0
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	e7cb      	b.n	8001b30 <VectorD8+0x80>
 8001b98:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0d2      	beq.n	8001b44 <VectorD8+0x94>
 8001b9e:	3004      	adds	r0, #4
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	f7fe ff3d 	bl	8000a20 <chEvtBroadcastFlagsI>
 8001ba6:	e7cd      	b.n	8001b44 <VectorD8+0x94>
 8001ba8:	2108      	movs	r1, #8
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <VectorD8+0x114>)
 8001bac:	f7fe ff38 	bl	8000a20 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001bb0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001bb4:	403b      	ands	r3, r7
 8001bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bba:	60eb      	str	r3, [r5, #12]
 8001bbc:	e7e8      	b.n	8001b90 <VectorD8+0xe0>
 8001bbe:	bf00      	nop
 8001bc0:	20000ab8 	.word	0x20000ab8
 8001bc4:	20000abc 	.word	0x20000abc
 8001bc8:	20000ae8 	.word	0x20000ae8
 8001bcc:	f3af 8000 	nop.w

08001bd0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8001bd0:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8001bd2:	4c04      	ldr	r4, [pc, #16]	; (8001be4 <sd_lld_init+0x14>)
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <sd_lld_init+0x18>)
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f7ff f9b9 	bl	8000f50 <sdObjectInit>
  SD2.usart = USART2;
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <sd_lld_init+0x1c>)
 8001be0:	6763      	str	r3, [r4, #116]	; 0x74
 8001be2:	bd10      	pop	{r4, pc}
 8001be4:	20000ab8 	.word	0x20000ab8
 8001be8:	08001aa1 	.word	0x08001aa1
 8001bec:	40004400 	.word	0x40004400

08001bf0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8001bf0:	f7ff bc3e 	b.w	8001470 <stm32_clock_init>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	f3af 8000 	nop.w
 8001bfc:	f3af 8000 	nop.w

08001c00 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	f3af 8000 	nop.w
 8001c0c:	f3af 8000 	nop.w

08001c10 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001c10:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <Thread1+0x28>)
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <Thread1+0x2c>)
 8001c16:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOC, GPIOC_PIN13);       /* Orange.  */
 8001c18:	4c09      	ldr	r4, [pc, #36]	; (8001c40 <Thread1+0x30>)
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001c20:	462e      	mov	r6, r5
 8001c22:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(1000);
 8001c24:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c28:	f7fe fe0a 	bl	8000840 <chThdSleep>
    palClearPad(GPIOC, GPIOC_PIN13);     /* Orange.  */
 8001c2c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(1000);
 8001c2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c32:	f7fe fe05 	bl	8000840 <chThdSleep>
 8001c36:	e7f4      	b.n	8001c22 <Thread1+0x12>
 8001c38:	20000800 	.word	0x20000800
 8001c3c:	08002080 	.word	0x08002080
 8001c40:	40020800 	.word	0x40020800
 8001c44:	f3af 8000 	nop.w
 8001c48:	f3af 8000 	nop.w
 8001c4c:	f3af 8000 	nop.w

08001c50 <lcd_setio>:


/*
 * LCD set I/Os
 */
void lcd_setio(){
 8001c50:	b510      	push	{r4, lr}

  palSetPadMode(GPIOE, EN, PAL_MODE_OUTPUT_PUSHPULL); //EN
 8001c52:	4c11      	ldr	r4, [pc, #68]	; (8001c98 <lcd_setio+0x48>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	4611      	mov	r1, r2
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fec1 	bl	80019e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, RS, PAL_MODE_OUTPUT_PUSHPULL); //RS
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2120      	movs	r1, #32
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <lcd_setio+0x4c>)
 8001c64:	f7ff febc 	bl	80019e0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOE, DB4, PAL_MODE_OUTPUT_PUSHPULL); //DB4
 8001c68:	4620      	mov	r0, r4
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	f7ff feb7 	bl	80019e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB5, PAL_MODE_OUTPUT_PUSHPULL); //DB5
 8001c72:	4620      	mov	r0, r4
 8001c74:	2201      	movs	r2, #1
 8001c76:	2104      	movs	r1, #4
 8001c78:	f7ff feb2 	bl	80019e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB6, PAL_MODE_OUTPUT_PUSHPULL); //DB6
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2108      	movs	r1, #8
 8001c82:	f7ff fead 	bl	80019e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, DB7, PAL_MODE_OUTPUT_PUSHPULL); //DB7
 8001c86:	4620      	mov	r0, r4
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	f7ff fea8 	bl	80019e0 <_pal_lld_setgroupmode>

  palWritePort(GPIOE, 0);
 8001c90:	2300      	movs	r3, #0
 8001c92:	6163      	str	r3, [r4, #20]
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <lcd_pulsen>:
	palWritePort(GPIOE, (data<<1));
}


//Pulse Enable Pin
void lcd_pulsen(){
 8001ca0:	b538      	push	{r3, r4, r5, lr}

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
 8001ca2:	4d06      	ldr	r5, [pc, #24]	; (8001cbc <lcd_pulsen+0x1c>)
 8001ca4:	2401      	movs	r4, #1
	chThdSleepMicroseconds(40);
 8001ca6:	4620      	mov	r0, r4

//Pulse Enable Pin
void lcd_pulsen(){

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
 8001ca8:	832c      	strh	r4, [r5, #24]
	chThdSleepMicroseconds(40);
 8001caa:	f7fe fdc9 	bl	8000840 <chThdSleep>
	palClearPad(GPIOE, EN);
 8001cae:	836c      	strh	r4, [r5, #26]
	chThdSleepMicroseconds(1);
 8001cb0:	4620      	mov	r0, r4
	
}
 8001cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	//Send Pulse Enable
	palSetPad(GPIOE, EN);
	chThdSleepMicroseconds(40);
	palClearPad(GPIOE, EN);
	chThdSleepMicroseconds(1);
 8001cb6:	f7fe bdc3 	b.w	8000840 <chThdSleep>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <lcd_sendByte>:
	
}
void lcd_sendByte(uint8_t c){
 8001cc0:	b538      	push	{r3, r4, r5, lr}
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8001cc2:	4d07      	ldr	r5, [pc, #28]	; (8001ce0 <lcd_sendByte+0x20>)
	chThdSleepMicroseconds(40);
	palClearPad(GPIOE, EN);
	chThdSleepMicroseconds(1);
	
}
void lcd_sendByte(uint8_t c){
 8001cc4:	4604      	mov	r4, r0
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8001cc6:	0903      	lsrs	r3, r0, #4
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	f004 040f 	and.w	r4, r4, #15
 8001cce:	616b      	str	r3, [r5, #20]
 8001cd0:	0064      	lsls	r4, r4, #1

	uint8_t x;
	x = c >> 4;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();
 8001cd2:	f7ff ffe5 	bl	8001ca0 <lcd_pulsen>
}



void lcd_send_nibble(uint8_t  data){
	palWritePort(GPIOE, (data<<1));
 8001cd6:	616c      	str	r4, [r5, #20]
	x = c & 0x0f;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();

}
 8001cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_pulsen();
	
	x = c & 0x0f;
	lcd_send_nibble(x);
//	chThdSleepMicroseconds(50);
	lcd_pulsen();
 8001cdc:	f7ff bfe0 	b.w	8001ca0 <lcd_pulsen>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <lcd_init>:
	chThdSleepMicroseconds(50);
}
/*
 * LCD init
 */
void lcd_init(){
 8001cf0:	b538      	push	{r3, r4, r5, lr}
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001cf2:	4c22      	ldr	r4, [pc, #136]	; (8001d7c <lcd_init+0x8c>)
 8001cf4:	2520      	movs	r5, #32
}
/*
 * LCD init
 */
void lcd_init(){
	chThdSleepMilliseconds(100);
 8001cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cfa:	f7fe fda1 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001cfe:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ffdd 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7fe fd9a 	bl	8000840 <chThdSleep>
 * LCD init
 */
void lcd_init(){
	chThdSleepMilliseconds(100);
	lcd_cmd(0x33);
	chThdSleepMilliseconds(5);
 8001d0c:	2032      	movs	r0, #50	; 0x32
 8001d0e:	f7fe fd97 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d12:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d14:	2032      	movs	r0, #50	; 0x32
 8001d16:	f7ff ffd3 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7fe fd90 	bl	8000840 <chThdSleep>
void lcd_init(){
	chThdSleepMilliseconds(100);
	lcd_cmd(0x33);
	chThdSleepMilliseconds(5);
	lcd_cmd(0x32);
	chThdSleepMilliseconds(5);
 8001d20:	2032      	movs	r0, #50	; 0x32
 8001d22:	f7fe fd8d 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d26:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d28:	2028      	movs	r0, #40	; 0x28
 8001d2a:	f7ff ffc9 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7fe fd86 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d34:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d36:	2008      	movs	r0, #8
 8001d38:	f7ff ffc2 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7fe fd7f 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d42:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff ffbb 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7fe fd78 	bl	8000840 <chThdSleep>
	lcd_cmd(0x32);
	chThdSleepMilliseconds(5);
	lcd_cmd(0x28);
	lcd_cmd(0x08);
	lcd_cmd(0x01);
	chThdSleepMilliseconds(3);
 8001d50:	201e      	movs	r0, #30
 8001d52:	f7fe fd75 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d56:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d58:	2006      	movs	r0, #6
 8001d5a:	f7ff ffb1 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe fd6e 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001d64:	8365      	strh	r5, [r4, #26]
	lcd_sendByte(c);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f7ff ffaa 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7fe fd67 	bl	8000840 <chThdSleep>
	chThdSleepMilliseconds(3);

	lcd_cmd(0x06);

	lcd_cmd(0x0F);
	chThdSleepMilliseconds(5);
 8001d72:	2032      	movs	r0, #50	; 0x32
}
 8001d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chThdSleepMilliseconds(3);

	lcd_cmd(0x06);

	lcd_cmd(0x0F);
	chThdSleepMilliseconds(5);
 8001d78:	f7fe bd62 	b.w	8000840 <chThdSleep>
 8001d7c:	40020400 	.word	0x40020400

08001d80 <lcd_printf>:
}


void lcd_printf(const char *text)
{
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	4604      	mov	r4, r0
 while (*text) // string ends with 0x00
 8001d84:	7800      	ldrb	r0, [r0, #0]
 8001d86:	b168      	cbz	r0, 8001da4 <lcd_printf+0x24>

}

void lcd_sendChar(uint8_t c){

	palSetPad(GPIOB, RS);
 8001d88:	2620      	movs	r6, #32
 8001d8a:	4d07      	ldr	r5, [pc, #28]	; (8001da8 <lcd_printf+0x28>)
 8001d8c:	4637      	mov	r7, r6
 8001d8e:	832f      	strh	r7, [r5, #24]
	lcd_sendByte(c);
 8001d90:	f7ff ff96 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe fd53 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
 8001d9a:	836e      	strh	r6, [r5, #26]
}


void lcd_printf(const char *text)
{
 while (*text) // string ends with 0x00
 8001d9c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d1f4      	bne.n	8001d8e <lcd_printf+0xe>
 8001da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40020400 	.word	0x40020400
 8001dac:	f3af 8000 	nop.w

08001db0 <main>:


/*
 * Application entry point.
 */
int main(void) {
 8001db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db4:	b082      	sub	sp, #8
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8001db6:	f7ff f80b 	bl	8000dd0 <halInit>
 8001dba:	2400      	movs	r4, #0
  chSysInit();
 8001dbc:	f7fe fab8 	bl	8000330 <chSysInit>
 8001dc0:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc4:	b662      	cpsie	i
  osalSysEnable();

  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dcc:	4831      	ldr	r0, [pc, #196]	; (8001e94 <main+0xe4>)
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001dce:	4f32      	ldr	r7, [pc, #200]	; (8001e98 <main+0xe8>)
 8001dd0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001ea8 <main+0xf8>
 8001dd4:	f7ff fe04 	bl	80019e0 <_pal_lld_setgroupmode>

lcd_setio();
 8001dd8:	f7ff ff3a 	bl	8001c50 <lcd_setio>
lcd_init();
 8001ddc:	f7ff ff88 	bl	8001cf0 <lcd_init>

/*
   * Initializes the ADC driver 1 and enable the thermal sensor.
   * The pin PC0 on the port GPIOC is programmed as analog input.
   */
  adcStart(&ADCD1, NULL);
 8001de0:	4621      	mov	r1, r4
 8001de2:	482e      	ldr	r0, [pc, #184]	; (8001e9c <main+0xec>)
 8001de4:	f7ff f844 	bl	8000e70 <adcStart>
  adcSTM32EnableTSVREFE();
 8001de8:	f7ff fd6a 	bl	80018c0 <adcSTM32EnableTSVREFE>
  palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);
 8001dec:	2203      	movs	r2, #3
 8001dee:	2101      	movs	r1, #1
 8001df0:	4828      	ldr	r0, [pc, #160]	; (8001e94 <main+0xe4>)
 8001df2:	f7ff fdf5 	bl	80019e0 <_pal_lld_setgroupmode>


  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <main+0xf0>)
 8001dfa:	482a      	ldr	r0, [pc, #168]	; (8001ea4 <main+0xf4>)
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001e02:	f7fe fce5 	bl	80007d0 <chThdCreateStatic>
 8001e06:	46b9      	mov	r9, r7
	  
/***
 * ADC Conversion
 * */
 
   adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 8001e08:	2304      	movs	r3, #4
 8001e0a:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <main+0xf8>)
 8001e0c:	4927      	ldr	r1, [pc, #156]	; (8001eac <main+0xfc>)
 8001e0e:	4823      	ldr	r0, [pc, #140]	; (8001e9c <main+0xec>)
 8001e10:	f7ff f83e 	bl	8000e90 <adcConvert>
   
   	/* Calculates the average values from the ADC samples.*/
	avg_ch1 = (samples1[0] + samples1[1] + samples1[2] + samples1[3]) / 4;
 8001e14:	f8ba 8000 	ldrh.w	r8, [sl]
 8001e18:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8001e1c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8001e20:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 /***
  * 
  * 
  * 
  * */
	lcd_printf("El taller de RF");
 8001e24:	4822      	ldr	r0, [pc, #136]	; (8001eb0 <main+0x100>)
 * */
 
   adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
   
   	/* Calculates the average values from the ADC samples.*/
	avg_ch1 = (samples1[0] + samples1[1] + samples1[2] + samples1[3]) / 4;
 8001e26:	4488      	add	r8, r1
 8001e28:	4490      	add	r8, r2
 8001e2a:	4498      	add	r8, r3
 /***
  * 
  * 
  * 
  * */
	lcd_printf("El taller de RF");
 8001e2c:	f7ff ffa8 	bl	8001d80 <lcd_printf>
 * */
 
   adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
   
   	/* Calculates the average values from the ADC samples.*/
	avg_ch1 = (samples1[0] + samples1[1] + samples1[2] + samples1[3]) / 4;
 8001e30:	ea4f 08a8 	mov.w	r8, r8, asr #2
 /***
  * 
  * 
  * 
  * */
	lcd_printf("El taller de RF");
 8001e34:	241a      	movs	r4, #26
 8001e36:	f04f 0620 	mov.w	r6, #32
	lcd_sendByte(c);
 8001e3a:	2014      	movs	r0, #20
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001e3c:	837e      	strh	r6, [r7, #26]
	lcd_sendByte(c);
 8001e3e:	f7ff ff3f 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7fe fcfc 	bl	8000840 <chThdSleep>
 8001e48:	1e63      	subs	r3, r4, #1

  for(uint8_t i =0 ; i<=25; i++){
 8001e4a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001e4e:	f04f 0520 	mov.w	r5, #32
 8001e52:	d1f2      	bne.n	8001e3a <main+0x8a>
}

void lcd_sendChar(uint8_t c){

	palSetPad(GPIOB, RS);
	lcd_sendByte(c);
 8001e54:	fa5f f088 	uxtb.w	r0, r8

}

void lcd_sendChar(uint8_t c){

	palSetPad(GPIOB, RS);
 8001e58:	f8a9 5018 	strh.w	r5, [r9, #24]
	lcd_sendByte(c);
 8001e5c:	f7ff ff30 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7fe fced 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
 8001e66:	f8a9 501a 	strh.w	r5, [r9, #26]
	 lcd_cmd(0x14); 
  }

	lcd_sendChar(avg_ch1);

chThdSleepMilliseconds(1000);
 8001e6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e6e:	f7fe fce7 	bl	8000840 <chThdSleep>
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001e72:	f8a9 501a 	strh.w	r5, [r9, #26]
	lcd_sendByte(c);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff ff22 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7fe fcdf 	bl	8000840 <chThdSleep>
	palClearPad(GPIOB, RS);
}

void lcd_cmd(uint8_t c){

	palClearPad(GPIOB, RS);
 8001e82:	f8a9 501a 	strh.w	r5, [r9, #26]
	lcd_sendByte(c);
 8001e86:	2002      	movs	r0, #2
 8001e88:	f7ff ff1a 	bl	8001cc0 <lcd_sendByte>
	chThdSleepMicroseconds(50);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7fe fcd7 	bl	8000840 <chThdSleep>
 8001e92:	e7b9      	b.n	8001e08 <main+0x58>
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	20000a84 	.word	0x20000a84
 8001ea0:	08001c11 	.word	0x08001c11
 8001ea4:	20000b30 	.word	0x20000b30
 8001ea8:	20000d00 	.word	0x20000d00
 8001eac:	080020a0 	.word	0x080020a0
 8001eb0:	08002088 	.word	0x08002088
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	f3af 8000 	nop.w
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	656c6469 	.word	0x656c6469
	...

08001ed0 <ch_debug>:
 8001ed0:	6e69616d 18011600 08440404 1814100c     main......D.....
 8001ee0:	1e1d1c00 00000000 00000000 00000000     ................

08001ef0 <vmt>:
 8001ef0:	08000ef1 08000ed1 08000f31 08000f11     ........1.......
 8001f00:	08000f21 08000f01 08000ee1 08000ec1     !...............

08001f10 <_stm32_dma_streams>:
 8001f10:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8001f20:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8001f30:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8001f40:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8001f50:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8001f60:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8001f70:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8001f80:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8001f90:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8001fa0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8001fb0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8001fc0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08001fd0 <pal_default_config>:
 8001fd0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8001fe0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8001ff0:	00000240 ffffffff 55114515 0000ffff     @........E.U....
 8002000:	04000000 00000040 02208001 00000000     ....@..... .....
 8002010:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8002020:	00060600 55000100 00000000 ffffffff     .......U........
 8002030:	00555055 00000fff 00000000 00000000     UPU.............
 8002040:	00000040 00000000 ffffffff 00000000     @...............
 8002050:	0000ffff 00000000 00000000 00000000     ................
 8002060:	00000000 0000000f 00000000 00000003     ................
	...
 8002080:	6e696c62 0072656b 74206c45 656c6c61     blinker.El talle
 8002090:	65642072 00465220 00000000 00000000     r de RF.........

080020a0 <adcgrpcfg1>:
 80020a0:	00010000 00000000 00000000 00000000     ................
 80020b0:	40000000 00000000 00000000 00000000     ...@............
	...
